\input texinfo   @c -*- mode: texinfo; coding: utf-8 -*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@setfilename ../info/tramp
@c %**start of header
@include docstyle.texi
@c In the Tramp GIT, the version number is auto-frobbed from tramp.el,
@c and the bug report address is auto-frobbed from configure.ac.
@include trampver.texi
@settitle @value{tramp} @value{trampver} User Manual
@c %**end of header

@c This is *so* much nicer :)
@footnotestyle end

@copying
Copyright @copyright{} 1999--2022 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with the Front-Cover Texts being ``A GNU Manual'', and with the
Back-Cover Texts as in (a) below.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify
this GNU manual.''
@end quotation
@end copying

@c Entries for @command{install-info} to use.  We cannot use @value{tramp}.
@dircategory Emacs network features
@direntry
* Tramp: (tramp).            Transparent Remote Access, Multiple Protocol 
                               Emacs remote file access via ssh and scp.
@end direntry

@titlepage
@title @value{tramp} @value{trampver} User Manual
@author by Daniel Pittman
@author based on documentation by Kai Großjohann
@end titlepage

@contents


@node Top, Overview, (dir), (dir)
@top @value{tramp} @value{trampver} User Manual

このファイルは、Emacs 用のリモートファイル編集パッケージである @w{@value{tramp} @value{trampver}}
について説明しています。

@value{tramp} は、 ``Transparent Remote (file) Access, Multiple Protocol''
の略です。
このパッケージは、あたかもローカルファイルであるかのように、リモートファイルを透過的に編集するための簡単で便利な一貫したインターフェイスを提供します。
これは、編集、バージョン管理、 @code{dired} などにまで及びます。

このドキュメントの最新バージョンは、ウェブ上の @uref{@value{trampurl}} で見つけることができます。

@ifhtml
@value{tramp} の最新リリースは @uref{https://ftp.gnu.org/gnu/tramp/, download}
で入手できます。詳細については @ref{@value{tramp} の取得} を参照してください。これには Git サーバーの詳細を含みます。

@value{tramp} は @uref{https://savannah.gnu.org/projects/tramp/, Savannah
Project Page} にもあります。
@end ifhtml

@value{tramp} のメーリングリストは、 @email{@value{tramp-bug-report-address}} で利用でき、
@uref{https://lists.gnu.org/r/tramp-devel/, the @value{tramp} Mail Archive}
でアーカイブされています。 

@page
@insertcopying

@menu
* Overview::                 @value{tramp} が出来る事と 
                               出来無い事。

For the end user:



* @value{tramp} の取得::  @value{tramp} の取得方法。
@ifset installchapter
* Installation:: Installing @value{tramp} with your Emacs.
@end ifset
* Quick Start Guide::        Short introduction how to use @value{tramp}.
* Configuration::            Configuring @value{tramp} for use.
* Usage::                    An overview of the operation of @value{tramp}.
* Bug Reports::              Reporting Bugs and Problems.
* Frequently Asked Questions::  Questions and answers from the mailing list.

For the developer:



* Files directories and localnames::  How file names, directories and 
                                        localnames are mangled and managed.
* Traces and Profiles::      How to Customize Traces.

* GNU Free Documentation License::  The license for this documentation.
* Function Index::           @value{tramp} functions.
* Variable Index::           User options and variables.
* Concept Index::            An item for each concept.

@detailmenu
@c
 --- The Detailed Node Listing ---

@ifset installchapter

Installing @value{tramp} with your Emacs

@end ifset
@ifset installchapter
* System Requirements:: @value{tramp} インストールの前提条件。
@end ifset
@ifset installchapter
* Basic Installation:: Installation steps.
@end ifset
@ifset installchapter
* Installation parameters:: インストールを制御するためのパラメータ。
@end ifset
@ifset installchapter
* Testing:: A test suite for @value{tramp}.
@end ifset
@ifset installchapter
* Load paths:: How to plug-in @value{tramp} into your environment.
@end ifset


Configuring @value{tramp} for use



* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       @acronym{GVFS}-based external methods.
* FUSE-based methods::       @acronym{FUSE}-based external methods.
* Default Method::           Selecting a default method.
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple 
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name 
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related 
                                         information.
* Remote programs::          How @value{tramp} finds and uses programs on 
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               @acronym{FUSE} setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.

Using @value{tramp}



* File name syntax::         @value{tramp} file name conventions.
@ifset unified
* Change file name syntax:: Alternative file name syntax.
@end ifset
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding @file{~} to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.

How file names, directories and localnames are mangled and managed



* Localname deconstruction::  Breaking a localname into its components.
* External packages::        Integration with external Lisp packages.

@end detailmenu
@end menu


@node Overview
@chapter An overview of @value{tramp}
@cindex overview

@value{tramp} は、Emacs内からリモートファイルに透過的にアクセスするためのものです。 @value{tramp}
は、あたかもローカルファイルであるかのように、リモートファイルへの簡単で便利な一貫したインターフェイスを有効にします。 @value{tramp}
の透過性は、編集やバージョン管理や @code{dired} にまで及びます。

@value{tramp} は、@command{ssh} や @command{scp} や @command{telnet} や
それらの関連プログラムなどのような、 あまたのアクセス方式(access method)を使用してリモート・ホストにアクセスできます。
これらのプログラムに @acronym{ASCII} 文字を正常に渡すことができる場合、 @value{tramp} はそれらを使用できます。
@value{tramp} は、 8ビット・クリーンな接続を必要とせず、強制しません。

@value{tramp} の最も一般的なアクセス方式(access method)は、 @command{ssh} によるものです。これは、
@command{ftp} やその他の古いアクセス方式に代わる、より安全な方式です。

MS Windows オペレーティングシステムの @value{tramp} は PuTTY パッケージと統合され、@command{plink}
プログラムを使用します。

@value{tramp} は、ほとんどの場合、接続プログラムを使用してバックグラウンドで透過的に動作します。
これらのプログラムがリモートログインを有効にし、ターミナルを使用できる限り、@value{tramp}
はそれらをシームレスで透過的なアクセスに適応させることができます。

@value{tramp} は、リモートファイルの内容をローカルホストの編集および関連操作のために一時的に転送します。 @value{tramp}
は、標準の Emacsインターフェイスを使用してホスト間でファイルを転送することもできます。これは、Emacs に @value{tramp}
を直接統合する利点です。

@value{tramp} は、 @command{rcp} または @command{scp} または @command{rsync} または (MS
Windows では) @command{pscp} など、リモートファイル用に利用可能な、あまたのホストプログラムを使用してファイルを転送できます。
@value{tramp} は、これらのプログラムを指定し、特定のファイル、ホスト、またはアクセス方式(access
method)に合わせてカスタマイズする簡単な方法を提供します。

小さいサイズのファイル転送を高速化するために、@value{tramp} は @command{mimencode} または
@command{uuencode} を使用して、シェルを介して直接エンコードされた転送をサポートします
(そのようなツールがリモートホストで利用可能である場合)。


@subsubheading @value{tramp} behind the scenes
@cindex behind the scenes
@cindex details of operation
@cindex how it works

@value{tramp} を介してリモートファイルにアクセスするには、一連のアクションが必要であり、その多くはユーザーに対して透過的です。
ただし、一部のアクションではユーザーの応答が必要になる場合があります(パスワードの入力やファイル名の入力など)。
ここでは、関連する手順を説明するために、リモートホストでファイルを開く、ある典型的なシナリオを示します。

@kbd{C-x C-f} でファイル検索を開始し、 @value{tramp} ファイル名の一部を入力してから、 @kbd{@key{TAB}}
を押して完了します。 そのホストに初めて接続する場合は、以下のようになります:

@itemize
@item
@value{tramp} は @samp{telnet @var{host}} または @samp{ssh -l @var{user}
@var{host}} を呼び出し、外部プロセスを確立してリモートホストに接続します。 @value{tramp}
は、リモートホストからの出力も表示する Emacs バッファーを介してプロセスと通信します。

@item
リモートホストは、バッファ内でログイン名((たとえば、 @command{telnet} のために)を要求する場合があります。
一方、ログイン名がファイル名部分に含まれていた場合、@value{tramp} はログイン名に続いて改行(newline)を送信します。

@item
次に、リモートホストはパスワードまたはパスフレーズ (@command{ssh} または @command{telnet} の場合)
を要求する場合があります。 @value{tramp} は、ミニバッファーにパスワードプロンプトを表示しユーザーに入力を促します。 そして
@value{tramp} は、ユーザーから入力された内容をリモートホストに送信し、その後に改行(newline)を続けます。

@item
@value{tramp} は、今や、シェルプロンプト または 失敗したログインメッセージのいずれかを待機しています。

@value{tramp} がタイムアウト期間(たとえば 1 分)以内にメッセージを受信しない場合、@value{tramp}
はリモートシェルプロンプトが見つからないというエラーメッセージで応答します。 リモートホストからのメッセージがある場合、@value{tramp}
はそれらをバッファに表示します。

リモートホストからの @samp{login failed} メッセージに対して、@value{tramp}
はログイン試行を中止(abort)し、ログイン手順を再度開始します。

@item
ログインの成功時、@value{tramp} がリモートホストからのシェルプロンプトを認識した場合、@value{tramp}
は、エコーをオフにし、シェルプロンプトを設定し、その他の雑事を行ってシェル環境を準備します。

@strong{注意} リモートシェルの場合、 @value{tramp} は @command{/bin/sh} を呼び出します。 リモートホストは
@samp{exec /bin/sh} を認識し、適切なシェルを実行する必要があります。 このシェルは、 Bourne
シェル構文をサポートする必要があります。

@item
@value{tramp} は @command{cd} と @command{ls} コマンドを実行して、
リモート・ホストに存在するファイルを見つけます。 @value{tramp} はしばしばグロブ(glob)するために @command{echo}
を使用します。 @value{tramp} は、 ファイルまたはディレクトリが @command{test}
コマンドで書き込み可能かどうかをチェックします。 各コマンド実行後、 @value{tramp}
は次の操作を完了させるためにリモート・ホストからの出力をパースします。

@item
リモート・ファイル名の補完後、 @value{tramp} はファイルの内容をリモート・ホストから転送します。

インライン転送(inline transfers)の場合、 @value{tramp} は @samp{mimencode -b
/path/to/remote/file} などのコマンドを送信し、 出力がバッファに蓄積されるまで待機してから、
その出力をデコードしてファイルの内容を生成します。

外部転送(external transfers)の場合、 @value{tramp} は以下のようにコマンドを送信します:
@example
$ rcp user@@host:/path/to/remote/file /tmp/tramp.4711
@end example
@value{tramp} は ローカルの一時ファイル(the local temporary file) @file{/tmp/tramp.4711}
をバッファに読み込み、 それから一時ファイル(the temporary file)を削除します。

@item
通常どおりバッファの内容を編集、変更、変更し、 @kbd{C-x C-s} でバッファを保存します。

@item
@value{tramp} は、 適切なインライン(inline)または外部(external)プログラムを使用して、
リモート・ホストからの読み込みとは逆のプロセスでバッファの内容をリモート・ホストに転送します。
@end itemize

これで、 @value{tramp} でファイルを開いたときに舞台裏で何が起こっているのか、 基本的な概要を理解していただけたかと思います。


@c For the end user.
@node @value{tramp} の取得
@chapter @value{tramp} の取得
@cindex obtaining @value{tramp}
@cindex GNU ELPA
@vindex tramp-version

@value{tramp} は (@w{Emacs 22.1} 以降) Emacs の一部として含まれています。

@value{tramp} は、 インターネット上の @uref{https://ftp.gnu.org/gnu/tramp/}
からダウンロードできるように自由にパッケージ化されています。 @value{tramp} のバージョン番号は、 変数
@code{tramp-version} で取得できます。 リリースされた @value{tramp} バージョンでは、 バージョン番号は
``2.4.5'' のような 3 つの数字の文字列です。

Emacs にパッケージ化された @value{tramp} リリースは、 対応するスタンドアローン・リリースとは若干異なる場合があります。 これは、
Emacs と @value{tramp} の間でリリース日を常に同期できるとは限らないためです。
そのようなバージョン番号には、``2.4.5.27.2'' のように Emacs のバージョン番号がサフィックスとして付きます。 これは、
@w{@value{tramp} 2.4.5} が @w{Emacs 27.2} に統合されたことを意味します。 Emacs にパッケージ化された
@value{tramp} バージョンの完全なリストは以下で得られます。

@vindex customize-package-emacs-version-alist
@lisp
(assoc 'Tramp customize-package-emacs-version-alist)
@end lisp

@value{tramp} は @uref{https://elpa.gnu.org, GNU ELPA} パッケージとしても利用できます。
スタンドアロン・リリースに加えて、 @value{tramp} の次のリリースが現れるまで、 @value{tramp}
のさらなるマイナー・バージョンが GNU ELPA に現れるでしょう。 これらのマイナー・バージョンには、 ``2.4.5.1'' のような 4
つの数字の文字列があります。

@value{tramp} 開発バージョンは Git サーバーで利用できます。 開発バージョンには、 新しい機能や不完全な機能が含まれています。
@value{tramp} の開発バージョンは、 常に次回のリリースのバージョン番号に、 ``2.4.4-pre'' のように接尾辞 ``-pre''
を加えたものです。

Git サーバーから @value{tramp} を取得する 1 つの方法は、 以下の URL の Savannah プロジェクト・ページにアクセスし、
上部のナビゲーション・バーにある Git リンクをクリックすることです。

@noindent
@uref{https://savannah.gnu.org/projects/tramp/}

@noindent
別の方法として、以下のようにターミナルに打ち込みます:

@example
@group
$ cd ~/emacs
$ git clone git://git.savannah.gnu.org/tramp.git
@end group
@end example

@noindent
プロキシ経由で取得する:

@example
@group
$ git config --global http.proxy http://user:pwd@@proxy.server.com:8080
$ git clone https://git.savannah.gnu.org/r/tramp.git
@end group
@end example

@noindent
@value{tramp} 開発者の場合:

@example
$ git clone login@@git.sv.gnu.org:/srv/git/tramp.git
@end example

@noindent
上記のいずれかの実行後、 @file{~/emacs/tramp} には @value{tramp} の最新バージョンが含まれています。

@noindent
リポジトリから更新を取得するには、 @code{git pull} を使用します。

@example
@group
$ cd ~/emacs/tramp
$ git pull
@end group
@end example

@noindent
以下のように @command{autoconf} を実行して、 最新の @file{configure} スクリプトを生成します:

@example
@group
$ cd ~/emacs/tramp
$ autoconf
@end group
@end example

@ifset installchapter
@c Installation chapter is necessary only in case of standalone
@c installation.
@include trampinst.texi
@end ifset
@ifclear installchapter
@value{tramp} のインストール方法の詳細については、 そのディレクトリにあるファイル @file{INSTALL} を参照してください。
@end ifclear


@node Quick Start Guide
@chapter Short introduction how to use @value{tramp}
@cindex quick start guide

@value{tramp} は、 リモート・コンポーネントを追加することにより、 Emacs ファイル名の構文を拡張します。 リモート・ファイル名は常に
@file{@trampfn{method,user@@host,/path/to/file}} のようになります。

リモートファイルは、通常のファイルとまったく同じように使用できます。つまり、 @kbd{C-x C-f
@trampfn{method,user@@host,/path/to/file} @key{RET}}
でファイルまたはディレクトリを開き、ファイルを編集して保存することができます。 @code{copy-file} や
@code{rename-file} のように、 2 つの引数を使用してファイル操作でローカル・ファイルとリモート・ファイルを混在させることもできます。
最後に、 プロセスを呼び出すバッファにリモートの @code{default-directory} がある場合、
リモート・ホストでプロセスを実行することもできます。


@anchor{Quick Start Guide File name syntax}
@section File name syntax
@cindex file name syntax

リモート・ファイル名には、 @code{method} 部分と @code{user} 部分と @code{host} 部分が先頭に追加されます。
それらのすべてとローカル・ファイル名の部分はオプションです。 欠落している部分がある場合は、 デフォルト値が想定されます。
空のローカル・ファイル名部分のデフォルト値は、 リモート・ユーザーのホーム・ディレクトリです。 したがって、 最短のリモート・ファイル名は
@file{@trampfn{-,,}} です。 デフォルトの方式の @samp{-} 記法は、 構文上の理由により @ref{Default
Method} として使用されます。

@code{method} 部分は、リモート・ホストに到達するために使用される接続方式(connection method)を記述します。 後述します。

@code{user} の部分は、 リモート・ホストにアクセスするためのユーザー名です。 @option{smb} 方式の場合、
ドメイン名も必要になることがあり、 その際は @code{user%domain} と記述されます。

@code{host} の部分は、 あなたのローカル・ホストで解決できるホスト名でなければなりません。 短いホスト名、 完全修飾ドメイン名、 IPv4
または IPv6 アドレス、 @ref{File name syntax} のいずれかです。 一部の接続方式(connection method)では、
使用するポートの表記もサポートされており、 その場合は @code{host#port} と記述されます。


@anchor{Quick Start Guide ssh and plink methods}
@section Using @option{ssh} and @option{plink}
@cindex method @option{ssh}
@cindex @option{ssh} method
@cindex method @option{plink}
@cindex @option{plink} method

あなたのローカル・ホストが SSH クライアントを実行し、 リモート・ホストが SSH サーバーを実行している場合、 最も単純なリモート・ファイル名は
@file{@trampfn{ssh,user@@host,/path/to/file}} です。 リモート・ファイル名
@file{@trampfn{ssh,,}} は、 ローカル・ホスト上の自分自身へのリモート接続を開き、 @value{tramp}
のテストによく使用されます。

MS Windows では、 PuTTY が SSH クライアントとしてよく使用されます。 その @command{plink} 方式を使用して、
@command{ssh} サーバーを実行しているリモート・ホストへの接続を開くことができます:
@file{@trampfn{plink,user@@host,/path/to/file}}


@anchor{Quick Start Guide su, sudo, doas and sg methods}
@section Using @option{su}, @option{sudo}, @option{doas} and @option{sg}
@cindex method @option{su}
@cindex @option{su} method
@cindex method @option{sudo}
@cindex @option{sudo} method
@cindex method @option{doas}
@cindex @option{doas} method
@cindex method @option{sg}
@cindex @option{sg} method

しばしば異なる権限(different permissions)であなたのローカル・ホストを操作する必要があります。 これには、 @option{su}
または @option{sudo} 接続方式(connection method)を使用できます。 OpenBSD システムでは、
@option{doas} 接続方式が同じ機能を提供します。 これらの方式(method)は、 @samp{root}
をデフォルトのユーザー名として使用し、 @code{(system-name)} の戻り値をデフォルトのホスト名として使用します。 したがって、
@file{@trampfn{sudo,,/path/to/file}} としてファイルを開くと便利です。

@option{sg} 方式は ``switch group'' を意味します。 ここでは、 ユーザー名が変更先のグループとして使用されます。
デフォルトのホスト名は同一です。


@anchor{Quick Start Guide Combining ssh, plink, su, sudo and doas methods}
@section @option{ssh} または @option{plink} を、 @option{su} または @option{sudo} または @option{doas} と組み合わせる
@cindex method @option{ssh}
@cindex @option{ssh} method
@cindex method @option{plink}
@cindex @option{plink} method
@cindex method @option{su}
@cindex @option{su} method
@cindex method @option{sudo}
@cindex @option{sudo} method
@cindex method @option{doas}
@cindex @option{doas} method

@option{su} オプションまたは @option{sudo} オプションまたは @option{doas}
オプションを別のホストで実行する必要がある場合は、 先行する @option{ssh} オプションまたは @option{plink}
オプションと組み合わせることができます。 つまり、 @value{tramp}
は最初に管理者以外の資格情報(credentials)を使用して他のホストに接続し、 その後、そのホストの管理者資格情報に変更します。
単純なケースでは、 構文は
@file{@trampfn{ssh@value{postfixhop}user@@host|sudo,,/path/to/file}}
のようになります。 @xref{Ad-hoc multi-hops}


@anchor{Quick Start Guide sudoedit method}
@section Using @command{sudoedit}
@cindex method @option{sudoedit}
@cindex @option{sudoedit} method

@option{sudoedit} 方式は @option{sudo} 方式に似ています。 ただし、 実装が異なります。
バックグラウンドで開いているセッションを実行し続けるわけではありません。 これはセキュリティ上の理由によるもので、 裏側では、 この方式は
@option{sudo} 方式よりもパフォーマンスが悪く、@samp{localhost} のみに制限されており、
外部プロセスをサポートしていません。


@anchor{Quick Start Guide smb method}
@section Using @command{smbclient}
@cindex method @option{smb}
@cindex @option{smb} method
@cindex ms windows (with @option{smb} method)
@cindex @command{smbclient}

リモートの MS Windows ホストまたは Samba サーバーにアクセスするには、 @command{smbclient}
クライアントが使用されます。 リモート・ファイル名の構文は
@file{@trampfn{smb,user%domain@@host,/path/to/file}} です。 ローカル・ファイル名の最初の部分は、
リモート・ホストによってエクスポートされた共有 (この例では @samp{path}) です。


@anchor{Quick Start Guide GVFS-based methods}
@section Using @acronym{GVFS}-based methods
@cindex methods, gvfs
@cindex gvfs-based methods
@cindex method @option{sftp}
@cindex @option{sftp} method
@cindex method @option{afp}
@cindex @option{afp} method
@cindex method @option{dav}
@cindex method @option{davs}
@cindex @option{dav} method
@cindex @option{davs} method
@cindex method @option{mtp}
@cindex @option{mtp} method

@acronym{GVFS, the GNOME Virtual File System} がインストールされているシステムでは、
GVFSで提供されている方式を @value{tramp} で使用できます。 例えば、
@file{@trampfn{sftp,user@@host,/path/to/file}} や、
@file{@trampfn{afp,user@@host,/path/to/file}} (Apple の AFP ファイルシステムにアクセス)や、
@file{@trampfn{dav,user@@host,/path/to/file}} や、
@file{@trampfn{davs,user@@host,/path/to/file}} (WebDAV 共有用) や、
@file{@trampfn{mtp,device,/path/to/file}} (メディアデバイス用) です。


@anchor{Quick Start Guide GNOME Online Accounts based methods}
@section Using @acronym{GNOME} Online Accounts based methods
@cindex @acronym{GNOME} Online Accounts
@cindex method @option{gdrive}
@cindex @option{gdrive} method
@cindex google drive
@cindex method @option{nextcloud}
@cindex @option{nextcloud} method
@cindex nextcloud

@acronym{GVFS}ベースの方式には、 @option{Files} サービスをサポートする @acronym{GNOME}
オンライン・アカウントも含まれます。 これらは、 Google ドライブ・ファイル・システムと、OwnCloud/NextCloud ファイル
システムです。 ここでのファイル名の構文は、 OwnCloud/NextCloud ファイルの場合は常に
@file{@trampfn{gdrive,john.doe@@gmail.com,/path/to/file}}
(@samp{john.doe@@gmail.com} は Google ドライブ・アカウントを表します) または
@file{@trampfn{nextcloud,user@@host#8081,/path/to/file}} (@samp{8081}
はポート番号を表します) です。


@anchor{Quick Start Guide FUSE-based methods}
@section Using @acronym{FUSE}-based methods
@cindex methods, fuse
@cindex fuse-based methods
@cindex method @option{rclone}
@cindex @option{rclone} method
@cindex method @option{sshfs}
@cindex @option{sshfs} method

@acronym{FUSE, Filesystem in Userspace} は、 ユーザーが仮想ファイル・システムをマウントできるようにします。
@acronym{GVFS} によって内部的にも使用されますが、 ここでは @acronym{GVFS} API
を使用しない方式(method)について説明します。

システム・ストレージにアクセスする便利な方法は @command{rclone} プログラムです。 @command{rclone} で
@samp{storage} という名前でストレージを構成した場合、 (たとえば、) リモート・ファイル名の構文
@file{@trampfn{rclone,storage,/path/to/file}} を介してアクセスできます。 ユーザー名は必要ありません。

@command{sftp} に基づいてファイル・システムをマウントするための @command{sshfs}
クライアントをインストールしたローカル・ホストでは、 この方式(method)を使用できます。 すべてのリモート・ファイルは、
ローカル・マウント・ポイント経由で利用できます。 @value{tramp} は、 ファイル・システムがまだマウントされていない場合にマウントを支援し、
通常のファイル名構文 @file{@trampfn{sshfs,user@@host,/path/to/file}} によるアクセスをサポートします。


@anchor{Quick Start Guide Android}
@section Using Android
@cindex method @option{adb}
@cindex @option{adb} method
@cindex android

USB 経由でローカル ホストに接続されている Android デバイスには、 @command{adb} コマンド経由でアクセスできます。
ユーザー名またはホスト名は必要ありません。 ファイル名の構文は @file{@trampfn{adb,,/path/to/file}} です。


@node Configuration
@chapter Configuring @value{tramp}
@cindex configuration
@cindex default configuration

@value{tramp} は、 最初は @command{scp} プログラムを使用してリモート・ホストに接続するように設定されています。
@kbd{C-x C-f} と入力してから、 ファイル名 @file{@trampfn{scp,user@@host,/path/to/file}}
を入力します。 詳細については、 @xref{Default Method}, @xref{Default User}, @xref{Default
Host} を参照してください。

リモート・シェルの動作に関する問題については @xref{Remote shell setup} を参照してください。

接続タイプとファイル・アクセス方式(method)をデフォルトから他のいくつかのオプションのいずれかに変更する場合 @xref{Connection
types} を参照してください。

@strong{注意} これらの例で説明されている一部のユーザー・オプションは、 Emacs によって自動ロードされません。 すべての例は
@value{tramp} をインストールしてロードする必要があります:

@lisp
(customize-set-variable 'tramp-verbose 6 "Enable remote command traces")
@end lisp

@value{tramp} の設定に使用される関数については、 以下の句をあなたの init ファイルで使用できます:

@lisp
(with-eval-after-load 'tramp (tramp-change-syntax 'simplified))
@end lisp

@vindex enable-remote-dir-locals
@code{enable-remote-dir-locals} を non-@code{nil}に設定して、
リモート・ディレクトリのディレクトリ・ローカル変数を介して他の変数を変更できるようにする必要があります。 @xref{Directory
Variables, , , emacs} 参照。


@menu
* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       @acronym{GVFS}-based external methods.
* FUSE-based methods::       @acronym{FUSE}-based external methods.
* Default Method::           デフォルトの手段(method)を選択します。 
                               ここでは、 
                               どの手段が自分に適しているかあまり理解できていない人を支援しようとしています。
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple 
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name 
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related 
                                         information.
* Remote programs::          How @value{tramp} finds and uses programs on 
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               @acronym{FUSE} setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.
@end menu


@node Connection types
@section Types of connections to remote hosts
@cindex connection types, overview

インライン方式(@dfn{Inline method}) と 外部方式(@dfn{external method}) はアクセス方式(method)の
2 つの基本的なタイプです。 どちらも @command{rsh} または @command{ssh} または @command{telnet}
などの同じリモート・シェル・アクセス・プログラムを使用しますが、 ファイル・アクセス方法が異なります。
ファイルの編集または、大きなファイルの転送または、多数のファイルの操作、 では、 適切な方法を選択することが重要になります。

一般に、 外部方式(the external methods)のパフォーマンスは、 少なくとも大きなファイルの場合、 インライン方式(the
inline methods)のパフォーマンスよりも優れています。 これは、
インライン転送時にはデータをエンコードおよびデコードする必要があるためです。

この規則の唯一の例外は、 @option{scp} ベースのアクセス方式(method)です。 これらの方式では、
実際にファイルを転送するときのパフォーマンスは向上しますが、起動時の暗号化ネゴシエーションのオーバーヘッドにより、ファイル転送時間の改善がかき消される可能性があります。

外部方式(external methods)は、 (@command{ssh-agent}
など、)パスワードを必要としない方法で構成する必要があります。 最新の @command{scp} 実装では、 既存の @command{ssh}
接続を再利用するオプションを提供します。 これは、 利用可能であれば @value{tramp} がデフォルトで有効にします。 それが不可能な場合は、
@ref{Password handling} を考慮する必要があり、 考慮しないと、
コピー操作ごとにパスワードの入力を求めるプロンプトが表示されます。


@node Inline methods
@section Inline methods
@cindex inline methods
@cindex methods, inline

インライン方式(inline methods)は、 同じログイン接続を使用してファイル・コンテンツを転送します。 インライン方式は、
小さなファイルに対してすばやく簡単に使用できます。
これらは、リモート・ホストで適切なエンコード・プログラムとデコード・プログラムが利用できるかどうかに依存します。 ローカルの送信元と送信先の場合、
@value{tramp} は、 そのようなプログラムと同等の Emacs の組み込みのプログラムを使用できます。

インライン方式(inline method)は、 外部転送プログラムが利用できない状況で機能します。 インライン方式は、 同じホスト上の異なる
@emph{ユーザーID} 間でファイルを転送する場合にも機能します。

@cindex base-64 encoding
@cindex base-64 encoding
@cindex uu encoding
@vindex tramp-remote-coding-commands
@value{tramp} は、 @code{tramp-remote-coding-commands} で定義されたコマンドの 1
つが使用可能であるか、 リモート・ホストをチェックします。 @value{tramp} は、
最初に見つけた信頼できる(reliable)コマンドを使用します。 @value{tramp} の検索パスはカスタマイズできます。
@ref{Remote programs} を参照してください。

どのコマンドも使用できない場合、 @value{tramp} は最初に小さな Perl プログラムをリモート ホストに転送し、
次にそのプログラムをエンコードとデコードに使用しようとします。

@vindex tramp-inline-compress-start-size
@vindex tramp-inline-compress-commands
大きなテキスト・ファイルの転送速度を上げるために、 @value{tramp} はエンコードの前に圧縮を使用できます。  ユーザー・オプション
@code{tramp-inline-compress-start-size} は、この最適化を使用するファイル・サイズを指定します。 この機能は、
@code{tramp-inline-compress-commands} で定義されたコマンドの 1 つの可用性と使いやすさに依存します。

@table @asis
@item @option{rsh}
@cindex method @option{rsh}
@cindex @option{rsh} method

@command{rsh} は他の方式ほど安全ではないため、 ローカル・ネットワーク内のホストに接続するためのオプションです。
@command{ssh} が完全な代替品であり、至るところで使えるので、 @command{rsh} を使用する理由はありません。

@item @option{ssh}
@cindex method @option{ssh}
@cindex @option{ssh} method

@command{ssh} は、リモート・ホストに接続するための他のオプションよりも安全なオプションです。

@command{ssh} は、 追加のパラメーターをポート番号として受け取ることもできます。 たとえば、 ポート番号 42 のホストは
@file{host#42} (実際のホスト名、ハッシュ記号、ポート番号) として指定されます。 これは @samp{-p 42} を
@command{ssh} コマンドに渡すのと同一です。

@item @option{telnet}
@cindex method @option{telnet}
@cindex @option{telnet} method

@command{telnet} によるリモート・ホストへの接続は、@option{rsh} 方式と同じくらい危なっかしい(insecure)です。

@item @option{su}
@cindex method @option{su}
@cindex @option{su} method

リモート・ホストに接続する代わりに、 @command{su} プログラムを使用すると、 別のユーザーとして編集できます。 ホストは、
@samp{localhost} または関数 @command{(system-name)} によって返されるホストのいずれかです。
この動作の例外については @ref{Multi-hops} を参照してください。

@item @option{sudo}
@cindex method @option{sudo}
@cindex @option{sudo} method

@option{su} 方式と同様に、 @option{sudo} は @command{sudo} を使用します。 @command{sudo}
には、シェルを開始するための十分な権限が必要です。

セキュリティ上の理由から、 @option{sudo} 接続は、 定義済みのタイムアウト (デフォルトでは 5 分) が経過すると無効になります。
これは変更できます。 @ref{Predefined connection information} を参照してください。

@item @option{doas}
@cindex method @option{doas}
@cindex @option{doas} method

この方式は、 @command{sudo} コマンドのように OpenBSD で使用されます。 @option{sudo}
方式と同様に、@option{doas} 接続は事前定義されたタイムアウト後に無効になります。

@item @option{sg}
@cindex method @option{sg}
@cindex @option{sg} method

@command{sg} プログラムは、 別のグループとして編集できます。 ホストは、@samp{localhost} または関数
@command{(system-name)} によって返されるホストのいずれかです。 ユーザー名を指定する必要がありますが、
これはグループ名を示しています。 この動作の例外については、 @ref{Multi-hops} を参照してください。

@item @option{sshx}
@cindex method @option{sshx}
@cindex @option{sshx} method

@option{ssh} のように動作しますが、 追加の認証プロンプトはありません。 @option{sshx} は @samp{ssh -t -t
-l @var{user} -o RemoteCommand='/bin/sh -i' @var{host}}
を使用して「標準のログイン・シェル」(``standard'' login shell)との接続を開きます。 リモート・ログイン・シェル
@command{/bin/sh} の変更をサポートしています。

@strong{注意} @option{sshx} は認証の質問をバイパスしないことに注意してください。
たとえば、リモート・ホストのホスト・キーが不明な場合でも、 @option{sshx} は引き続き ``Are you sure you want to
continue connecting?''(接続を続行しますか?)と尋ねます。 @value{tramp} はそのような質問を処理できません。
そのような質問なしでログインを続行できる接続をセットアップする必要があります。

@option{sshx} は、@command{ssh} が疑似 tty の割り当てに関するエラーを引き起こす場合に、 MS Windows
ユーザーにとって役立ちます。 これはシェル・プロンプトを見つけられないために @value{tramp} が混乱することで発生します。

@option{sshx} は @samp{-p} 引数をサポートします。

@item @option{krlogin}
@cindex method @option{krlogin}
@cindex @option{krlogin} method
@cindex kerberos (with @option{krlogin} method)

この方式は @option{ssh} にも似ています。 @command{krlogin -x} コマンドは、
リモート・ホスト・ログインにのみ使用されます。

@item @option{ksu}
@cindex method @option{ksu}
@cindex @option{ksu} method
@cindex kerberos (with @option{ksu} method)

これは、 Kerberos スイート用の別の方式です。 @option{su} のように振る舞います。

@item @option{plink}
@cindex method @option{plink}
@cindex @option{plink} method

@option{plink} 方式は、 SSH@ の PuTTY 実装を使用する MS Windows ユーザー向けです。 @samp{plink
-ssh} を使用してリモート・ホストにログインします。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

@option{plink} 方式は @samp{-P} 引数をサポートします。

@item @option{plinkx}
@cindex method @option{plinkx}
@cindex @option{plinkx} method

ホスト名の代わりにセッション名を使用して、 MS Windows で PuTTY を使用する別の方式。 @option{plinkx} は
@samp{plink -load @var{session} -t} を呼び出します。 ユーザー名とポート番号は、
セッションで定義する必要があります。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

@end table


@node External methods
@section External methods
@cindex methods, external
@cindex external methods

外部方式(external
methods)は、ファイル転送を外部転送プログラムに委譲しながら、一部のアクションにリモート・シェル接続を使用して、複数チャネルで動作します。

外部方式(external methods)は、 インライン方式(inline methods)でのエンコードとデコードのオーバーヘッドを節約します。

外部方式(external methods)には新しいチャンネルを開くオーバーヘッドがあるため、
@code{tramp-copy-size-limit} より小さいファイルは引き続きインライン方式(inline methods)を使用します。

@table @asis
@item @option{rcp}
@cindex method @option{rcp}
@cindex @option{rcp} method
@cindex @command{rsh} (with @option{rcp} method)

この方式は、 @command{rsh} および @command{rcp} コマンドを使用してリモート・ホストに接続し、 ファイルを転送します。
これは利用可能な最速のアクセス方法です。

代替方式の @option{remcp} は @command{remsh} と @command{rcp} コマンドを使用します。

@item @option{scp}
@cindex method @option{scp}
@cindex @option{scp} method
@cindex @command{ssh} (with @option{scp} method)

接続に @command{ssh} 、 転送に @command{scp} を組み合わせて使用するのが最も安全です。 パフォーマンスは良好ですが、
小さいファイルでのインライン方式よりも遅くなります。 インライン方式でのエンコードとデコードのオーバーヘッドはありませんが、 @command{scp}
の暗号化ハンドシェイクはこれらの速度向上を打ち消します。

@option{ssh} ベースの方式は、 ポート番号を指定するための @samp{-p} 機能をサポートしています。 たとえば、
@file{host#42} は、 引数 @samp{-p 42} を @command{ssh} に渡し、 かつ、 引数 @samp{-P 42} を
@command{scp} に渡します。

@item @option{rsync}
@cindex method @option{rsync}
@cindex @option{rsync} method
@cindex @command{ssh} (with @option{rsync} method)

接続のための @command{ssh} コマンドと、 転送のための @command{rsync} コマンドの組み合わせは、 @option{scp}
方式と似ています。

両方のホストに存在するファイル達を転送する場合、 @command{rsync} は @command{scp}
よりもはるかに優れたパフォーマンスを発揮します。 ただし、 ファイルが接続の片側にのみ存在する場合、 この利点は失われます。

この方式は @samp{-p} 引数をサポートしています。

@item @option{scpx}
@cindex method @option{scpx}
@cindex @option{scpx} method
@cindex @command{ssh} (with @option{scpx} method)

@option{scpx} は、 ログイン・シェルの質問を避けるのに役立ちます。 パフォーマンスは @option{scp} に似ています。
@option{scpx} は @samp{ssh -t -t -l @var{user} -o RemoteCommand='/bin/sh -i'
@var{host}} を使用して接続を開きます。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

@option{scpx} は、 @command{ssh} が疑似 tty の割り当てに関するエラーを引き起こす場合に、 MS Windows
ユーザーにとって役立ちます。 これはシェル・プロンプトを見つけられないために @value{tramp} が混乱することで発生します。

この方式は @samp{-p} 引数をサポートしています。

@item @option{pscp}
@item @option{psftp}
@cindex method @option{pscp}
@cindex @option{pscp} method
@cindex @command{plink} (with @option{pscp} method)
@cindex @command{putty} (with @option{pscp} method)
@cindex method @option{psftp}
@cindex @option{psftp} method
@cindex @command{plink} (with @option{psftp} method)
@cindex @command{putty} (with @option{psftp} method)

これらの方式は @option{scp} または @option{sftp} に似ていますが、 @command{plink}
コマンドを使用してリモート・ホストに接続し、 @command{pscp} または @command{psftp} を使用してファイル転送します。
これらのプログラムは、 MS Windows の SSH 実装である PuTTY の一部です。

リモート・グイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

これらの方式は @samp{-P} 引数をサポートしています。

@item @option{fcp}
@cindex method @option{fcp}
@cindex @option{fcp} method
@cindex @command{fsh} (with @option{fcp} method)

この方式は @option{scp} に似ていますが、 @command{fsh} を使用して接続し、 @command{fcp}
を使用してファイルを転送します。 @command{ssh} のフロントエンドである @command{fsh/fcp} は、
いくつかのコマンドを送信して @command{ssh} セッションを再利用します。 これにより、@command{scp}
の安全な接続による起動時のオーバーヘッドが回避されます。 インライン方式(inline methods)でも同様の利点があります。

この接続に使用されるコマンドは  @samp{fsh @var{host} -l @var{user} /bin/sh -i} です。

@cindex method @option{fsh}
@cindex @option{fsh} method

@option{fsh} が提供する多重化(multiplexing)は @value{tramp} では役に立たないため、 @option{fsh}
にはインライン方式(inline method)はありません。 @command{fsh} はリモート・ホストに接続し、 @value{tramp}
はその 1 つの接続を開いたままにします。

@item @option{nc}
@cindex method @option{nc}
@cindex @option{nc} method
@cindex @command{telnet} (with @option{nc} method)

@command{telnet} を使用して接続し、 @command{nc} を使用してファイルを転送することは、 ルーターまたは NAS
ホストへのアクセスに適した唯一の組み合わせである場合があります。 @command{busybox} や、 @command{telnet}
以外のエンコード・プログラムやデコード・プログラムをホストしていないなど、これらのダム(dumb)・デバイスではローカル・シェルが厳しく制限されています。

@item @option{sudoedit}
@cindex method @option{sudoedit}
@cindex @option{sudoedit} method

@option{sudoedit} 方式を使用すると、 ローカル・ホストで別のユーザーとしてファイルを編集できます。 これは @value{tramp}
による @command{sudoedit} の実装と見なすことができます。  @option{sudo} 方式とは対照的に、
すべてのマジック・ファイル名関数(all magic file name functions)は、単一の @command{sudo @dots{}}
コマンドによって実装されます。 その目的は、 そのようなファイルの編集を可能な限り安全にすることです。 Emacs
のバックグラウンドで実行されているセッションが Emacs の内部から攻撃される可能性があってはなりません。

ゆえに、 外部プロセス(external processes)は実装されません。

このようなリモート・ファイル名のホスト名は、 ローカル・ホストを表す必要があります。 デフォルト値がすでに適切なので、
@file{@trampfn{sudoedit,,/path/to/file}} や
@file{@trampfn{sudoedit,user@@,/path/to/file}} のように、
リモート・ファイル名にホスト名を使用しないことをお勧めします。

@option{sudo} 方式と同様に、 @option{sudoedit} パスワードは事前定義されたタイムアウト後に期限切れになります。

@item @option{ftp}
@cindex method @option{ftp}
@cindex @option{ftp} method

@value{tramp} が @option{ftp} を使用すると、 リクエストは Ange FTP@ で指定された任意の ftp
プログラムに転送されます。 この外部プログラムは、@value{tramp} からのリクエストを処理できる必要があります。

@item @option{smb}
@cindex method @option{smb}
@cindex @option{smb} method
@cindex ms windows (with @option{smb} method)
@cindex @command{smbclient}

この非ネイティブの @value{tramp} 方式は、 Server Message Block (SMB) ネットワーク・プロトコルを介して、
通常は @uref{https://www.samba.org/,,Samba} または MS Windows に基づく、
ファイル・サーバーを実行しているホストに接続します。

@command{smbclient} を使用するには、@value{tramp} を操作するときにいくつか調整(tweaks)が必要です:

ローカルネーム(localname) の最初のディレクトリ(first directory)は、 リモート・ホスト上の共有名である必要があります。

一部の SMB 共有名は @code{$} 文字で終わるため、 環境変数の置換を避けるために、 これらの共有を指定する際に @value{tramp}
は @code{$$} を使用する必要があります。

@value{tramp} が共有名を指定していないか、 または一般的なリモート・ディレクトリ @file{/} を使用している場合、
@command{smbclient} は利用可能なすべての共有を返します。

SMB 認証は 各 SMB 共有に基づいているため、 同じ SMB ホスト上の別の共有にアクセスする場合でも、 @value{tramp}
はパスワードの入力を求めます。 このプロンプトは、 @ref{Password handling} によって抑制できます。

MS Windows 認証で必要な ユーザー名/ドメイン名 構文に対応するために、 @value{tramp} は @code{user%domain}
形式の拡張構文を提供します (@code{user} はユーザー名、@code{%} はパーセント記号、@code{domain} は MS
Windows ドメイン名です)。 例:

@example
@trampfn{smb,daniel%BIZARRE@@melancholia,/daniel$$/.emacs}
@end example

ここで、 ユーザー @code{daniel} はドメイン・ユーザーとして MS Windows ドメイン @code{BIZARRE} の SMB
ホスト @code{melancholia} に接続し、 ホーム・ディレクトリ(共有 @code{daniel$})にある @file{.emacs}
を編集します。

または、(ドメイン・ユーザーではなく) ローカル WINS ユーザーの場合は、 逝かに示すように、
ドメイン名を大文字のローカル・ホストの名前に置き換えます:

@example
@trampfn{smb,daniel%MELANCHOLIA@@melancholia,/daniel$$/.emacs}
@end example

ここで、 ユーザー @code{daniel} はローカル・ユーザーとしてローカル・ドメイン @code{MELANCHOLIA} の SMB ホスト
@code{melancholia} に接続し、 ホーム・ディレクトリ(共有 @code{daniel$})にある @file{.emacs}
を編集します。

@command{smbclient} 認証では、 ドメイン名とユーザー名はオプションです。
ユーザー名が指定されていない場合、@command{smbclient}
は匿名(anonymous)ユーザーを使用します(パスワードのプロンプトは表示されません)。 この動作は、 ローカル・ユーザー名で代用される他の
@value{tramp} 方式とは異なります。

Emacs が MS Windows のローカル・ユーザー認証コンテキストで実行されている場合、 @option{smb} 方式は使用できません。
ただし、 そのようなユーザーは、 @value{tramp} の代わりに UNC ファイル名を使用してリモート・ファイルにアクセスできます。

@example
//melancholia/daniel$$/.emacs
@end example

UNC ファイル名の指定では、 @command{smbclient} のように認証用に別のユーザー名を指定することはできません。

@item @option{adb}
@cindex method @option{adb}
@cindex @option{adb} method
@cindex android (with @option{adb} method)

@vindex tramp-adb-program
@vindex PATH@r{, environment variable}
この方式では、 Android Debug Bridge プログラムを使用して Android デバイスにアクセスします。  @value{tramp}
を機能させるには、 Android Debug Bridge をローカルにインストールする必要があります。 一部の GNU/Linux
ディストリビューションでは、 インストール・パッケージとして Android Debug Bridge が提供されています。 または、プログラムは
Android SDK@ の一部としてインストールされます。 @value{tramp} は、 @env{PATH} 環境変数、またはユーザーオプション
@code{tramp-adb-program} で設定された絶対パスを介して、 @command{adb} プログラムを探します。

@vindex tramp-adb-connect-if-not-connected
@value{tramp} は、 ユーザー・オプション @code{tramp-adb-connect-if-not-connected} が
@code{nil} でない場合にのみ、@option{adb} を使用して Android デバイスに接続します。 それ以外の場合、 接続は
Emacs の外部で確立する必要があります。

@value{tramp} は、 単一の Android デバイスが @command{adb} に接続されている場合、
リモート・ファイル名のホスト名部分を必要としません。 @value{tramp} は、 代わりに @file{@trampfn{adb,,}}
をデフォルト名として使用します。 @command{adb devices} を Emacs 外のシェルで実行すると、
利用可能なホスト名が表示されます。

@option{adb} 方式は、 @command{adbd} プロセスで実行されるため、 通常、 Android
デバイスでの認証にユーザー名は必要ありません。 ただし、 ユーザー名が指定されている場合、 @value{tramp} は構文で
@command{su} を適用します。 特に root 化されていない Android デバイス(un-rooted Android
devices)で認証が成功しない場合、 @value{tramp} はログイン・エラーを表示します。

TCP/IP 経由で接続された Android デバイスの場合、 @file{device#42} ホスト名構文を使用してポート番号を指定するか、
@value{tramp} で @command{adb} コマンドで宣言されているデフォルト値を使用できます。 ポート番号は USB@
経由で接続された Android デバイスには適用されません。

@end table


@node GVFS-based methods
@section @acronym{GVFS}-based external methods
@cindex methods, gvfs
@cindex gvfs-based methods
@cindex dbus

@acronym{GVFS} は @acronym{GNOME}
デスクトップの仮想ファイル・システムです(@uref{https://en.wikipedia.org/wiki/GVFS})。
@acronym{GVFS} 上のリモート・ファイルは @acronym{FUSE} を介してローカルにマウントされ、 @value{tramp}
はこのローカルにマウントされたディレクトリを内部的に使用します。

Emacs は D-Bus メカニズムを使用して @acronym{GVFS}@ と通信します。 Emacs では、 メッセージ・バス・システム、
D-Bus 統合がアクティブになっている必要があります。 @pxref{Top, , D-Bus, dbus}

@table @asis
@item @option{afp}
@cindex method @option{afp}
@cindex @option{afp} method

この方式は、 Apple Filing Protocol を使用してリモート・ホストに接続し、 macOS
ボリューム上のファイルにアクセスするためのものです。 @value{tramp} アクセス構文では、 先頭のボリューム(共有)名が必要です。 例:
@file{@trampfn{afp,user@@host,/volume}}

@item @option{dav}
@item @option{davs}
@cindex method @option{dav}
@cindex method @option{davs}
@cindex @option{dav} method
@cindex @option{davs} method

@option{dav} 方式は、 HTTP@ などの標準プロトコルに基づいて、 WebDAV ファイルおよびディレクトリへのアクセスを提供します。
@option{davs} も同じことを行いますが、 SSL 暗号化を使用します。 どちらの方式もポート番号指定をサポートしています。

@acronym{GVFS} によってマウントされる WebDAV ボリュームの一部であるパスは、 OwnCloud や NextCloud
ファイル名の方が一般的であるため、 これらの方式ではサポートされていません。 それらの処理については @option{nextcloud}
方式を参照してください。

@item @option{gdrive}
@cindex @acronym{GNOME} Online Accounts
@cindex method @option{gdrive}
@cindex @option{gdrive} method
@cindex google drive

@option{gdrive} メソッドを介して、 Google ドライブのオンライン・ストレージにアクセスできます。
リモート・ファイル名のユーザー名とホスト名は、 @file{@trampfn{gdrive,john.doe@@gmail.com,/}} のような
Google ドライブ資格情報のメール・アドレスです。 これらの資格情報は、 Emacs 外の @command{Online Accounts}
アプリケーションで入力する必要があります。

Google ドライブは暗号化されたブロブ・ファイル名を内部的に使用するため、 @value{tramp} はファイルの
@code{display-name} で機能します。 これは、同じディレクトリ内の 2 つのファイルが同じ @code{display-name}
を持つ場合に予期しない動作を引き起こす可能性があり、 そのような状況は回避しなければなりません。

@item @option{mtp}
@cindex method @option{mtp}
@cindex @option{mtp} method
@cindex media

携帯電話、タブレット、カメラなどのメディア・バイスには、 @option{mtp} 方式を介してアクセスできます。 ファイル名でホストを指定するには、
デバイス名だけが必要です。 ただし、 アクセスする前に、 デバイスが USB 経由で接続されている必要があります。 可能なデバイス名は、
ホスト名補完によって表示されます。 @ref{File name completion}

デバイスの種類によっては、 アクセスが読み取り専用になる場合があります。 一部のデバイスは、 異なる名前で並行してアクセスでき、
ファイル・システムの異なる部分を提供します。

@value{tramp} は、単一のメディア・デバイスが接続されている場合、 リモート・ファイル名の一部としてホスト名を必要としません。
@value{tramp} は、 代わりに @file{@trampfn{mtp,,}} をデフォルト名として使用します。

@item @option{nextcloud}
@cindex method @option{nextcloud}
@cindex @option{nextcloud} method
@cindex nextcloud

名前が示すように、 @option{nextcloud} 方式を使用すると、 OwnCloud や NextCloud
がホストするファイルとディレクトリにアクセスできます。  @option{gdrive} 方式と同様に、 資格情報は Emacs 外の
@command{Online Accounts} アプリケーションで入力する必要があります。  この方式はポート番号指定をサポートしています。

@item @option{sftp}
@cindex method @option{sftp}
@cindex @option{sftp} method

この方式は、 リモート・ホストに安全にアクセスするために @command{sftp} を使用します。 @command{sftp} は、
セキュリティ上の理由で @command{ssh} 接続を拒否するホストに接続するためのより安全なオプションです。

あなたの @command{ssh} 設定にそれぞれのエントリがある場合は、 @option{RemoteCommand}
オプションを「設定してないで」ください。

@end table

@defopt tramp-gvfs-methods
このユーザー・オプションは、@acronym{GVFS}@ の外部方式(external methods)のリストです。 デフォルトでは、
このリストには @option{afp} と @option{dav} と @option{davs} と @option{gdrive} と
@option{mtp} と @option{nextcloud} と @option{sftp} が含まれます。 含める事ができる他の方式は、
@option{ftp} と @option{http} と @option{https} と @option{smb} で、 これらの方式は、
@acronym{GVFS} ベースのメソッドとして直接使用するためのものではなく、 代わりに、 @ref{Archive file names}
のためにここに追加されています。

あなたが @acronym{GVFS} ベースの @option{ftp} または @option{smb} 方式を使用する場合は、 あなたはそれらを
@code{tramp-gvfs-methods} に追加する必要があり、そして、 あなたはそれぞれ @code{tramp-ftp-method}
または @code{tramp-smb-method} を @code{nil} に設定して、 対応する @value{tramp}
パッケージを無効にする必要があります。

@lisp
@group
(add-to-list 'tramp-gvfs-methods "ftp")
(customize-set-variable 'tramp-ftp-method nil)
@end group
@end lisp
@end defopt


@node FUSE-based methods
@section @acronym{FUSE}-based external methods
@cindex methods, fuse
@cindex fuse-based methods

@acronym{GVFS} 以外にも、 @acronym{FUSE} インターフェイスを使用する仮想ファイル・システムがあります。
リモート・ファイルは @acronym{FUSE} によってローカルにマウントされ、 @value{tramp}
はこのローカルにマウントされたディレクトリを内部的に使用します。 可能な場合、@value{tramp}
はリモート・ファイル名をそれぞれのローカル・ファイル名にマップし、 それらにファイル名操作を適用します。 一部のファイル名操作ではこれが不可能であり、
@value{tramp} はそれらの操作を別の方法でエミュレートします。

@table @asis
@item @option{rclone}
@cindex method @option{rclone}
@cindex @option{rclone} method

@vindex tramp-rclone-program
プログラム @command{rclone} を使用すると、クラウド内のさまざまなシステム・ストレージにアクセスできます。
サポートされているシステムのリストについては、 @uref{https://rclone.org/} を参照してください。
@command{rclone} プログラムが @env{PATH} 環境変数で見つからない場合、 ユーザーオプション
@code{tramp-rclone-program} を介して @value{tramp} にその絶対パスを伝えることができます。

システム・ストレージは、 Emacs の外部で @command{rclone config} コマンドを介して設定する必要があります。
@command{rclone} で たとえば、 @samp{storage} という名前でストレージを構成した場合、
以下のようにリモート・ファイル名を介してアクセスできます

@example
@trampfn{rclone,storage,/path/to/file}
@end example

ユーザー名は @command{rclone} 設定の一部であり、 リモート・ファイル名には必要ありません。
リモート・ファイル名にユーザー名が含まれている場合、無視されます。

内部的には、 @value{tramp} はリモート・システム・ストレージを @file{/tmp/tramp.rclone.storage}
にマウントします。 @file{storage} は構成されたシステム・ストレージの名前です。

さまざまな @option{rclone} 操作に対するマウント・ポイントとオプションのフラグは、 接続プロパティ(connection
properties)として渡すことができます。 @xref{Setup of rclone method}

@option{rclone} 経由のアクセスは遅いです。 システム・ストレージにアクセスする別の方法がある場合は、 それを使用するべきです。
それは例えば @ref{GVFS-based methods} の @option{gdrive} 方式や @option{nextcloud}
方式です。

@item @option{sshfs}
@cindex method @option{sshfs}
@cindex @option{sshfs} method

@vindex tramp-sshfs-program
@command{sftp} に基づいてファイル・システムをマウントするための @command{sshfs}
クライアントをインストールしたローカル・ホストでは、 この方式を使用できます。
@uref{https://github.com/libfuse/sshfs/blob/master/README.rst/} 参照。
@command{sshfs} プログラムが @env{PATH} 環境変数で見つからない場合、 ユーザー・オプション
@code{tramp-sshfs-program} を介して @value{tramp} にその絶対パスを伝えることができます。

すべてのリモート・ファイルがローカル・マウント・ポイント経由で利用できます。 @value{tramp} は、
ファイル・システムがまだマウントされていない場合にマウントするのを手助けします。 リモート・ファイル名の構文は以下のとおりです

@example
@trampfn{sshfs,user@@host#port,/path/to/file}
@end example

ユーザー名とポート番号はオプションです。 この方式はパスワード処理をサポートしていません。 ファイル・システムがすでにマウントされているか、 ssh
キーを介してパスワードなしで接続を確立する必要があります。

マウント・ポイントとマウント引数は、 接続プロパティ(connection properties)として渡すことができます。 @xref{Setup
of sshfs method}

@end table


@node Default Method
@section Selecting a default method
@cindex default method

リモート・ファイル名では、 デフォルト方式(default method)の使用は疑似方式(pseudo method) @option{-}
によって示されます。 @ref{File name syntax}

@defopt tramp-default-method
デフォルトの方式は、 ファイルを転送するためのものです。 ユーザー・オプション @code{tramp-default-method} で設定します。
@value{tramp} は、このユーザー ・オプションを使用して、 指定されていないリモート・ファイル名のデフォルトの方式を決定します。

@lisp
(customize-set-variable 'tramp-default-method "ssh")
@end lisp
@end defopt

@defopt tramp-default-method-alist
ファイル転送のデフォルトの方式は、 ユーザー・オプション @code{tramp-default-method-alist} を使用して、
特定のユーザーとホストの組み合わせに対してカスタマイズできます。

たとえば、 以下の 2 行では、 @samp{john} に一致するすべてのユーザー名に対して @option{ssh} メソッドを使用し、
@samp{lily} に一致するすべてのホスト名に対して @option{rsync} メソッドを使用するように指定しています。 3 行目は、ホスト
@samp{localhost} 上のユーザー @samp{root} に対して @option{su} メソッドを使用することを指定します。

@lisp
@group
(add-to-list 'tramp-default-method-alist '("" "john" "ssh"))
(add-to-list 'tramp-default-method-alist '("lily" "" "rsync"))
(add-to-list 'tramp-default-method-alist
             '("\\`localhost\\'" "\\`root\\'" "su"))
@end group
@end lisp
@end defopt

@noindent
大きなファイルの場合、 外部方式(external methods)のパフォーマンスが向上します。 @pxref{Inline methods}
@pxref{External methods}

アクセス方式の選択は、 セキュリティ環境にも依存します。 たとえば、 クリア・テキストのパスワード転送を使用する @option{rsh} および
@option{telnet} 方式は、 インターネット接続では不適切です。 安全なリモート接続には、 暗号化を提供する @option{ssh}
を使用する必要があります。


@subsection Which method to use?
@cindex choosing the right method

@value{tramp} は、 最大の柔軟性のために最大数の選択肢を提供します。
どの方式を選択するかは、ホストやクライアントやネットワーク速度やセキュリティ・コンテキストによって異なります。

インライン方式(inline method)を使用して開始します。

大きなファイルには外部方式(external methods)の方が効率的かもしれませんが、 ほとんどの @value{tramp}
ユーザーは大きなファイルよりも小さなファイルを頻繁に編集します。

インライン方式(inline methods)での大きなファイルのパフォーマンスを向上させるために、
@code{tramp-inline-compress-start-size} で圧縮を有効にします。

@command{ssh} はリモート・ホスト・アクセスの最も一般的な方法になり、 最も合理的なセキュリティ・プロトコルを備えているため、
@option{ssh} 方式を使用します。 他のホストで @file{/etc/motd} ファイルを編集するための一般的な @option{ssh}
の使用法は:

@example
@kbd{C-x C-f @trampfn{ssh,root@@otherhost,/etc/motd} @key{RET}}
@end example

何らかの理由で @option{ssh} が利用できない場合は、 他の明白な選択肢を探してください。 MS Windows では、
@option{plink} メソッドを試してください。 Kerberos の場合は、 @option{krlogin} を試してください。

@option{su} または @option{sudo} 方式としてローカル・ファイルを編集するには、 以下の @samp{root}
の短縮構文を試してください:

@example
@kbd{C-x C-f @trampfn{su,,/etc/motd} @key{RET}}
@end example

大きなファイルを編集する場合、 @option{scp} は @option{ssh} より高速です。 @option{pscp} は
@option{plink} より高速です。 しかし、この速度向上は常に真とは限りません。

@option{scp} を介して 2 つの異なるリモート・ホスト間で大きなファイルをコピーする場合、
@code{tramp-use-scp-direct-remote-copying} を 非 @code{nil} に設定します。


@node Default User
@section Selecting a default user
@cindex default user

@defopt tramp-default-user
@value{tramp} ファイル名は、 現在ログインしているユーザー名を @value{tramp} で置き換えるため、
ユーザー名の部分を省略できます。 ただし、 この置換は @code{tramp-default-user} でオーバーライドできます。 例えば:

@lisp
(customize-set-variable 'tramp-default-user "root")
@end lisp
@end defopt

@defopt tramp-default-user-alist
@code{tramp-default-user-alist} は、 単一のデフォルト・ユーザーの代わりに、
アクセス方式やホスト名の組み合わせに基づいて、 複数のデフォルト・ユーザー値を許可します。 連想リストは複数の値を保持できます。
たとえば、@samp{john} をドメイン @samp{somewhere.else}
のみのデフォルト・ユーザーとして使用するには、以下のようにします:

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '("ssh" ".*\\.somewhere\\.else\\'" "john"))
@end group
@end lisp

警告: @value{tramp} は、 @file{~/.ssh/config} などの Emacs
外部の構成ファイルで指定されたデフォルトのユーザーを上書きします。 @value{tramp} がデフォルト値を適用するのを止めるには、
対応する連想リストのエントリを @code{nil} に設定します:

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '("ssh" "\\`here\\.somewhere\\.else\\'" nil))
@end group
@end lisp

@code{tramp-default-user-alist} の最後のエントリは、
キャッチ・オールまたは最も頻繁に使用されるログイン用に予約する必要があります。

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '(nil nil "jonas") t)
@end group
@end lisp
@end defopt


@node Default Host
@section Selecting a default host
@cindex default host

@defopt tramp-default-host
ホスト名が省略されている場合、 @value{tramp} は @code{tramp-default-host}
ユーザー・オプションの値に置き換えられます。 最初は、 Emacs が実行されているローカル・ホスト名が入力されています。
デフォルトの方式とデフォルトのユーザーとデフォルトのホストは、 以下のようにオーバーライドできます:

@lisp
@group
(custom-set-variables
 '(tramp-default-method "ssh")
 '(tramp-default-user "john")
 '(tramp-default-host "target"))
@end group
@end lisp

すべてのデフォルトを設定すると、 @samp{@trampfn{-,,}} は @value{tramp} を @code{target} 上の
John のホーム・ディレクトリに @code{ssh} 経由で接続します。
@end defopt

@defopt tramp-default-host-alist
@code{tramp-default-host-alist} は、 単一のデフォルト・ホストの代わりに、
アクセス方式やユーザー名の組み合わせに基づいて複数のデフォルト・ホスト値を許可します。  連想リストは複数の値を保持できます。 ほとんどの場合、
@code{tramp-default-host} で十分ですが、 @option{adb} などの一部のメソッドでは、
デフォルトを上書きする必要があります。
@end defopt


@node Multi-hops
@section Connecting to a remote host using multiple hops
@cindex multi-hop
@cindex proxy hosts

マルチ・ホップ(multi-hops)は、 ファイア・ウォールの背後にあるホストに到達する方式、
または要塞(bastion)ホスト内から外部の世界に到達する方式です。 マルチ・ホップを使用すると、 @value{tramp} は、
各ホップ(hop)で適切な ユーザー認証/ホスト認証 を使用してこれらのホップをネゴシエートできます。 これまでのすべての方式は、
接続の始点と終点の間にチェック・ポイント達がなかったシングル・ホップな種類(single hop kind)でした。

@defopt tramp-default-proxies-alist
@code{tramp-default-proxies-alist} は、 通過(パススルー;pass
through)するプロキシ・ホストを指定します。 このユーザー・オプションは、 @code{(@var{host} @var{user}
@var{proxy})} で構成される三つ組(triple)のリストです。

最初にマッチするのは、 ファイル名を渡すプロキシ・ホストと、 @var{user}@@@var{host} にマッチするターゲット・ホストです。
@var{host} と @var{user} は正規表現または @code{nil} で、 @code{nil}
の場合は常に一致する正規表現として解釈されます。

@var{proxy} は、 ローカル名の部分が無視されるリテラルの @value{tramp} ファイル名であり、
方式(method)とユーザー名の部分はオプションです。

方式(method)はインライン方式(inline method)(@pxref{Inline methods})である必要があります。
@var{proxy} が @code{nil} の場合、 @var{user}@@@var{host} に到達する追加のホップは必要ありません。

たとえば、 ホスト @samp{bastion.your.domain} をユーザー @samp{bird} として通過(pass
through)して、 ローカル・ドメイン外のリモート・ホストに到達するには:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\." nil "@trampfn{ssh,bird@@bastion.your.domain,}"))
(add-to-list 'tramp-default-proxies-alist
             '("\\.your\\.domain\\'" nil nil))
@end group
@end lisp

@strong{注意}: @code{add-to-list} はリストの先頭に要素を追加します。 したがって、 @code{add-to-list}
を使う場合、最も関連性の高いルールはソースリストの最後に来る必要があります。

プロキシ・ホストは、 alist でカスケードできます。 @samp{bastion.your.domain}
への接続を許可されている唯一のホストである @samp{jump.your.domain} という別のホストがある場合:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\`bastion\\.your\\.domain\\'"
               "\\`bird\\'"
               "@trampfn{ssh,jump.your.domain,}"))
@end group
@end lisp

@var{proxy} は、 @var{host} または @var{user} に対してそれぞれパターン @code{%h} または
@code{%u} を取ることができます。 ポートまたはドメインがホップ・ファイル名の一部である場合はこれらのパターンの展開は行われません。

ドメイン @samp{your.domain} のリモート・ホストで @samp{root} としてログインするが、 非ローカル・アクセスでは
@samp{root} としてログインを無効にするには、 以下の alist エントリを使用します:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\.your\\.domain\\'" "\\`root\\'" "@trampfn{ssh,%h,}"))
@end group
@end lisp

@file{@trampfn{sudo,randomhost.your.domain,}} を開くと、 まずあなたのアカウント名で @code{ssh}
経由で @samp{randomhost.your.domain} に接続し、 それから、 そのホスト上で @code{sudo -u root}
を実行します。

上記の例の @option{sudo} 方式(method)は、 ローカル・ホストではなく、 到達後にホストに適用される事が鍵です。 したがって、
@value{tramp} は、 そのようなホップでのホスト名がその前のホップでのホスト名と一致することを確認します。

@var{host} と @var{user} と @var{proxy} も Lisp 式にすることができます。
これらの式は評価(eval)されたら文字列または @code{nil} を返さなければなりません。

(先程の例を)一般化するには: ローカル・ホストを除くすべてのホストに対して、 まず @command{ssh} 経由で接続し、 それから
@command{sudo -u root} を適用します:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '(nil "\\`root\\'" "@trampfn{ssh,%h,}"))
(add-to-list 'tramp-default-proxies-alist
             `(,(regexp-quote (system-name)) nil nil))
@end group
@end lisp
@end defopt

ホップ達を通過するには、 @command{bash} などの制限されたシェルを処理する必要があります。 制限されたシェルを @value{tramp}
に認識させると、 制限されたシェルはプロキシのみで使用されます。

@defopt tramp-restricted-shell-hosts-alist
@command{bash} などの制限付きシェルを実行しているホストの正規表現の連想リスト(alist)。 @value{tramp}
はそれらをプロキシとしてのみ使用します。

上記の要塞(bastion)ホストで制限付きシェルを実行するように指定するには、 以下のようにします:

@lisp
@group
(add-to-list 'tramp-restricted-shell-hosts-alist
             "\\`bastion\\.your\\.domain\\'")
@end group
@end lisp
@end defopt


@node Firewalls
@section Passing firewalls
@cindex http tunnel
@cindex proxy hosts, http tunnel

しばしばリモート・ホストに直接到達できないことがあります。
ファイアウォールが邪魔をしている可能性があり、プロキシ・サーバーを介して通過する可能性があります。

OpenSSH と PuTTY の両方で、 @command{CONNECT} コマンド(RFC 2616, 2817 仕様に準拠)を介して HTTP
トンネルを使用して、 このようなプロキシ設定をサポートします。 HTTP 1.1 以降のプロトコルを使用するプロキシ・サーバーは、
このコマンドをサポートします。


@subsection Tunneling with ssh

@vindex ProxyCommand@r{, ssh option}
@command{ssh} では、 @file{~/.ssh/config} で @option{ProxyCommand} エントリを使用できます:

@example
@group
Host host.other.domain
     ProxyCommand nc -X connect -x proxy.your.domain:3128 %h %p
@end group
@end example

@code{nc} は、 HTTP トンネルを確立する BSD の netcat プログラムです。
このような機能を備えた他のプログラムも同様に使用できます。

この例では、 @file{@trampfn{ssh,host.your.domain,}} を開くと、 ポート 3128 で HTTP
プロキシ・サーバー @samp{proxy.your.domain} が渡されます。


@subsection Tunneling with PuTTY

PuTTY では外部プログラムを必要とせず、 HTTP トンネルのサポートは組み込みです。 PuTTY 構成プログラムで、
@samp{host.your.domain} のセッションを作成します。 @option{Connection/Data} エントリで、
@option{HTTP} オプションを選択し、 @samp{proxy.your.domain} を @option{Proxy hostname}
として追加し、 3128 を @option{Port} として追加します。

@file{@trampfn{plinkx,host.your.domain,}} を開くと、 ポート 3128 で HTTP プロキシ・サーバー
@samp{proxy.your.domain} が渡されます。


@node Customizing Methods
@section Using Non-Standard Methods
@cindex customizing methods
@cindex using non-standard methods
@cindex create your own methods

@vindex tramp-methods
@code{tramp-methods} 変数には現在、 定義済み方式(method)の完全なリストがあります。 このリストのどの部分も、
より適切な設定で変更できます。 @kbd{C-h v trapp-methods @key{RET}} でアクセスできる、その変数の Lisp
ドキュメント (Lisp documentation)を参照してください。

ELPA アーカイブには、 そのような拡張機能の例がいくつかあります。 以下をご覧下さい。 これらは Emacs
のパッケージ・マネージャーでインストールできます

@table @samp
@c @item anything-tramp
@c @item counsel-tramp
@c @item helm-tramp
@c Contact Masashí Míyaura <masasam@users.noreply.github.com>

@c @item ibuffer-tramp.el
@c Contact Svend Sorensen <svend@@ciffer.net>

@item docker-tramp
@cindex method @option{docker}
@cindex @option{docker} method
Docker コンテナーとの統合。 コンテナーは、
@file{@trampfn{docker,user@@container,/path/to/file}} を介してアクセスされます。
ここで、@samp{user} は使用する (オプションの) ユーザーであり、 @samp{container} はコンテナーの ID または名前です。

@item kubernetes-tramp
@cindex method @option{kubectl}
@cindex @option{kubectl} method
Kubernetes クラスターにデプロイされた Docker コンテナーの統合。 @samp{docker-tramp} から派生しています。
コンテナーは @file{@trampfn{kubectl,user@@container,/path/to/file}} 経由でアクセスされます。
@samp{user} と @samp{container} は @samp{docker-tramp} と同じ意味です。

@item lxc-tramp
@cindex method @option{lxc}
@cindex @option{lxc} method
LXC コンテナーの統合。 コンテナーは @file{@trampfn{lxc,container,/path/to/file}}
経由でアクセスされます。 @samp{container} は @samp{docker-tramp} と同じ意味です。 @samp{user}
の指定は無視されます。

@item lxd-tramp
@cindex method @option{lxd}
@cindex @option{lxd} method
LXD コンテナーの統合。 コンテナーは @file{@trampfn{lxd,user@@container,/path/to/file}}
経由でアクセスされます。 @samp{user} と @samp{container} は @samp{docker-tramp} と同じ意味です。

@item magit-tramp
@cindex method @option{git}
@cindex @option{git} method
@code{magit} を使用して Git リポジトリをブラウズします。 バージョン管理されたファイルは、
@file{@trampfn{git,rev@@root-dir,/path/to/file}} 経由でアクセスされます。 @samp{rev} は
Git リビジョン、 @samp{root-dir} は @code{magit-tramp-hosts-alist}
で指定されたルート・ディレクトリの仮想ホスト名です。

@item tramp-hdfs
@cindex method @option{hdfs}
@cindex @option{hdfs} method
hadoop/hdfs ファイル・システムへのアクセス。 ファイルは
@file{@trampfn{hdfs,user@@node,/path/to/file}} 経由でアクセスされます。 ここで、 @samp{user}
は使用したいユーザーで、 @samp{node} は Hadoop サーバーの名前です。

@item tramp-nspawn
@cindex method @option{nspawn}
@cindex @option{nspawn} method
systemd-nspawn によって提供される環境へのアクセス。
@file{@trampfn{nspawn,user@@container,/path/to/file}} を介してファイルにアクセスします。 ここで、
@samp{user} は使用する (オプションの) ユーザーであり、 @samp{container} は接続先のコンテナーです。
systemd-nspawn とそのコンテナー・ユーティリティを実行するには、 多くの場合スーパー・ユーザー・アクセスが必要です。
マルチホップ・ファイル名と @option{doas} または @option{sudo} を使用して権限を上げてください。

@item vagrant-tramp
@cindex method @option{vagrant}
@cindex @option{vagrant} method
vagrant ボックスにアクセスするための便利な方式(method)。
@file{@trampfn{vagrant@value{postfixhop}box|sudo,box,/path/to/file}}
のようなマルチ・ホップ・ファイル名でよく使用されます。 ここで、 @samp{box} は vagrant ボックスの名前です。

@end table


@node Customizing Completion
@section Selecting config files for user/host name completion
@cindex customizing completion
@cindex selecting config files

@vindex tramp-completion-function-alist
@code{tramp-completion-function-alist} は、
ユーザー名とホスト名の補完に定義済みファイルを使用します(@pxref{File name completion})。 方式(method)ごとに、
一連の構成ファイルとそのファイルをパースできる関数を保持します。 @code{tramp-completion-function-alist}
の各エントリは、(@var{method} @var{pair1} @var{pair2} @dots{}) の形式です。

各 @var{pair} は (@var{function} @var{file}) で構成されます。 @var{function} は、補完のために
@var{file} からユーザー名とホスト名を抽出する役割を果たします。 この変数にアクセスする関数は 2 つあります:

@defun tramp-get-completion-function method
この関数は、 @var{method} 引数を取り、 @var{method} の補完関数のリストを返します。

例:
@example
@group
(tramp-get-completion-function "rsh")

     @result{} ((tramp-parse-rhosts "/etc/hosts.equiv")
         (tramp-parse-rhosts "~/.rhosts"))
@end group
@end example
@end defun

@defun tramp-set-completion-function method function-list
この関数は、 引数 @var{method} と @var{function-list} を取り、 @var{function-list} を
@var{method} の補完関数のリストとして設定します。

例:
@example
@group
(tramp-set-completion-function "ssh"
 '((tramp-parse-sconfig "/etc/ssh_config")
   (tramp-parse-sconfig "~/.ssh/config")))

     @result{} ((tramp-parse-sconfig "/etc/ssh_config")
         (tramp-parse-sconfig "~/.ssh/config"))
@end group
@end example
@end defun

構成ファイルをパースする以下の定義済み関数達があります:

@ftable @asis
@item @code{tramp-parse-rhosts}

この関数は、 構文的に @file{~/.rhosts} と同等のファイルをパースします。 指定されている場合、 ホスト名とユーザー名の両方を返します。

@item @code{tramp-parse-shosts}

この関数は、 構文的に @file{~/.ssh/known_hosts} と同等のファイルをパースします。
このようなファイルにはユーザー名が指定されていないため、 ホスト名のみを返すことができます。

@item @code{tramp-parse-sconfig}

この関数は、 @file{~/.ssh/config} スタイル・ファイルの @option{Host}
エントリで定義されたホスト・ニックネームを返します。

@item @code{tramp-parse-shostkeys}

ディレクトリ @file{/etc/ssh2/hostkeys/*} と @file{~/ssh2/hostkeys/*} の SSH2 パース。
ホストは、 ファイル名 @file{hostkey_@var{portnumber}_@var{host-name}.pub} でコーディングされます。
ユーザー名は常に @code{nil} です。

@item @code{tramp-parse-sknownhosts}

@file{/etc/ssh2/knownhosts/*} や @file{~/ssh2/knownhosts/*} などの別の SSH2
スタイルのディレクトリのパース。 この場合、 ホスト名はファイル名 @file{@var{host-name}.@var{algorithm}.pub}
でコーディングされます。 ユーザー名は常に @code{nil} です。

@item @code{tramp-parse-hosts}

ホスト名専用の @file{/etc/hosts} 関数。

@item @code{tramp-parse-passwd}

ユーザー名の @file{/etc/passwd} をパースする関数。

@item @code{tramp-parse-etc-group}

グループ名の @file{/etc/group} をパースする関数。

@item @code{tramp-parse-netrc}

@file{~/.netrc} や @file{~/.authinfo} スタイルのファイルをパースする関数。

@end ftable

カスタム・データを含むカスタム・ファイルをカスタム構造に保持するには、 カスタム関数を提供する必要があります。 カスタム関数は、
以下の規則を満たす必要があります:

@defun my-tramp-parse file
引数 @var{file} は、 ホスト上のファイルまたは @code{nil} でなければなりません。 この関数は、(@var{user}
@var{host}) のリストを返す必要があります。 これは、 ユーザー名とホスト名の補完の候補となります。

例:
@example
@group
(my-tramp-parse "~/.my-tramp-hosts")

     @result{} ((nil "toto") ("daniel" "melancholia"))
@end group
@end example
@end defun


@node Password handling
@section Reusing passwords for several connections
@cindex passwords

パスワード入力の繰り返しを回避するには、 @option{ssh} のような方式の @command{ssh-agent} や、
@option{plink} のような方式の @command{pageant} などのネイティブ・キャッシュ・メカニズムを検討してください。

@value{tramp} は、 ネイティブな解決方法で必要を満たせない場合に代替手段を提供します。


@anchor{Using an authentication file}
@subsection Using an authentication file

@vindex auth-sources
パッケージ @file{auth-source.el} は、 もともと No Gnus 用に開発されたもので、
さまざまなソースからパスワードを読み取ります(@xref{Help for users, , auth-source, auth})。
デフォルトの認証ファイルは @file{~/.authinfo.gpg} ですが、 これはユーザー・オプション @code{auth-sources}
で変更できます。

@noindent
認証ファイルの典型的なエントリ:

@example
machine melancholia port scp login daniel password geheim
@end example

port は任意の @value{tramp} 方式(method)(@pxref{Inline methods}, @pxref{External
methods})を取ることができます。 port の値を省略すると、 すべての @value{tramp} 方式(methods)に一致します。
@value{tramp} ファイル名構文で使用されるドメインとポートを machine と login 項目に追加する必要があります:

@example
machine melancholia#4711 port davs login daniel%BIZARRE password geheim
@end example

方式 @option{doas} と @option{sudo} と @option{sudoedit} では、
接続を要求しているユーザーのパスワードが必要であり、 ターゲット・ユーザーのパスワードは必要ありません。 これらの接続がローカル・ホストで発生する場合、
ローカル・ユーザーとローカル・ホストのエントリが使用されます。

@example
machine @var{HOST} port sudo login @var{USER} password secret
@end example

@var{USER} と @var{HOST} は、 @code{(user-login-name)} と @code{(system-name)}
によって返される文字列です。 これらの方法のいずれかがマルチ・ホップ
(@pxref{Multi-hops})経由で接続されている場合、その前のホップの資格情報が使用されます。

@vindex auth-source-save-behavior
適切なエントリが存在しない場合、 パスワードは対話的に読み取られます。 ログイン(パスワードの検証)に成功した後、 Emacs は、 これをサポートする
@code{auth-source} バックエンドでさらに使用するために、 対応するエントリを保存することを提案します。 これは、 ユーザー・オプション
@code{auth-source-save-behavior} を @code{nil} に設定することで変更できます。

@vindex auth-source-debug
デバッグ・メッセージを出すためには @code{auth-source-debug} を @code{t} に設定します。

@vindex ange-ftp-netrc-filename
@strong{注意} @file{auth-source.el} は @option{ftp} 接続には使用されません。 これは、
@value{tramp} が作業を Ange FTP@ に渡すためです。 たとえば、 @file{~/.authinfo.gpg}
認証ファイルを使用する場合は、 @code{ange-ftp-netrc-filename} をカスタマイズする必要があります。

@lisp
(customize-set-variable 'ange-ftp-netrc-filename "~/.authinfo.gpg")
@end lisp

@value{tramp} パスワードに認証ファイルを使用したくない場合は、 接続ローカル変数(connection-local
variables)を使用してください
@ifinfo
(@pxref{Connection Variables, , , emacs})
@end ifinfo
以下のようにします:

@lisp
@group
(connection-local-set-profile-variables
 'remote-without-auth-sources '((auth-sources . nil)))
@end group

@group
(connection-local-set-profiles
 '(:application tramp) 'remote-without-auth-sources)
@end group
@end lisp


@anchor{Caching passwords}
@subsection Caching passwords

@value{tramp} は、 入力されたパスワードをキャッシュし、 アクセス方式(method)に関係なく、
同じユーザーまたはホスト名に対して必要なときに再利用できます。

@vindex password-cache-expiry
@code{password-cache-expiry} は、 パスワードが記憶される期間(秒単位)を設定します。
パスワードは永久に保存されることはなく、 現在の Emacs セッションの存続期間を超えて延長されることもありません。 有効期限を無効にするには
@code{password-cache-expiry} を @code{nil} に設定します。

@vindex password-cache
パスワードのキャッシュを無効にするには @code{password-cache} を @code{nil} に設定します。


@node Connection caching
@section Reusing connection related information
@cindex caching

@vindex tramp-persistency-file-name
初期接続時間を短縮するために、 @value{tramp} は以前の接続プロパティ(connection properties)をユーザー・オプション
@code{tramp-persistency-file-name} で指定されたファイルに保存します。

@code{tramp-persistency-file-name} のデフォルトのファイル名は @file{~/.emacs.d/tramp} です。

@value{tramp} は、 Emacs の起動時にこのファイルを読み取り、 Emacs の終了時に書き込みます。 @value{tramp}
のこのファイルを削除すると、 次の Emacs 起動時に新しいファイルを再作成します。

接続の永続的な保存を無効にするには @code{tramp-persistency-file-name} を @code{nil} に設定します。

@value{tramp} が (コマンド @command{uname -sr} を介して)
リモート・ホストでオペレーティング・システムのバージョンの変更を検出すると、 そのホストのすべての接続関連情報をフラッシュし、
新しいエントリを作成します。


@node Predefined connection information
@section Setting own connection related information

より正確なカスタマイズのために、 @code{tramp-methods} で指定されたパラメーターを手動で上書きできます。

@vindex tramp-connection-properties
@code{tramp-connection-properties} を設定して、@code{tramp-methods} を手動で上書きします。
このリストのプロパティは、@code{(@var{regexp} @var{property} @var{value})} の形式になっています。
@var{regexp} は、リモート・ファイル名とマッチします。 @code{nil} を使用するとすべてにマッチさせます。
@var{property} はプロパティの名前で、 @var{value} はプロパティの値です。

@var{property} は、@code{tramp-methods} に含まれる方式(method)固有のパラメーターです。
@code{tramp-methods} のパラメーター key は、 シンボル名 @code{tramp-<foo>} です。
そのプロパティを上書きするには、 @var{property} に文字列 @t{"<foo>"} を使用します。 たとえば、
以下はリモート・シェルを変更します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@randomhost.your.domain,}")
                   "remote-shell" "/bin/ksh"))
@end group

@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@randomhost.your.domain,}")
                   "remote-shell-login" '("-")))
@end group
@end lisp

@code{tramp-methods} のパラメータ @code{tramp-remote-shell} と
@code{tramp-remote-shell-login} に、 リモート・ホスト用の新しい値を追加しました。

@var{property} は、 @code{tramp-persistency-file-name}
内で見つけられる任意のプロパティにすることもできます。


@subsection Relevant connection properties to override

すべての接続プロパティを変更する必要があるわけではありません。 最も関連性の高いプロパティを以下に示します:

@itemize
@item @t{"login-program"}

プロパティ @t{"login-program"} は、 リモート・ホストへの接続に使用されるプログラムを格納します。 場合によっては、
プログラムがホスト上で別の名前になっている場合や、 別のパスにある場合があります。 この場合、 接続方式(connection
method)ごとに特別なデフォルト値を上書きできます。 @file{tramp-sh.el} のすべての接続方式(connection
methods)で使用されます。

@item @t{"login-args"}

@t{"login-args"} は、 @t{"login-program"} に渡す引数リストのリストを指定します。 これらのリストを構築する方法は
@code{tramp-methods} の docstring を読んで確認してください。

@item @t{"remote-shell"}

このプロパティは、 リモート・ホストに適用するリモート・シェルを @value{tramp} に指示します。 @file{tramp-sh.el}
のすべての接続方式で使用されます。 デフォルト値は @t{"/bin/sh"} です。

@item @t{"remote-shell-login"}

@t{"remote-shell"} と組み合わせて使用するプロパティ。 これは、 どのシェル引数(shell
argument)がログイン・シェルをトリガーするかを指定します。 デフォルト値は @t{"-l"} ですが、 @command{ksh}
などの一部のシェルは @t{"-"} を好みます。

@item @t{"session-timeout"}

すべての @file{tramp-sh.el} ベースの方式(methods)は、 プロパティ @t{"session-timeout"}
を受け入れます。 これは、セキュリティ上の理由で接続が無効になってから再確立する必要があるまでの時間(秒単位)です。 @code{nil} 値は、
この機能を無効にします。 定義済みの値を使用する @option{sudo} 方式と @option{doas} 方式を除いて、
ほとんどの方式はこのプロパティを設定しません(not set)。

@item @t{"~"}@*
@t{"~user"}

これは、 リモート・ホストのホーム・ディレクトリです。 この接続プロパティを設定すると、 @option{adb} や @option{rclone}
や @option{sshfs} など、 リモートのホーム・ディレクトリを @t{"~"}, @t{"~user"}
などから展開できない方式(method)の場合に特に役立ちます。 例として @ref{Home directories} を参照してください。

@item @t{"tmpdir"}

リモート・ホスト上の一時(temporary)ディレクトリ。 指定されていない場合、 デフォルト値は @option{adb} 方式の場合は
@t{"/data/local/tmp"} で、 @option{smb} 方式の場合は @t{"/C$/Temp"} で、 それ以外は
@t{"/tmp"} です。

@item @t{"direct-async-process"}

このプロパティが @code{nil} 以外の場合、 二者択一として、 @code{make-process} と
@code{start-file-process} のうち、 よりパフォーマンスの高い方の実装が適用されます。 接続方式(method)も、
@code{tramp-methods} の @code{tramp-direct-async} パラメータを @code{nil}
以外でマークする必要があります。 制約の議論については、 @ref{Improving performance of asynchronous
remote processes} を参照してください。

@item @t{"posix"}

@option{smb} 方式を使用した接続は、 リモート・ホストが posix コマンドをサポートしているかどうかを確認します。 リモート・ホストが
Samba を実行している場合、 この機能を確認(confirm)します。 ただし、一部の非常に古い Samba バージョンでは、
実装にエラーがあります。 これらのホストの posix コマンドを抑制するには、 プロパティ @t{"posix"} を @code{nil}
に設定する必要があります。

このプロパティのデフォルト値は @code{t} (@code{tramp-methods} では指定されていません) です。
リモート・ホストがネイティブの MS Windows を実行している場合、 このプロパティは効果がありません。

@item @t{"mount-point"}

@acronym{FUSE} ベースのファイル・システムがマウントされているディレクトリ・ファイル名。 このプロパティのデフォルト値は
@t{"/tmp/tramp.method.user@@host#port"} です (@code{tramp-methods}
では指定されていません)。

@item @t{"mount-args"}@*
@t{"copyto-args"}@* @t{"moveto-args"}@* @t{"about-args"}

これらのプロパティは、 さまざまな @option{rclone} 操作に対するオプションのフラグを保持します。 値を変更したい場合は、
@code{tramp-methods} のデフォルト値を参照してください。
@end itemize


@node Remote programs
@section How @value{tramp} finds and uses programs on the remote host

@value{tramp} は、リモート・ホスト上のいくつかのコマンドへのアクセスと実行権限を要求します: @command{ls} と
@command{test} と @command{find} と @command{cat} です。

他にも  @ref{Inline methods} と @ref{External methods} の接続に必要なプログラムがあります。

リモート・ファイル・アクセスのパフォーマンスと精度を改善するために、 @value{tramp} は @command{perl} (または
@command{perl5}) と @command{grep} を、使用可能な場合、使用します。

@defopt tramp-remote-path
@code{tramp-remote-path} は、 @value{tramp} が @ref{Remote programs}
を検索できるリモート・ディレクトリ・パスを指定します。

@vindex tramp-default-remote-path
@value{tramp} は、@file{/bin} や @file{/usr/bin} などの標準的なデフォルトを使用しますが、
これはほとんどのホストにとって適切です。 ホストとパスの違いに対応するには、 たとえば、 Debian GNU/Linux の
@file{/bin:/usr/bin} または Solaris の
@file{/usr/xpg4/bin:/usr/ccs/bin:/usr/bin:/opt/developerstudio12.6/bin} では、
@value{tramp} はリモート・ホストで @command{getconf PATH} でクエリを実行し、 シンボル
@code{tramp-default-remote-path} を更新します。

ホストがセキュリティ上の理由でパスの場所を曖昧にしている場合は、 以下に示すように、 接続時に @value{tramp} を使用するために、
そのようなパスをローカルの @file{.emacs} に手動で追加します。

@lisp
(add-to-list 'tramp-remote-path "/usr/local/perl/bin")
@end lisp

@vindex tramp-own-remote-path
リモート・パスを見つけるもう 1 つの方法は、 リモート・ホストによってリモート・ユーザーに割り当てられたパスを使用することです。
@value{tramp} は通常、 ログイン後にこのリモート・パスを保持しません。 ただし、 @code{tramp-own-remote-path}
はパス値を保持し、 @code{tramp-remote-path} を更新するために使用できます。

@lisp
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
@end lisp

@strong{注意} これは、 リモートの @command{/bin/sh} シェルがログイン引数 @samp{-l}
をサポートしている場合にのみ機能することに注意してください。
@end defopt

@ifinfo
@code{tramp-remote-path} は、 接続ローカル変数(connection-local
variables)を介してホストごとに設定することもできます。 @xref{Connection Variables, , , emacs}
@end ifinfo
@ifnotinfo
@code{tramp-remote-path} は、 接続ローカル変数(connection-local
variables)を介してホストごとに設定することもできます。
@end ifnotinfo
あなたは以下のようにあなた独自の検索ディレクトリを定義できます:

@lisp
@group
(connection-local-set-profile-variables 'remote-path-with-bin
   '((tramp-remote-path . ("~/bin" tramp-default-remote-path))))
@end group

@group
(connection-local-set-profile-variables 'remote-path-with-apply-pub-bin
   '((tramp-remote-path . ("/appli/pub/bin" tramp-default-remote-path))))
@end group

@group
(connection-local-set-profiles
   '(:application tramp :machine "randomhost") 'remote-path-with-bin)
@end group

@group
(connection-local-set-profiles
   '(:application tramp :user "anotheruser" :machine "anotherhost")
     'remote-path-with-apply-pub-bin)
@end group
@end lisp

リモート検索パスが変更された場合、 ローカルの @value{tramp} キャッシュを再計算する必要があります。 @value{tramp}
に再計算を強制するには、 @kbd{M-x Tramp-cleanup-this-connection @key{RET}} とするか、
何処かにつなげ直します。 (@pxref{Cleanup remote connections}) 


@node Remote shell setup
@section Remote shell setup hints


@subsection Changing the default remote or local shell
@cindex zsh setup

デフォルトでは、 @value{tramp} はコマンド @command{/bin/sh} を使用して、 リモート・ホストでシェルを起動します。
これは、 接続プロパティ @t{"remote-shell"} を設定することで変更できます。 @ref{Predefined connection
information} を参照してください。 たとえば、 リモート・ホストで @command{/usr/bin/zsh}
を使用したい場合は以下のようにします

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{sshx,user@@host,}")
                   "remote-shell" "/usr/bin/zsh"))
@end group
@end lisp

これは、 @option{sshx} や @option{plink} などの、
リモート・ログイン・シェルをオーバーライドできる接続方式でのみ機能します。 これをサポートする接続方式については、 @ref{Inline
methods} と @ref{External methods} を参照してください。

@vindex tramp-sh-extra-args
このアプローチには、 @code{tramp-sh-extra-args} の設定が適用されるという利点もあります。 @command{zsh} では、
zle オプションの設定によるシェル・プロンプトのトラブルが回避されます。 @command{bash} の場合、 @file{~/.editrc}
または @file{~/.inputrc} の読み込みが抑制されます。

プロセスを作成するために @value{tramp} が使用するローカル・シェルでも同様の問題が発生する可能性があります。 デフォルトでは、
これにはコマンド @command{/bin/sh} を使用しますが、 これは別のシェルへのリンクでもあります。 これを上書きするために、
あなたは以下を適用するかもしれません

@vindex tramp-encoding-shell
@lisp
(customize-set-variable 'tramp-encoding-shell "/usr/bin/zsh")
@end lisp

これは @code{tramp-sh-extra-args} の設定も使用します。

@vindex RemoteCommand@r{, ssh option}
@strong{注意}: 接続に @option{ssh} ベースの方法を使用する場合は、 @command{ssh} 構成で
@option{RemoteCommand} オプション、たとえば @command{screen} などを「設定しないでください」。 一方、
@option{sshx} や @option{scpx} などの @option{ssh} ベースのメソッドは、 構成ファイルの
@option{RemoteCommand} オプションを黙って上書きします。


@subsection Other remote shell setup hints
@cindex remote shell setup
@cindex @file{.profile} file
@cindex @file{.login} file
@cindex shell init files

@value{tramp} は、 通常の場所で標準プログラムが利用可能かどうかをチェックします。 一般的な戦術には、 @command{test -e}
と @command{/usr/bin/test -e} と  @command{/bin/test -e} を連続して試すことが含まれます。
@command{ls -d} は、 もう一つのアプローチです。 しかし、 これらのアプローチは、 以下の新しいログイン ・パターンには役に立ちません。

@value{tramp} が 2 要素ログイン(two-factor logins)または追加のチャレンジ質問(additional
challenge questions)(生年月日、 セキュリティ・コード、 パスフレーズの入力など)に遭遇した場合、 @value{tramp}
はそれらに対応するためにさらにいくつかの構成手順が必要です。

パスワード・プロンプトとパスフレーズ・プロンプトの違いは、 パスワードはログインを完了するためのもので、
パスフレーズはssh鍵などのローカル認証情報へのアクセスを許可するためのものであることです。

ログイン・セキュリティのすべてのバリエーションに対応する単一の構成はありません。 特に特殊なものはそうです。 ただし、 @value{tramp} は、
最も一般的なものに対処するためにいくつかの調整(tweaks)を提供します。

@table @asis
@item @code{tramp-shell-prompt-pattern}
@vindex tramp-shell-prompt-pattern

@code{tramp-shell-prompt-pattern} はリモート・ログイン・シェル・プロンプト用であり、
ローカル・ログイン・シェル・プロンプト @code{shell-prompt-pattern} とは異なる場合があります。
ほとんどのホストは同じプロンプトを使用するため、 @value{tramp} は両方のプロンプトに同様のデフォルト値を設定します。

@item @code{tramp-password-prompt-regexp}
@item @code{tramp-wrong-passwd-regexp}
@vindex tramp-password-prompt-regexp
@vindex tramp-wrong-passwd-regexp

@value{tramp} は @code{tramp-password-prompt-regexp} を使用して、
パスワードのプロンプトとパスフレーズのプロンプトを区別します。 デフォルトでは、 @code{tramp-password-prompt-regexp}
は英語環境(English language environments)での検出を処理します。 以下のローカライズの例を参照してください:

@lisp
@group
(customize-set-variable
 'tramp-password-prompt-regexp
  (concat
   "^.*"
   (regexp-opt
    '("passphrase" "Passphrase"
      ;; English
      "password" "Password"
      ;; Deutsch
      "passwort" "Passwort"
      ;; Français
      "mot de passe" "Mot de passe")
    t)
   ".*:\0? *"))
@end group
@end lisp

@vindex password-word-equivalents
このユーザーオプションは、 デフォルトで、 @value{tramp} がロードされるときに
@code{password-word-equivalents} から初期化されます。 通常、 このユーザーオプションを変更する代わりに、
そのユーザーオプションに新しいパスフレーズを追加する方が便利です。

@value{tramp} が @code{tramp-wrong-passwd-regexp} を使用する間違ったパスワード・プロンプト(wrong
password prompts)を処理するには、 同様のローカライズが必要になる場合があります。

@item @code{tramp-terminal-type}
@vindex tramp-terminal-type
@vindex TERM@r{, environment variable}

@value{tramp} は、 ユーザー・オプション @code{tramp-terminal-type} を使用して、
実行するシェルのリモート環境変数 @env{TERM} を設定します。 デフォルトでは @t{"dumb"} ですが、これは変更できます。
ダム(dumb)端末は、 @value{tramp} のバックグラウンド・セッションを実行するのに最適です。 ただし、
インタラクティブなリモート・シェルを実行するには、 別の設定が必要になる場合があります。 これは、 @code{process-environment}
の @env{TERM} 環境変数を調整(tweak)することで実現できます。

@lisp
@group
(let ((process-environment
       (cons "TERM=xterm-256color" process-environment)))
  (shell))
@end group
@end lisp

@item Determining a @value{tramp} session
@vindex TERM@r{, environment variable}
@vindex INSIDE_EMACS@r{, environment variable}

しばしばシェルが @value{tramp} 制御下で実行されているかどうかを識別する必要があります。 環境変数 @env{TERM}
の設定が役立ちます:

@example
@group
if test "$TERM" = "dumb"; then
   ...
fi
@end group
@end example

@ifinfo
別の手としては、 環境変数 @env{INSIDE_EMACS} を確認することです。 Emacs のすべてのサブプロセスと同様に、 これは親
Emacs プロセスのバージョンに設定されます(@xref{Interactive Shell, , , emacs})。
@end ifinfo
@ifnotinfo
別の手としては、 環境変数 @env{INSIDE_EMACS} を確認することです。 Emacs のすべてのサブプロセスと同様に、 これは親
Emacs プロセスのバージョンに設定されます。
@end ifnotinfo
@value{tramp} は、 自身のパッケージ・バージョンをこの文字列に追加します。 これは、 下位シェルでのさらなるテストに使用できます。
その環境変数の文字列は常に以下のようになります

@example
@group
echo $INSIDE_EMACS
@result{} 27.2,tramp:2.4.5
@end group
@end example

@item @command{tset} and other questions
@cindex unix command @command{tset}
@cindex @command{tset} unix command

端末タイプでの不適切なプロンプトを抑制するために、 @value{tramp} は、 リモート・ログイン・プロセスがユーザー・オプション
@code{tramp-terminal-type} (上記を参照)を介して開始される前に @env{TERM} 環境変数を設定します。 これは一般的な
@command{tset} 関連のプロンプトを無しにします。

(通常はリモート・ホスト上のログイン・スクリプトからトリガーされる、)このようなプロンプトを処理するための、 @value{tramp}の戦略は、
シェルの初期化処理がロンプトによって中断(interrupt)されないように環境変数を設定することです。

@vindex tramp-actions-before-shell
別のアプローチとしては、 @code{tramp-actions-before-shell} を使用して、そのような質問を識別できる文字列で
@value{tramp} を構成することです。 たとえば:

@lisp
@group
(defconst my-tramp-prompt-regexp
  "Enter the birth date of your mother:\\s-*"
  "Regular expression matching my login prompt question.")
@end group

@group
(defun my-tramp-action (proc vec)
  "Enter \"19000101\" in order to give a correct answer."
  (save-window-excursion
    (with-current-buffer (tramp-get-connection-buffer vec)
      (tramp-message vec 6 "\n%s" (buffer-string))
      (tramp-send-string vec "19000101"))))
@end group

@group
(add-to-list 'tramp-actions-before-shell
             '(my-tramp-prompt-regexp my-tramp-action))
@end group
@end lisp

@code{tramp-actions-before-shell} で使用される正規表現は、 接続バッファの末尾とマッチする必要があります。
パフォーマンス上の理由により、 この検索はバッファの最後から開始され、 後方 256 文字に制限されています。

@item Conflicting names for users and variables in @file{.profile}

ユーザー名が @file{.profile} などのローカル・ファイル内の変数名と同じである場合、 @value{tramp}
は環境変数に対して誤った値を送信する可能性があります。 誤った値を避けるために、 ローカル変数名をユーザー名とは異なる名前に変更してください。
たとえば、 ユーザー名が @env{FRUMPLE} の場合、 変数名を @env{FRUMPLE_DIR} に変更します。

@item Non-Bourne commands in @file{.profile}

リモート・ホストの @file{.profile} が Bourne シェル以外のシェルにも使用されている場合、 @file{.profile}
内のコマンドの互換性のない構文によって、 ホスト上の Bourne シェルでエラーが発生し、 クライアントの @value{tramp}
接続が完了しない場合があります。

@file{.profile} の Bourne シェル非互換構文の一例: @command{FOO=bar; export FOO} の代わりに
@command{export FOO=bar} を使用。 Bourne シェルは @file{.profile} に入力された、
このエクスポート・コマンドを認識しないため、 リモート・ログイン後、 @value{tramp} はリモート・ホストで
@command{/bin/sh} の実行中にエラーをトリガーします。

同様に、 Bourne シェルは (@code{~}) 文字展開を行わないため、 パスに (@code{~}) 文字があるとエラーが発生します。

これらの非互換性を回避する方法の一つは、 @file{~/.shrc} や @file{~/.profile} Bourne
シェル内のすべてのコマンドを互換性のあるものにして、 @value{tramp} がそのリモートへの接続を完了できるようにすることです。
そのリモートで非 Bourne シェルの使用に対応するには、 他のシェル固有の構成ファイルを使用します。 たとえば、 bash は
@file{~/.bash_profile} を使用し、 @file{.profile} を無視できます。

@item Interactive shell prompt

@vindex INSIDE_EMACS@r{, environment variable}
@vindex SHELLNAME@r{, environment variable}
@vindex ESHELL@r{, environment variable}
@value{tramp} は、 堅牢なパースのために内部的にリモート・シェル・プロンプトを再定義します。 この再定義は、 @kbd{M-x shell
@key{RET}} などのコマンドを介した対話型リモート・シェルのプロンプトの外観に影響します。 ただし、 このようなプロンプトは、
これらの環境変数を使用して、 より読みやすく認識しやすいものにリセットできます。

@value{tramp} は、 起動スクリプト・ファイル @file{~/.emacs_SHELLNAME} に @env{INSIDE_EMACS}
環境変数を設定します。

@env{SHELLNAME} は @code{bash} または同等のシェル名です。 @file{.emacs} の環境変数 @env{ESHELL}
を以下のように設定することにより変更します:

@lisp
(setenv "ESHELL" "bash")
@end lisp

それから、 @file{~/.emacs_SHELLNAME} のプロンプト文字列を以下のように再設定します:

@example
@group
# Reset the prompt for remote @value{tramp} shells.
if [ "$@{INSIDE_EMACS/*tramp*/tramp@}" == "tramp" ] ; then
   PS1="[\u@@\h \w]$ "
fi
@end group
@end example

@ifinfo
@xref{Interactive Shell, , , emacs}.
@end ifinfo

@item @command{busybox} / @command{nc}
@cindex unix command @command{nc}
@cindex @command{nc} unix command

@value{tramp} の @option{nc} 方式(method)は、 @command{nc}
コマンドを使用して、以下のようにリスナー(listener)をインストールおよび実行します (@code{tramp-methods} 参照)。

@example
$ nc -l -p 42
@end example

上記のコマンドライン構文は、 @command{busybox} バージョンで変更されました。  @command{nc} が @samp{-p}
パラメータを拒否する場合は、 以下のように上書きします:

@lisp
@group
(add-to-list 'tramp-connection-properties
             `(,(regexp-quote "192.168.0.1")
               "remote-copy-args" (("-l") ("%r"))))
@end group
@end lisp

@noindent
ここで、 @samp{192.168.0.1} はリモート・ホストの IP アドレスです(@pxref{Predefined connection
information})。

@end table


@node Ssh setup
@section Ssh setup hints

最も一般的な @value{tramp} 接続ファミリは、 OpenSSH の @command{ssh} や @command{scp}、 または
MS Windows 上の PuTTY の @command{plink} や @command{pscp} に基づいています。
以下に、いくつかの構成に関する推奨事項を示します。


@subsection Using ssh config include for host name completion

@vindex Include@r{, ssh option}
@findex tramp-set-completion-function
@findex tramp-get-completion-function
OpenSSH 構成ファイルは、 追加の構成ファイルに @option{Include} オプションを使用できます。 デフォルトの
@value{tramp} ホスト名補完は、 このオプションを無視します。 ただし、これは自分で構成できます。

@file{~/.ssh/config} ファイルに以下のオプションが含まれているとします:

@example
Include ~/.ssh/conf.d/*
@end example

@file{.emacs} 内の以下のコード片は、 そのディレクトリ内のすべてのファイルを使用してホスト名を補完します:

@lisp
@group
(tramp-set-completion-function
 "ssh" (append (tramp-get-completion-function "ssh")
               (mapcar (lambda (file) `(tramp-parse-sconfig ,file))
                       (directory-files
                        "~/.ssh/conf.d/"
                        'full directory-files-no-dot-files-regexp))))
@end group
@end lisp

このコード片は、 @option{ssh} 方式(method)に対するものです。 @t{"ssh"} を @t{"scp"}
に置き換えると、その方式(またはあなたの好きなその他の方式)に対しても同じことが行われます。


@subsection Detection of session hangouts

@vindex ServerAliveInterval@r{, ssh option}
@vindex ServerAliveCountMax@r{, ssh option}
ネットワークがダウンすると、 ローカル・ホスト上の @command{ssh} セッションがハングアップ(hang)します。 @value{tramp}
は、 そのようなハングアップを安全に検出できません。 OpenSSH は、 @file{~/.ssh/config} で以下の設定を使用して、
このようなハングアップを強制終了するように構成できます:

@example
@group
Host *
     ServerAliveInterval 5
     ServerAliveCountMax 2
@end group
@end example

これに対応する PuTTY 設定は、 @option{Connection} エントリの @option{Seconds between
keepalives} オプションにあります。 これを 5 に設定します。 カウントは設定できません(訳注:
ServerAliveCountMax相当はありません)。


@subsection Using ssh connection sharing

@vindex ControlPath@r{, ssh option}
@vindex ControlPersist@r{, ssh option}
@value{tramp} は、 可能であれば、 デフォルトで @option{ControlMaster=auto} OpenSSH
オプションを使用します。 ただし、 @command{ssh} セッションを開始するときに @option{ControlPath}
設定を上書きします。 @value{tramp} は、 Emacs セッションの外で開かれたマスターセッション(master
session)が開かれなくなった場合に、 ストール(stall)を回避するためにこれを行います。 そのため、 @command{ssh}
がすでに開いている場合でも、 @value{tramp} は再度パスワードを要求します。

@vindex tramp-ssh-controlmaster-options
一部の OpenSSH バージョンは @option{ControlPersist} オプションをサポートしており、 変数
@code{tramp-ssh-controlmaster-options}
が以下のようにカスタマイズされている場合、@option{ControlPath} を設定できます:

@lisp
@group
(customize-set-variable
 'tramp-ssh-controlmaster-options
 (concat
   "-o ControlPath=/tmp/ssh-ControlPath-%%r@@%%h:%%p "
   "-o ControlMaster=auto -o ControlPersist=yes"))
@end group
@end lisp

注意: @samp{%r} と @samp{%h} と @samp{%p} は、 @samp{%%r} や @samp{%%h} や
@samp{%%p} としてエンコードする必要があることに注意してください。

@vindex tramp-use-ssh-controlmaster-options
@file{~/.ssh/config} ファイルが上記の動作に対して適切に設定されている場合、 @command{ssh} への変更は、 以下の
@code{nil} 設定で抑制できます:

@lisp
(customize-set-variable 'tramp-use-ssh-controlmaster-options nil)
@end lisp

@vindex ProxyCommand@r{, ssh option}
@vindex ProxyJump@r{, ssh option}
あなたの @command{ssh} 設定で @option{ProxyCommand} または @option{ProxyJump}
オプションを使用する場合、 これらも @code{nil} に設定する必要があります。

@option{ControlMaster} オプションを使用するには、 @value{tramp} は @command{ssh}
クライアントがこのオプションをサポートしているかどうかを確認する必要があります。 これは、 最初のホップのローカル・ホストでのみ可能です。 したがって、
@value{tramp} はプロキシ・ホストではこのオプションを使用しません。

このオプションを他のホップにも使用する場合は、 プロキシ・ホストで @file{~/.ssh/config} を構成する必要があります:

@example
@group
Host *
     ControlMaster      auto
     ControlPath        tramp.%C
     ControlPersist     no
@end group
@end example

これらのオプションがプロキシ・ホストでサポートされているかどうかは、 man ページ の @samp{ssh_config(5)} を確認してください。

MS Windows では、 @code{tramp-use-ssh-controlmaster-options} はデフォルトで @code{nil}
に設定されています。 これは、 @command{OpenSSH} の MS Windows および MSYS2
実装がこのオプションを適切にサポートしていないためです。

PuTTY では、 @option{Connection/SSH} エントリで接続共有(connection sharing)を実現し、
@option{Share SSH connections if possible} オプションを有効にできます。


@subsection Configure direct copying between two remote servers

@vindex tramp-use-scp-direct-remote-copying
@value{tramp} は、 外部方式(external methods)を介して異なるリモート・ホスト間で 2 つのファイルをコピーするときに、
一時的なローカル・コピーを使用します。 この動作は、 @value{tramp} が十分に処理できない認証の問題によるものです。 ただし、
@option{scp} 接続の場合、 これは変更できます。 ファイルが 2 つの異なるリモート・ホスト @samp{source} と
@samp{target} の間でコピーされ、かつ、

@itemize @minus
@item
変数 @code{tramp-use-scp-direct-remote-copying} が 非 @code{nil} で、かつ、

@item
リモートホスト @samp{source} が、 @file{~/.ssh/config} で @option{RemoteCommand}
オプションを使用せず、かつ、

@item
リモート・ホスト @samp{target} は、 ローカル・ホストとホスト @samp{source} から見たとき同一のホスト・キーを表示し、
かつ、

@item
ホスト @samp{source} で実行されている @command{scp} は、パスワードを必要とせずにホスト @samp{target}
に対して認証できる場合、
@end itemize

@noindent
@value{tramp} は、 以下のように、 ホスト @samp{source} と @samp{target}
の間で直接リモート・コピー(direct remote copying)を適用します

@example
scp -p -T -R -q -r source:/path/to/file target:/path/to/another/file
@end example

これにより、 大きなファイルをコピーするときに、 ローカルの一時ディレクトリもオーバーランから保護されます。

これらの条件が当てはまらず、 @code{tramp-use-scp-direct-remote-copying} が 非 @code{nil}
の場合、 @samp{-R} の代わりにオプション @samp{-3} が使用されます。 .

@c FIXME
@value{tramp} が直接リモート・コピー(direct remote copying)を使用する場合、
パスワード・キャッシュは考慮されません(not consulted)。


@subsection Issues with Cygwin ssh
@cindex cygwin, issues

このセクションはまだ不完全です。 良い解決方法をお待ちしています。

@cindex method @option{sshx} with cygwin
@cindex @option{sshx} method with cygwin

Cygwin の @command{ssh} は、Emacs の Cygwin バージョンでのみ機能します。 互換性を確認するには、 @kbd{M-x
eshell @key{RET}} と入力し、 @kbd{ssh test.host @key{RET}} を開始します。 非互換性により、
以下のメッセージがトリガーされます:

@example
Pseudo-terminal will not be allocated because stdin is not a terminal.
@end example

Cygwin の @command{ssh} の一部の古いバージョンは、 @option{sshx} アクセス方式で動作します。 詳細については、
@uref{https://cygwin.com/faq/} で Cygwin の FAQ を参照してください。

@cindex cygwin and @command{fakecygpty}
@cindex @command{fakecygpty} and cygwin

@uref{https://www.emacswiki.org/emacs/SshWithNTEmacs, the Emacs Wiki} では、
ヘルパー・プログラム @command{fakecygpty} を使用してこの問題を修正する方法が説明されています。

@cindex method @option{scpx} with cygwin
@cindex @option{scpx} method with cygwin

@option{scpx} アクセス方式を使用する場合、 Emacs は、 @file{c:/foo} などの MS Windows ファイル名で
@command{scp} を呼び出すことができます。 しかし、 Cygwin とともにインストールされた @command{scp} のバージョンは、
MS Windows のファイル命名法を認識しないため、 @samp{c} という名前のホストを誤って検索します。

回避策(workaround): @option{scp} のラッパー・スクリプトを記述して、 Windows ファイル名を Cygwin
ファイル名に変換します。

@cindex cygwin and @command{ssh-agent}
@cindex @env{SSH_AUTH_SOCK} and emacs on ms windows
@vindex SSH_AUTH_SOCK@r{, environment variable}

MS Windows でパスワードなしの対話に @command{ssh-agent} を使用する場合、 @option{ssh} 方式は環境変数
@env{SSH_AUTH_SOCK} に依存します。 ただし、 Emacs がデスクトップ・ショートカットから起動され、 かつ、 認証が失敗した場合、
この変数は設定されません。

回避策の１つは、 @command{Pageant} などの MS Windows ベースの SSH エージェントを使用することです。 これは
PuTTY スイートの一部です。

最後の手段は、 シェルから Emacs を起動することです。


@node FUSE setup
@section @acronym{FUSE} setup hints

@acronym{FUSE} ファイル・システムは、 デフォルトで @file{/tmp/tramp.method.user@@host#port}
にマウントされます。 ユーザー名とポート番号はオプションです。 ファイル・システムがすでにマウントされている場合は、 そのまま使用されます。
マウント・ポイントがまだ存在しない場合、 @value{tramp} はこのディレクトリを作成します。

マウント・ポイントは、 接続プロパティ @t{"mount-point"} によって上書きできます(@ref{Predefined connection
information})。 例:

@lisp
@group
(add-to-list 'tramp-connection-properties
             `(,(regexp-quote "@trampfn{sshfs,user@@host,}")
               "mount-point"
               ,(expand-file-name "sshfs.user@@host" user-emacs-directory)))
@end group
@end lisp

@vindex tramp-fuse-unmount-on-cleanup
ユーザー・オプション @code{tramp-fuse-unmount-on-cleanup} が 非 @code{nil} 設定されている場合、
接続のクリーンアップ時または Emacs の終了時にマウント・ポイントがアンマウントされるかどうかを制御します。


@anchor{Setup of rclone method}
@subsection @option{rclone} setup
@cindex rclone setup

@command{rclone} の @command{mount} 操作や @command{coopyto} 操作や
@command{moveto} 操作や @command{about} 操作のデフォルト引数は、方式(method)固有のパラメータとして変数
@code{tramp-methods} で宣言されます。 通常、上書きする必要はありません。

必要に応じて、 これらのパラメーターは、 接続プロパティ @t{"mount-args"} や @t{"copyto-args"} や
@t{"moveto-args"} や @t{"about-args"} として上書きできます(@xref{Predefined connection
information})。 これらはすべて文字列のリストです。

@t{"--dir-cache-time"} の変更には注意してください。 これにより、ファイルの表示が遅くなる可能性があります。


@anchor{Setup of sshfs method}
@subsection @option{sshfs} setup
@cindex sshfs setup

@option{sshfs} 方式は、 @command{sshfs} コマンドに渡される変数 @code{tramp-methods}
でマウント引数を宣言します。 これは文字列のリストのリストであり、 接続プロパティ @t{"mount-args"}
によって上書きできます(@xref{Predefined connection information})。

さらに、 @command{ssh} コマンドを使用して、 リモート・プロセスを実行するための引数も宣言します。 これらは変更する必要はありません。


@node Android shell setup
@section Android shell setup hints
@cindex android shell setup for ssh

@value{tramp} は @option{adb} 方式(method)を使用して Android デバイスにアクセスします。 Android
デバイスは、 USB 接続を介して制限付きシェル・アクセスを提供します。 ローカル・ホストには @command{adb}
プログラムがインストールされている必要があります。 通常、 ファイル @file{@trampfn{adb,,/}} を開くだけで十分です。 その後、
@code{dired} を介してファイル・システムをナビゲートできます。

あるいは、 Android デバイスで @command{sshd} プロセスを実行する @code{Termux} や @code{SSHDroid}
などのアプリケーションは、 これらの設定が調整されていれば、 @option{ssh} ベースの方式(method)を受け入れることができます:

@itemize
@item
Android デバイスは @command{/bin/sh} を提供しないため、 リモート・シェルには @command{sh}
を指定する必要があります。 @command{sh} は、 以下の設定でデバイスにインストールされているシェルを呼び出します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "192.168.0.26") "remote-shell" "sh"))
@end group
@end lisp

@noindent
ここで、 @samp{192.168.0.26} は Android デバイスの IP アドレスです。 (@pxref{Predefined
connection information})。

@item
Android デバイスでは、 ディレクトリ名の前にアプリケーション固有のプレフィックスが付きます。 これは、 @code{Termux} の場合、
@file{/usr/bin} ではなく、 @file{/data/data/com.termux/files/usr/bin} です。
@code{tramp-remote-path} でファイル名を調整する必要があります。 @code{tramp-remote-path}
のファイル名を、 たとえば以下のように connection-local 設定を介して調整する必要があります
@ifinfo
(@pxref{Connection Variables, , , emacs})
@end ifinfo
@ifnotinfo
:
@end ifnotinfo

@lisp
@group
(connection-local-set-profile-variables
 'tramp-connection-local-termux-profile
 `((tramp-remote-path
    . ,(mapcar
	(lambda (x)
	  (if (stringp x) (concat "/data/data/com.termux/files" x) x))
	(copy-tree tramp-remote-path)))))

(connection-local-set-profiles
 '(:application tramp :machine "192.168.0.26")
 'tramp-connection-local-termux-profile)
@end group
@end lisp

@item
Android デバイスがルート化(@samp{rooted})されてない場合は、 一時ファイル用に書き込み可能なディレクトリを指定します:

@lisp
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "192.168.0.26")
		   "tmpdir" "/data/data/com.termux/files/home/tmp"))
@end lisp

@item
コマンド @kbd{C-x C-f @trampfn{ssh,192.168.0.26#2222,} @key{RET}} でリモート接続を開きます。
ここで、 @command{sshd} はポート @samp{2222} でリッスンしています。

(推奨)対応するエントリを @file{~/.ssh/config} ファイルに追加するには、 以下を使用します:

@example
@group
Host android
     HostName 192.168.0.26
     User root
     Port 2222
@end group
@end example

@noindent
上記例で示した IP アドレスの代わりにホスト名 @samp{android} を使用するには、 接続プロパティを以下のように修正します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "android") "remote-shell" "sh"))
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "android")
		   "tmpdir" "/data/data/com.termux/files/home/tmp"))
(connection-local-set-profiles
 '(:application tramp :machine "android")
 'tramp-connection-local-termux-profile)
@end group
@end lisp

@noindent
これにより、 より簡潔なコマンド @kbd{C-x C-f @trampfn{ssh,android,} @key{RET}}
でリモート接続を開けます。
@end itemize


@node Auto-save File Lock and Backup
@section Auto-save, File Lock and Backup configuration
@cindex auto-save
@cindex file-lock
@cindex backup

@vindex backup-directory-alist
@value{tramp} が、 @samp{root}
が所有するバックアップ・ファイルを他のユーザーがアクセスできる場所に保存することを回避するには、
@code{backup-directory-alist} のデフォルトのバックアップ設定を変更する必要があります。

ファイルが誤って公開される可能性があるシナリオを以下に示します。 デフォルトでは、 @file{~/.emacs.d/backups/}
などの別の場所に変更されない限り、 Emacs は元のファイルと同じディレクトリにバックアップ・ファイルを書き込みます。 このようなディレクトリは、
たとえば、制限付きファイル @file{@trampfn{su,root@@localhost,/etc/secretfile}} を使用する場合、
@value{tramp} によってデフォルトで使用されます。 secretfile のバックアップ・ファイルは、 @samp{root} ではなく、
@value{tramp} からログインしたユーザーが所有するようになりました。

@code{backup-directory-alist} が @code{nil} (デフォルト) の場合、 このような問題は発生しません。

リモート・ファイルのバックアップ機能を「オフ」にして、 @value{tramp} によるバックアップ・ディレクトリへの保存を停止するには、
以下のようにします:

@lisp
@group
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp nil))
@end group
@end lisp

@noindent
例えば、 バックアップの無効化は、 @option{su} と @option{sudo} 方式のみを対象にすることが可能です:

@lisp
@group
(setq backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
             (not
              (let ((method (file-remote-p name 'method)))
                (when (stringp method)
                  (member method '("su" "sudo"))))))))
@end group
@end lisp

@vindex tramp-backup-directory-alist
もう 1 つのオプションは、 ファイル名の前にユーザー名とホスト名を付けて、 より適切なバックアップ・ファイル名を命名することです。 たとえば、
@file{/etc/secretfile} を
@file{~/.emacs.d/backups/!su:root@@localhost:!etc!secretfile} に変換し、
既存のユーザー・オプション @code{backup-directory-alist} より、 @value{tramp} ユーザー・オプション
@code{tramp-backup-directory-alist} を設定します。

次に、 @value{tramp} は、 DIRECTORY 名で構成されるプレフィックスで変換されたファイル名にバックアップします。
このファイル名のプレフィックスは、 DIRECTORY が絶対ローカル・ファイル名である場合にのみ発生します。

@noindent
例:

@lisp
@group
(add-to-list 'backup-directory-alist
             (cons "." "~/.emacs.d/backups/"))
(customize-set-variable
 'tramp-backup-directory-alist backup-directory-alist)
@end group
@end lisp

@noindent
@file{@trampfn{su,root@@localhost,/etc/secretfile}} のバックアップ・ファイル名は以下のようになります
@ifset unified
@file{@trampfn{su,root@@localhost,~/.emacs.d/backups/!su:root@@localhost:!etc!secretfile~}}.
@end ifset
@ifset separate
@file{@trampfn{su,root@@localhost,~/.emacs.d/backups/![su!root@@localhost]!etc!secretfile~}}.
@end ifset

@vindex auto-save-file-name-transforms
バックアップ・ファイルと同様に、 ファイルの命名に関する同様の問題がリモート・ファイルの自動保存に影響します。 自動保存されたファイルは、
ユーザー・オプション @code{auto-save-file-name-transforms} で指定されたディレクトリに保存されます。
デフォルトでは、 これはローカルの一時ディレクトリに設定されています。 しかし、 Debian GNU/Linux の一部のバージョンでは、 これは
Emacs がコンパイルされたソース・ディレクトリを指します。 そのような値を有効なディレクトリにリセットします。

@code{auto-save-file-name-transforms} を @code{nil} に設定して、
自動保存されたファイルを元のファイルと同じディレクトリに保存します。

@vindex tramp-auto-save-directory
あるいは、 ユーザー・オプション @code{tramp-auto-save-directory} を設定して、 すべての自動保存をその場所に向けます。

@c Since Emacs 29.
@vindex remote-file-name-inhibit-auto-save-visited
@code{auto-save-mode} の代替は @code{auto-save-visited-mode} です。 このモードでは、
自動保存は明示的保存と同じです。 リモート・ファイルに対してこの動作を無効にしたい場合は、 ユーザーオプション
@code{remote-file-name-inhibit-auto-save-visited} を 非 @code{nil} に設定してください。

@vindex lock-file-name-transforms
そして、さらに多くの問題を処理する必要があります。 @w{Emacs 28} 以降、 ファイル・ロックは
@code{lock-file-name-transforms} と呼ばれる自動保存ファイルと同様のユーザー・オプションを使用します。 デフォルトでは、
このユーザー・オプションは @code{nil} で、 ファイル・ロックを元のファイルと同じディレクトリに保持することを意味します。

もし、 @code{lock-file-name-transforms}を変更して、
リモート・ファイルのファイル・ロックを別の場所に保持するようにすると、
異なるEmacsセッションや異なるリモート接続から並行してファイルを変更した場合に警告するEmacsの機能が失われます。
このような設定には注意を払ってください。

@vindex remote-file-name-inhibit-locks
@code{remote-file-name-inhibit-locks} を 非 @code{nil} に設定すると、
リモート・ロック・ファイルの作成が完全に抑止されます。

@vindex tramp-allow-unsafe-temporary-files
デフォルトでは、 @value{tramp} は、 @samp{root} 所有のリモート・バックアップまたは、 自動保存または、
ロック・ファイルをローカルの一時ディレクトリに書き込む必要があるかどうかを確認します。 この確認の質問を抑制したい場合は、ユーザー・オプション
@code{tramp-allow-unsafe-temporary-files} を @code{t} に設定してください。


@node Keeping files encrypted
@section Protect remote files by encryption
@cindex Encrypt remote directories

@strong{Note}: File encryption in @value{tramp} is experimental, don't use
it in production systems!

Sometimes, it is desirable to protect files located on remote directories,
like cloud storages.  In order to do this, you might instruct @value{tramp}
to encrypt all files copied to a given remote directory, and to decrypt such
files when accessing.  This includes both file contents and file names.

@value{tramp} does this transparently.  Although both files and file names
are encrypted on the remote side, they are accessible inside Emacs as they
wouldn't be transformed as such.

@cindex @command{encfs}
@cindex @command{encfsctl}
Internally, @value{tramp} uses the @command{encfs} package.  Therefore, this
feature is available only if this package is installed on the local host.
@value{tramp} does not keep and @samp{encfs mountpoint} permanently.
Instead, it encrypts / decrypts files and file names on the fly, using
@command{encfsctl}.

@deffn Command tramp-crypt-add-directory name
This command marks the existing remote directory @var{name} for encryption.
Files in that directory and all subdirectories will be encrypted before
copying to, and decrypted after copying from that directory.  File and
directory names will be also encrypted.
@end deffn

@defopt tramp-crypt-encfs-option
If a remote directory is marked for encryption, it is initialized via
@command{encfs} the very first time a file in this directory is accessed.
This user option controls, which default @command{encfs} configuration
option will be selected, it can be @t{"--standard"} or @t{"--paranoia"}.
See the @samp{encfs(1)} man page for details.

However, @value{tramp} must adapt these configuration sets.  The
@code{chainedNameIV} configuration option must be disabled; otherwise
@value{tramp} couldn't handle file name encryption transparently.
@end defopt

A password protected @option{encfs} configuration file is created the very
first time you access an encrypted remote directory.  It is kept in your
@code{user-emacs-directory} with the url-encoded directory name as part of
the basename, and @file{encfs6.xml} as suffix.  If you, for example, mark
the remote directory @file{@trampfn{nextcloud,user@@host,/path/to/dir}} for
encryption, the configuration file is saved as
@file{tramp-%2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F.encfs6.xml}
in @code{user-emacs-directory}.  Do not lose this file and the corresponding
password; otherwise there is no way to decrypt your encrypted files.

@defopt tramp-crypt-save-encfs-config-remote
If this user option is non-@code{nil} (the default), the @option{encfs}
configuration file @file{.encfs6.xml} is also kept in the encrypted remote
directory.  It depends on you, whether you regard the password protection of
this file as sufficient.  The advantage would be, that such a remote
directory could be accessed by different Emacs sessions, different users,
without presharing the configuration file between the users.
@end defopt

The command @command{encfsctl}, the workhorse for encryption / decryption,
needs the configuration file password every call.  Therefore, it is
recommend to cache this password in Emacs.  This can be done using
@code{auth-sources}, @ref{Using an authentication file}.  An entry needs the
url-encoded directory name as machine, your local user name as user, and the
password.  The port is optional, if given it must be the string
@t{"crypt"}.  The example above would require the following entry in the
authentication file (@t{"yourname"} is the result of
@code{(user-login-name)}):

@example
machine %2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F \
        login yourname port crypt password geheim
@end example

If you use a remote file name with a quoted localname part, this localname
and the corresponding file will not be encrypted / decrypted.  If you have
an encrypted remote directory
@file{@trampfn{nextcloud,user@@host,/path/to/dir}}, the command

@example
@kbd{C-x d @trampfn{nextcloud,user@@host,/path/to/dir}}
@end example

@noindent
will show the directory listing with the plain file names, and the command

@example
@kbd{C-x d @trampfn{nextcloud,user@@host,/:/path/to/dir}}
@end example

@noindent
will show the directory listing with the encrypted file names, and visiting
a file will show its encrypted contents.  However, it is highly discouraged
to mix encrypted and not encrypted files in the same directory.

@deffn Command tramp-crypt-remove-directory name
This command should be used to indicate that files in @code{name} should no
longer be encrypted.  Existing encrypted files and subdirectories will
remain encrypted.
@end deffn


@node Usage
@chapter Using @value{tramp}
@cindex using @value{tramp}

@value{tramp} operates transparently, accessing remote files as if they are
local.  However, @value{tramp} employs a formalized remote file naming
syntax to perform its functions transparently.  This syntax consists of many
parts specifying access methods, authentication, host names, and file
names.  Ange FTP uses a similar syntax.

@cindex type-ahead

Unlike opening local files in Emacs, which are instantaneous, opening remote
files in @value{tramp} is slower at first.  Sometimes there is a noticeable
delay before the prompts for passwords or authentication appear in the
minibuffer.  Hitting @kbd{@key{RET}} or other keys during this gap will be
processed by Emacs.  This type-ahead facility is a feature of Emacs that may
cause missed prompts when using @value{tramp}.

@menu
* File name syntax::         @value{tramp} file name conventions.
@ifset unified
* Change file name syntax:: Alternative file name syntax.
@end ifset
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding @file{~} to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.
@end menu


@node File name syntax
@section @value{tramp} file name conventions
@cindex file name syntax
@cindex file name examples

@file{@trampfn{method,host,/path/to/file}} opens file @var{/path/to/file} on
the remote host @var{host}, using the method @var{method}.

@c We cannot use @trampfn{} in @item.
@table @file
@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}.emacs
For the file @file{.emacs} located in the home directory, on the host
@code{melancholia}, using method @code{ssh}.

@item @value{prefix}ssh@value{postfixhop}melancholia.danann.net@value{postfix}.emacs
For the file @file{.emacs} specified using the fully qualified domain name
of the host.

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}~/.emacs
For the file @file{.emacs} specified using the @file{~}, which is expanded.

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}~daniel/.emacs
For the file @file{.emacs} located in @code{daniel}'s home directory on the
host, @code{melancholia}.  The @file{~<user>} construct is expanded to the
home directory of that user on the remote host.

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}/etc/squid.conf
For the file @file{/etc/squid.conf} on the host @code{melancholia}.

@end table

@var{host} can take IPv4 or IPv6 address, as in
@file{@trampfn{ssh,127.0.0.1,.emacs}} or
@file{@trampfn{ssh,@value{ipv6prefix}::1@value{ipv6postfix},.emacs}}.
@ifset unified
For syntactical reasons, IPv6 addresses must be embedded in square brackets
@file{@value{ipv6prefix}} and @file{@value{ipv6postfix}}.
@end ifset

By default, @value{tramp} will use the current local user name as the remote
user name for log in to the remote host.  Specifying a different name using
the proper syntax will override this default behavior:
@file{@trampfn{method,user@@host,path/to/file}}.

@file{@trampfn{ssh,daniel@@melancholia,.emacs}} is for file @file{.emacs} in
@code{daniel}'s home directory on the host, @code{melancholia}, accessing
via method @code{ssh}.

For specifying port numbers, affix @file{#<port>} to the host name.  For
example: @file{@trampfn{ssh,daniel@@melancholia#42,.emacs}}.

All method, user name, host name, port number and local name parts are
optional, @xref{Default Method}, @xref{Default User}, @xref{Default Host}.
@ifset unified
For syntactical reasons, the default method must be indicated by the pseudo
method @file{-}.
@end ifset


@ifset unified
@node Change file name syntax
@section Alternative file name syntax
@cindex change file name syntax
@cindex alternative file name syntax

The syntax described in @ref{File name syntax} is the @code{default} syntax,
which is active after Emacs startup.  However, this can be changed.

@deffn Command tramp-change-syntax syntax
This command changes the syntax @value{tramp} uses for remote file names.
Beside the @code{default} value, @var{syntax} can be

@itemize
@item @code{simplified}
@cindex simplified syntax

This remote file name syntax is similar to the syntax used by Ange FTP@.  A
remote file name has the form
@code{@value{prefix}user@@host@value{postfix}path/to/file}.  The
@code{user@@} part is optional, and the method is determined by @ref{Default
Method}.

@item @code{separate}
@cindex separate syntax

@clear unified
@set separate
@include trampver.texi
This remote file name syntax originated in the XEmacs text editor.  A remote
file name has the form @code{@trampfn{method,user@@host,path/to/file}}.  The
@code{method} and @code{user@@} parts are optional.
@clear separate
@set unified
@include trampver.texi
@end itemize
@end deffn

@defvar tramp-file-name-regexp
This variable keeps a regexp which matches the selected remote file name
syntax.  Its value changes after every call of @code{tramp-change-syntax}.
However, it is not recommended to use this variable in external packages, a
call of @code{file-remote-p} is much more appropriate.
@ifinfo
@pxref{Magic File Names, , , elisp}.
@end ifinfo
@end defvar
@end ifset


@node File name completion
@section File name completion
@cindex file name completion

@value{tramp} can complete the following @value{tramp} file name components:
method names, user names, host names, and file names located on remote
hosts.  User name and host name completion is activated only, if file name
completion has one of the styles @code{basic}, @code{emacs21}, or
@code{emacs22}.
@ifinfo
@xref{Completion Styles, , , emacs}.
@end ifinfo

For example, type @kbd{C-x C-f @value{prefixwithspace} s @key{TAB}},
@value{tramp} completion choices show up as

@example
@group
@multitable @columnfractions .2 .2 .2 .2 .2
@item @c
  sbin/ @tab @c
  @value{prefixhop}scp@value{postfix} @tab @c
  @value{prefixhop}scpx@value{postfix} @tab @c
  @value{prefixhop}sftp@value{postfix} @tab @c
  @value{prefixhop}sg@value{postfix}
@item @c
  @value{prefixhop}smb@value{postfix} @tab @c
  srv/ @tab @c
  @value{prefixhop}ssh@value{postfix} @tab @c
  @value{prefixhop}sshx@value{postfix} @tab @c
  @value{prefixhop}su@value{postfix}
@item @c
  @value{prefixhop}sudo@value{postfix} @tab @c
  sys/
@end multitable
@end group
@end example

@samp{@value{prefixhop}ssh@value{postfixhop}} is a possible completion for
the respective method, and @samp{sbin/} stands for the directory
@file{/sbin} on your local host.

@c bug#50387
Type @kbd{s h @value{postfixhop}} for the minibuffer completion to
@samp{@value{prefix}ssh@value{postfixhop}}.  Typing @kbd{@key{TAB}} shows
host names @value{tramp} extracts from @file{~/.ssh/config} file, for
example@footnote{Some completion styles, like @code{substring} or
@code{flex}, require to type at least one character after the trailing
@samp{@value{postfixhop}}.}.

@example
@group
@multitable @columnfractions .5 .5
@item @c
  @value{prefixhop}ssh@value{postfixhop}127.0.0.1@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}192.168.0.1@value{postfix}
@item @c
  @value{prefixhop}ssh@value{postfixhop}@value{ipv6prefix}::1@value{ipv6postfix}@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}localhost@value{postfix}
@item @c
  @value{prefixhop}ssh@value{postfixhop}melancholia.danann.net@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}melancholia@value{postfix}
@end multitable
@end group
@end example

Choose a host from the above list and then continue to complete file names
on that host.

When the configuration (@pxref{Customizing Completion}) includes user names,
then the completion lists will account for the user names as well.

@vindex tramp-completion-use-auth-sources
Results from @code{auth-sources} search (@pxref{Using an authentication
file}) are added to the completion candidates.  This search could be
annoying, for example due to a passphrase request of the
@file{~/.authinfo.gpg} authentication file.  The user option
@code{tramp-completion-use-auth-sources} controls, whether such a search is
performed during completion.

Remote hosts previously visited or hosts whose connections are kept
persistently (@pxref{Connection caching}) will be included in the completion
lists.

After remote host name completion comes completion of file names on the
remote host.  It works the same as with local host file completion except
that killing with double-slash @file{//} kills only the file name part of
the @value{tramp} file name syntax.  A triple-slash stands for the default
behavior.
@ifinfo
@xref{Minibuffer File, , , emacs}.
@end ifinfo

@noindent
例:

@example
@group
@kbd{C-x C-f @trampfn{ssh,melancholia,/usr/local/bin//etc} @key{TAB}}
     @print{} @trampfn{ssh,melancholia,/etc}

@kbd{C-x C-f @trampfn{ssh,melancholia,//etc} @key{TAB}}
     @print{} @trampfn{ssh,melancholia,/etc}

@kbd{C-x C-f @trampfn{ssh,melancholia,/usr/local/bin///etc} @key{TAB}}
     @print{} /etc
@end group
@end example


@node Ad-hoc multi-hops
@section Declaring multiple hops in the file name
@cindex multi-hop, ad-hoc
@cindex proxy hosts, ad-hoc

@value{tramp} file name syntax can accommodate ad-hoc specification of
multiple proxies without using @code{tramp-default-proxies-alist}
configuration setup (@pxref{Multi-hops}).

Each proxy is specified using the same syntax as the remote host
specification minus the file name part.  Each hop is separated by a
@samp{|}.  Chain the proxies from the starting host to the destination
remote host name and file name.  For example, hopping over a single proxy
@samp{bird@@bastion} to a remote file on @samp{you@@remotehost}:

@example
@c @kbd{C-x C-f @trampfn{ssh@value{postfixhop}bird@@bastion|ssh,you@@remotehost,/path} @key{RET}}
@kbd{C-x C-f @value{prefix}ssh@value{postfixhop}bird@@bastion|@c
ssh@value{postfixhop}you@@remotehost@value{postfix}/path @key{RET}}
@end example

Each involved method must be an inline method (@pxref{Inline methods}).

@value{tramp} adds the ad-hoc definitions on the fly to
@code{tramp-default-proxies-alist} and is available for re-use during that
Emacs session.  Subsequent @value{tramp} connections to the same remote host
can then use the shortcut form: @samp{@trampfn{ssh,you@@remotehost,/path}}.
Ad-hoc definitions are removed from @code{tramp-default-proxies-alist} via
the command @kbd{M-x tramp-cleanup-all-connections @key{RET}}
(@pxref{Cleanup remote connections}).

@defopt tramp-save-ad-hoc-proxies
For ad-hoc definitions to be saved automatically in
@code{tramp-default-proxies-alist} for future Emacs sessions, set
@code{tramp-save-ad-hoc-proxies} to non-@code{nil}.

@lisp
(customize-set-variable 'tramp-save-ad-hoc-proxies t)
@end lisp
@end defopt

Ad-hoc proxies can take patterns @code{%h} or @code{%u} like in
@code{tramp-default-proxies-alist}.  The following file name expands to user
@samp{root} on host @samp{remotehost}, starting with an @option{ssh} session
on host @samp{remotehost}:
@samp{@trampfn{ssh@value{postfixhop}%h|su,remotehost,}}.

On the other hand, if a trailing hop does not specify a host name, the host
name of the previous hop is reused.  Therefore, the following file name is
equivalent to the previous example:
@samp{@trampfn{ssh@value{postfixhop}remotehost|su,,}}.


@node Home directories
@section Expanding @file{~} to home directory

Home directories on remote hosts can be typed as tilde @file{~}.  If
possible, they are expanded to the remote user's home directory on the
remote host.  Example:

@example
@group
@trampfn{ssh,user@@host,~}
@result{} @trampfn{ssh,user@@host,/home/user}
@end group
@end example

This works in general for @option{ssh}-like methods, and for
@option{sudoedit}.  These methods allow also the home directory expansion
for another user, like

@example
@group
@trampfn{sudoedit,,~otheruser}
@result{} @trampfn{sudoedit,root@@localhost,/home/otheruser}
@end group
@end example

For other methods, a home directory can be expanded only if supported.  This
happens for example for the @option{sftp} method.  Methods, which require a
share directory in the remote file name (@option{afp}, @option{smb}), use
the value of this share directory as home directory:

@example
@group
@trampfn{smb,user@@host,~}
@result{} @trampfn{smb,user@@host,/share}
@end group
@end example

Since Tramp cannot know in advance which share directory is intended to use,
this expansion can be applied only when a share directory has been used
already.

The methods @option{adb}, @option{rclone} and @option{sshfs} do not support
home directory expansion at all.  However, @value{tramp} keeps the home
directory in the cache.  Therefore, those methods could be configured to
expand a home directory via a connection property, @xref{Predefined
connection information}.  Example:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{sshfs,user@@randomhost.your.domain,}")
                   "~user" "/home/user"))
@end group
@end lisp

When your remote file name does not contain a @samp{user} part, the
connection property @t{"~"} must be used instead.


@node Remote processes
@section Integration with other Emacs packages
@cindex @code{compile}
@cindex @code{recompile}

@value{tramp} supports starting new running processes on the remote host for
discovering remote file names.  Emacs packages on the remote host need no
specific modifications for @value{tramp}'s use.

This type of integration does not work with the @option{ftp} method, and
does not support the pty association as specified in
@code{start-file-process}.

@code{process-file} and @code{start-file-process} work on the remote host
when the variable @code{default-directory} is remote:

@lisp
@group
(let ((default-directory "/ssh:remote.host:"))
  (start-file-process "grep" (get-buffer-create "*grep*")
                      "/bin/sh" "-c" "grep -e tramp *"))
@end group
@end lisp

@vindex process-file-return-signal-string
For a local process, @code{process-file} returns either the exit code of the
process, or a string describing a signal, when the process has been
interrupted.  Since it cannot be determined reliably whether a remote
process has been interrupted, @code{process-file} will always returns the
exit code for it.  When the user option
@code{process-file-return-signal-string} is non-@code{nil},
@code{process-file} treats all exit codes greater than 128 as an indication
that the process has been interrupted, and returns a corresponding string.

This remote process handling does not apply to @acronym{GVFS}
(@pxref{GVFS-based methods}) because the remote file system is mounted on
the local host and @value{tramp} accesses it by changing the
@code{default-directory}.

@value{tramp} starts a remote process when a command is executed in a remote
file or directory buffer.  As of now, these packages have been integrated to
work with @value{tramp}: @file{shell.el}, @file{eshell.el},
@file{compile.el} (commands like @code{compile} and @code{grep}) and
@file{gud.el} (@code{gdb} or @code{perldb}).

@vindex INSIDE_EMACS@r{, environment variable}
@value{tramp} always modifies the @env{INSIDE_EMACS} environment variable
for remote processes.  By default, this environment variable shows the Emacs
version.  @value{tramp} adds its own version string, so it looks like
@samp{27.2,tramp:2.4.5.1}.  However, other packages might also add their
name to this environment variable, like @samp{27.2,comint,tramp:2.4.5.1}.

For @value{tramp} to find the command on the remote, it must be accessible
through the default search path as setup by @value{tramp} upon first
connection.  Alternatively, use an absolute path or extend
@code{tramp-remote-path} (@pxref{Remote programs}):

@lisp
@group
(add-to-list 'tramp-remote-path "~/bin")
(add-to-list 'tramp-remote-path "/appli/pub/bin")
@end group
@end lisp

@vindex tramp-remote-process-environment
Customize user option @code{tramp-remote-process-environment} to suit the
remote program's environment for the remote host.
@code{tramp-remote-process-environment} is a list of strings structured
similar to @code{process-environment}, where each element is a string of the
form @samp{ENVVARNAME=VALUE}.

To avoid any conflicts with local host environment variables set through
local configuration files, such as @file{~/.profile}, use @samp{ENVVARNAME=}
to unset them for the remote environment.

@noindent
Use @code{add-to-list} to add entries:

@lisp
(add-to-list 'tramp-remote-process-environment "JAVA_HOME=/opt/java")
@end lisp

@vindex HISTORY@r{, environment variable}
Modifying or deleting already existing values in the
@code{tramp-remote-process-environment} list may not be feasible on
restricted remote hosts.  For example, some system administrators disallow
changing @env{HISTORY} environment variable.  To accommodate such
restrictions when using @value{tramp}, fix the
@code{tramp-remote-process-environment} by the following code in the local
@file{.emacs} file:

@lisp
@group
(let ((process-environment tramp-remote-process-environment))
  (setenv "HISTORY" nil)
  (setq tramp-remote-process-environment process-environment))
@end group
@end lisp

@vindex ENV@r{, environment variable}
Setting the @env{ENV} environment variable instructs some shells to read an
initialization file.  By default, @value{tramp} disables this.  You can
override this behavior by evaluating

@lisp
@group
(let ((process-environment tramp-remote-process-environment))
  (setenv "ENV" "$HOME/.profile")
  (setq tramp-remote-process-environment process-environment))
@end group
@end lisp

In addition to @code{tramp-remote-process-environment}, you can set
environment variables for individual remote process calls by let-binding
@code{process-environment}.  @value{tramp} applies any entries not present
in the global default value of @code{process-environment} (overriding
@code{tramp-remote-process-environment} settings, if they conflict).  For
example:

@lisp
@group
(let ((process-environment (cons "HGPLAIN=1" process-environment)))
  (process-file @dots{}))
@end group
@end lisp

@vindex HGPLAIN@r{, environment variable}
Let-binding in this way works regardless of whether the process to be called
is local or remote, since @value{tramp} would add just the @env{HGPLAIN}
setting and local processes would take whole value of
@code{process-environment} along with the new value of @env{HGPLAIN}.

For integrating other Emacs packages so @value{tramp} can execute remotely,
please file a bug report.  @xref{Bug Reports}.


@subsection Running remote programs that create local X11 windows

@vindex DISPLAY@r{, environment variable}
To allow a remote program to create an X11 window on the local host, set the
@env{DISPLAY} environment variable for the remote host as follows in the
local @file{.emacs} file:

@lisp
@group
(add-to-list 'tramp-remote-process-environment
             (format "DISPLAY=%s" (getenv "DISPLAY")))
@end group
@end lisp

@noindent
@code{(getenv "DISPLAY")} should return a recognizable name for the local
host that the remote host can redirect X11 window interactions.  If querying
for a recognizable name is not possible for whatever reason, then replace
@code{(getenv "DISPLAY")} with a hard-coded, fixed name.  Note that using
@code{:0} for X11 display name here will not work as expected.

@vindex ForwardX11@r{, ssh option}
@vindex ForwardX11Trusted@r{, ssh option}
An alternate approach is specify @option{ForwardX11 yes} or
@option{ForwardX11Trusted yes} in @file{~/.ssh/config} on the local host.


@subsection Running @code{shell} on a remote host
@cindex @code{shell}

Set @code{explicit-shell-file-name} to the appropriate shell name when using
@value{tramp} between two hosts with different operating systems, such as
@samp{windows-nt} and @samp{gnu/linux}.  This option ensures the correct
name of the remote shell program.

When @code{explicit-shell-file-name} is equal to @code{nil}, calling
@code{shell} interactively will prompt for a shell name.

You could use connection-local variables for setting different values of
@code{explicit-shell-file-name} for different remote hosts.
@ifinfo
@xref{Connection Variables, , , emacs}.
@end ifinfo

@lisp
@group
(connection-local-set-profile-variables
  'remote-bash
  '((explicit-shell-file-name . "/bin/bash")
    (explicit-bash-args . ("-i"))))
@end group

@group
(connection-local-set-profile-variables
  'remote-ksh
  '((explicit-shell-file-name . "/bin/ksh")
    (explicit-ksh-args . ("-i"))))
@end group

@group
(connection-local-set-profiles
  '(:application tramp :protocol "ssh" :machine "localhost")
  'remote-bash)
@end group

@group
(connection-local-set-profiles
  `(:application tramp :protocol "sudo"
    :user "root" :machine ,(system-name))
  'remote-ksh)
@end group
@end lisp


@subsection Running @code{shell-command} on a remote host
@cindex @code{shell-command}

@code{shell-command} executes commands synchronously or asynchronously on
remote hosts and displays output in buffers on the local host.  Example:

@example
@group
@kbd{C-x C-f @trampfn{sudo,,} @key{RET}}
@kbd{M-& tail -f /var/log/syslog.log @key{RET}}
@end group
@end example

@command{tail} command outputs continuously to the local buffer whose name
is the value of the variable @code{shell-command-buffer-name-async}.

@kbd{M-x auto-revert-tail-mode @key{RET}} runs similarly showing continuous
output.

@vindex shell-file-name
@vindex shell-command-switch
@code{shell-command} uses the user option @code{shell-file-name} and the
variable @code{shell-command-switch} in order to determine which shell to
run.  For remote hosts, their default values are @file{/bin/sh} and
@option{-c}, respectively (except for the @option{adb} method, which uses
@file{/system/bin/sh}).  Like the variables in the previous section, these
variables can be changed via connection-local variables.

@vindex async-shell-command-width
@vindex COLUMNS@r{, environment variable}
If Emacs supports the user option @code{async-shell-command-width} (since
@w{Emacs 27}), @value{tramp} cares about its value for asynchronous shell
commands.  It specifies the number of display columns for command output.
For synchronous shell commands, a similar effect can be achieved by adding
the environment variable @env{COLUMNS} to
@code{tramp-remote-process-environment}.


@subsection Running @code{eshell} on a remote host
@cindex @code{eshell}

@value{tramp} is integrated into @file{eshell.el}, which enables interactive
eshell sessions on remote hosts at the command prompt.  You must add the
module @code{eshell-tramp} to @code{eshell-modules-list}.  Here's a sample
interaction after opening @kbd{M-x eshell @key{RET}} on a remote host:

@example
@group
@b{~ $} cd @trampfn{sudo,,/etc} @key{RET}
@b{@trampfn{sudo,root@@host,/etc} $} hostname @key{RET}
host
@b{@trampfn{sudo,root@@host,/etc} $} id @key{RET}
uid=0(root) gid=0(root) groups=0(root)
@b{@trampfn{sudo,root@@host,/etc} $} find-file shadow @key{RET}
#<buffer shadow>
@b{@trampfn{sudo,root@@host,/etc} $}
@end group
@end example

@code{eshell} added custom @code{su} and @code{sudo} commands that set the
default directory correctly for the @file{*eshell*} buffer.  @value{tramp}
silently updates @code{tramp-default-proxies-alist} with an entry for this
directory (@pxref{Multi-hops}):

@example
@group
@b{~ $} cd @trampfn{ssh,user@@remotehost,/etc} @key{RET}
@b{@trampfn{ssh,user@@remotehost,/etc} $} find-file shadow @key{RET}
File is not readable: @trampfn{ssh,user@@remotehost,/etc/shadow}
@b{@trampfn{ssh,user@@remotehost,/etc} $} sudo find-file shadow @key{RET}
#<buffer shadow>
@end group

@group
@b{@trampfn{ssh,user@@remotehost,/etc} $} su - @key{RET}
@b{@trampfn{su,root@@remotehost,/root} $} id @key{RET}
uid=0(root) gid=0(root) groups=0(root)
@b{@trampfn{su,root@@remotehost,/root} $}
@end group
@end example


@anchor{Running a debugger on a remote host}
@subsection Running a debugger on a remote host
@cindex @file{gud.el}
@cindex @code{gdb}
@cindex @code{perldb}

@file{gud.el} provides a unified interface to symbolic
@ifinfo
debuggers (@pxref{Debuggers, , , emacs}).
@end ifinfo
@ifnotinfo
debuggers.
@end ifnotinfo
@value{tramp} can run debug on remote hosts by calling @code{gdb} with a
remote file name:

@example
@group
@kbd{M-x gdb @key{RET}}
@b{Run gdb (like this):} gdb -i=mi @trampfn{ssh,host,~/myprog} @key{RET}
@end group
@end example

Since the remote @code{gdb} and @code{gdb-inferior} processes do not belong
to the same process group on the remote host, there will be a warning, which
can be ignored:

@example
&"warning: GDB: Failed to set controlling terminal: Operation not permitted\n"
@end example

@noindent
As consequence, there will be restrictions in I/O of the process to be
debugged.

Relative file names are based on the remote default directory.  When
@file{myprog.pl} exists in @file{@trampfn{ssh,host,/home/user}}, valid calls
include:

@example
@group
@kbd{M-x perldb @key{RET}}
@b{Run perldb (like this):} perl -d myprog.pl @key{RET}
@end group
@end example

Just the local part of a remote file name, such as @command{perl -d
/home/user/myprog.pl}, is not possible.

Arguments of the program to be debugged must be literal, can take relative
or absolute paths, but not remote paths.


@subsection Running remote processes on MS Windows hosts
@cindex @command{winexe}
@cindex @command{powershell}

@command{winexe} runs processes on a remote MS Windows host, and
@value{tramp} can use it for @code{process-file} and
@code{start-file-process}.

@code{tramp-smb-winexe-program} specifies the local @command{winexe}
command.  Powershell V2.0 on the remote host is required to run processes
triggered from @value{tramp}.

@code{explicit-shell-file-name} and @code{explicit-*-args} have to be set
properly so @kbd{M-x shell @key{RET}} can open a proper remote shell on a MS
Windows host.  To open @command{cmd}, set it as follows:

@lisp
@group
(setq explicit-shell-file-name "cmd"
      explicit-cmd-args '("/q"))
@end group
@end lisp

@noindent
To open @command{powershell} as a remote shell, use this:

@lisp
@group
(setq explicit-shell-file-name "powershell"
      explicit-powershell-args '("-file" "-"))
@end group
@end lisp


@subsection Remote process connection type
@vindex process-connection-type
@cindex tramp-process-connection-type

Asynchronous processes behave differently based on whether they use a pseudo
tty or not.  This is controlled by the variable
@code{process-connection-type}, which can be @code{t} or @code{pty} (use a
pseudo tty), or @code{nil} or @code{pipe} (don't use one).  @value{tramp} is
based on running shells on the remote host, which requires a pseudo tty.
Therefore, it declares the variable @code{tramp-process-connection-type},
which carries this information for remote processes.  Its default value is
@code{t}, and there is no need to change it.  The name of the remote pseudo
tty is returned by the function @code{process-tty-name}.

If a remote process, started by @code{start-file-process}, should @emph{not}
use a pseudo tty, this can be requested by setting
@code{process-connection-type} to @code{nil} or @code{pipe}.  There is still
a pseudo tty for the started process, but some terminal properties are
changed, like suppressing translation of carriage return characters into
newline.

The function @code{make-process} allows controlling this explicitly by using
the @code{:connection-type} keyword.  If this keyword is not used, the value
of @code{process-connection-type} is applied instead.


@subsection Process properties of asynchronous remote processes
@cindex Asynchronous remote processes

When available, @value{tramp} adds process properties to process objects of
asynchronous properties.  However, it is not guaranteed that all these
properties are set.

@itemize
@item @code{remote-tty}

This is the name of the terminal a @var{process} uses on the remote host,
i.e., it reads and writes on.

@item @code{remote-pid}

The process id of the command executed on the remote host.  This is used
when sending signals remotely.

@item @code{remote-command}

The remote command which has been invoked via @code{make-process} or
@code{start-file-process}, a list of strings (program and its arguments).
This does not show the additional shell sugar @value{tramp} makes around the
commands, in order to see this you must inspect @value{tramp} @ref{Traces
and Profiles, traces}.
@end itemize

@findex list-system-processes
@findex process-attributes
The functions @code{list-system-processes} and @code{process-attributes}
return information about system processes on the respective remote host.  In
order to retrieve this information, they use the command @command{ps},
driven by the following constants:

@defvr Constant tramp-process-attributes-ps-args
This is a list of arguments (strings) @command{ps} is called with.  The
default value is appropriate for GNU/Linux remote hosts.
@end defvr

@defvr Constant tramp-process-attributes-ps-format
This is a list of cons cells @code{(@var{key} . @var{type})} for
interpretation of the @command{ps} output.  @var{key} is a key used in the
@code{process-attributes} output plus the key @code{pid}, and @var{type} is
the respective value returned by @command{ps}.  It can be


@multitable {@bullet{} @code{numberp}} {--- a string of @var{number} width, could contain spaces}
@item @bullet{} @code{numberp} @tab --- a number
@item @bullet{} @code{stringp} @tab --- a string without spaces
@item @bullet{} @var{number}
@tab --- a string of @var{number} width, could contain spaces
@item @bullet{} @code{nil} @tab --- a string until end of line
@end multitable

The default value is appropriate for GNU/Linux remote hosts.
@end defvr

If, for example, @code{tramp-process-attributes-ps-args} is declared as
@code{("-eww" "-o" "pid,euid,euser,egid,egroup,comm:40,state")}, the output
of the respective @command{ps} command would look like

@smallexample
@group
    PID  EUID EUSER     EGID EGROUP   COMMAND                                  S
      1     0 root         0 root     systemd                                  S
   1610     0 root         0 root     NFSv4 callback                           S
   @dots{}
@end group
@end smallexample

The corresponding @code{tramp-process-attributes-ps-format} has the value

@smallexample
@group
@code{((pid . numberp) (euid . numberp) (user . stringp)
 (egid . numberp) (group . stringp) (comm . 40) (state . stringp))}
@end group
@end smallexample

@vindex tramp-adb-connection-local-default-ps-profile
@vindex tramp-adb-connection-local-default-ps-variables
@vindex tramp-connection-local-bsd-ps-profile
@vindex tramp-connection-local-bsd-ps-variables
@vindex tramp-connection-local-busybox-ps-profile
@vindex tramp-connection-local-busybox-ps-variables
@vindex tramp-connection-local-darwin-ps-profile
@vindex tramp-connection-local-darwin-ps-variables
The default values for @code{tramp-process-attributes-ps-args} and
@code{tramp-process-attributes-ps-format} can be overwritten by
connection-local variables.
@ifinfo
@xref{Connection Variables, , , emacs}.
@end ifinfo
This is already done by @value{tramp} for the @option{adb} method, see
@code{tramp-adb-connection-local-default-ps-profile} and
@code{tramp-adb-connection-local-default-ps-variables}.

There are three further predefined sets of connection-local variables for
remote BSD systems, for remote macOS systems, and for a remote @command{ps}
command implemented with @command{busybox}.  These are called
@code{tramp-connection-local-*-ps-profile} and
@code{tramp-connection-local-*-ps-variables}.  Use them like

@lisp
@group
(connection-local-set-profiles
 '(:application tramp :machine "mybsdhost")
 'tramp-connection-local-bsd-ps-profile)
@end group
@end lisp

@cindex proced
@vindex proced-show-remote-processes
If you want to see a listing of remote system processes when calling
@code{proced}, set user option @code{proced-show-remote-processes} to
non-@code{nil}, or invoke that command with a negative argument like
@kbd{C-u - M-x proced @key{RET}} when your buffer has a remote
@code{default-directory}.


@anchor{Improving performance of asynchronous remote processes}
@subsection Improving performance of asynchronous remote processes
@cindex Asynchronous remote processes
@findex make-process
@findex start-file-process

@value{tramp}'s implementation of @code{make-process} and
@code{start-file-process} requires a serious overhead for initialization,
every process invocation.  This is needed for handling interactive dialogues
when connecting the remote host (like providing a password), and initial
environment setup.

Sometimes, this is not needed.  Instead of starting a remote shell and
running the command afterwards, it is sufficient to run the command
directly.  @value{tramp} supports this by an alternative implementation of
@code{make-process} and @code{start-file-process}.  This is triggered by the
connection property @t{"direct-async-process"}, @xref{Predefined connection
information}, which must be set to a non-@code{nil} value.  Example:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@host,}")
                   "direct-async-process" t))
@end group
@end lisp

Using direct asynchronous processes in @value{tramp} is not possible, if the
remote host is connected via multiple hops (@pxref{Multi-hops}).  In this
case, @value{tramp} falls back to its classical implementation.

Furthermore, this approach has the following limitations:

@itemize
@item
It works only for connection methods defined in @file{tramp-adb.el},
@file{tramp-sh.el} and @file{tramp-sshfs.el}.

@item
It does not support interactive user authentication.  With
@option{ssh}-based methods, this can be avoided by using a password agent
like @command{ssh-agent}, using public key authentication, or using
@option{ControlMaster} options.

@item
It cannot be applied for @option{ssh}-based methods, which use the
@option{RemoteCommand} option.

@item
It cannot be killed via @code{interrupt-process}.

@item
It does not report the remote terminal name via @code{process-tty-name}.

@item
It does not set process property @code{remote-pid}.

@item
It does not use @code{tramp-remote-path}.
@end itemize

In order to gain even more performance, it is recommended to bind
@code{tramp-verbose} to 0 when running @code{make-process} or
@code{start-file-process}.  Furthermore, you might set
@code{tramp-use-ssh-controlmaster-options} to @code{nil} in order to bypass
@value{tramp}'s handling of the @option{ControlMaster} options, and use your
own settings in @file{~/.ssh/config}.


@node Cleanup remote connections
@section Cleanup remote connections
@cindex cleanup

@value{tramp} provides several ways to flush remote connections.

@deffn Command tramp-cleanup-connection vec &optional keep-debug keep-password
This command flushes all connection related objects.  @var{vec} is the
internal representation of a remote connection.  When called interactively,
this command lists active remote connections in the minibuffer.  Each
connection is of the format @file{@trampfn{method,user@@host,}}.

Flushing remote connections also cleans the password cache (@pxref{Password
handling}), file cache, connection cache (@pxref{Connection caching}), and
recentf
@ifinfo
cache (@pxref{File Conveniences, , , emacs}).
@end ifinfo
@ifnotinfo
cache.
@end ifnotinfo
It also deletes session timers (@pxref{Predefined connection information})
and connection buffers.

If @var{keep-debug} is non-@code{nil}, the debug buffer is kept.  A
non-@code{nil} @var{keep-password} preserves the password cache.
@end deffn

@deffn Command tramp-cleanup-this-connection
Flushes the current buffer's remote connection objects, the same as in
@code{tramp-cleanup-connection}.
@end deffn

@deffn Command tramp-cleanup-all-connections
Flushes all active remote connection objects, the same as in
@code{tramp-cleanup-connection}.  This command removes also ad-hoc proxy
definitions (@pxref{Ad-hoc multi-hops}).

@end deffn

@deffn Command tramp-cleanup-all-buffers
Just as for @code{tramp-cleanup-all-connections}, all remote connections and
ad-hoc proxy definition are cleaned up in addition to killing all buffers
related to remote connections.
@end deffn


@node Renaming remote files
@section Renaming remote files
@cindex save remote files

Sometimes, it is desirable to safe file contents of buffers visiting a given
remote host.  This could happen for example, if the local host changes its
network integration, and the remote host is not reachable anymore.

@deffn Command tramp-rename-files source target
Replace in all buffers the visiting file name from @var{source} to
@var{target}.  @var{source} is a remote directory name, which could contain
also a localname part.  @var{target} is the directory name @var{source} is
replaced with.  Often, @var{target} is a remote directory name on another
host, but it can also be a local directory name.  If @var{target} has no
local part, the local part from @var{source} is used.

If @var{target} is @code{nil}, it is selected according to the first match
in @code{tramp-default-rename-alist}.  If called interactively, this match
is offered as initial value for selection.

On all buffers, which have a @code{buffer-file-name} matching @var{source},
this name is modified by replacing @var{source} with @var{target}.  This is
applied by calling @code{set-visited-file-name}.  The new
@code{buffer-file-name} is prompted for modification in the minibuffer.  The
buffers are marked modified, and must be saved explicitly.

If user option @code{tramp-confirm-rename-file-names} is @code{nil},
changing the file name happens without confirmation.  This requires a
matching entry in @code{tramp-default-rename-alist}.

Remote buffers related to the remote connection identified by @var{source},
which are not visiting files, or which are visiting files not matching
@var{source}, are not modified.

Interactively, @var{target} is selected from
@code{tramp-default-rename-alist} without confirmation if the prefix
argument is non-@code{nil}.

The remote connection identified by @var{source} is flushed by
@code{tramp-cleanup-connection}.
@end deffn

@deffn Command tramp-rename-these-files target
Replace visiting file names to @var{target}.  The current buffer must be
related to a remote connection.  In all buffers, which are visiting a file
with the same directory name, the buffer file name is changed.

Interactively, @var{target} is selected from
@code{tramp-default-rename-alist} without confirmation if the prefix
argument is non-@code{nil}.
@end deffn

@defopt tramp-default-rename-alist
The default target for renaming remote buffer file names.  This is an alist
of cons cells @code{(source . target)}.  The first matching item specifies
the target to be applied for renaming buffer file names from source via
@code{tramp-rename-files}.  @code{source} is a regular expressions, which
matches a remote file name.  @code{target} must be a directory name, which
could be remote (including remote directories Tramp infers by default, such
as @samp{@trampfn{method,user@@host,}}).

@code{target} can contain the patterns @code{%m}, @code{%u} or @code{%h},
which are replaced by the method name, user name or host name of
@code{source} when calling @code{tramp-rename-files}.

@code{source} could also be a Lisp form, which will be evaluated.  The
result must be a string or @code{nil}, which is interpreted as a regular
expression which always matches.

Example entries:

@lisp
@group
("@trampfn{ssh,badhost,/path/to/dir/}"
 . "@trampfn{ssh,goodhost,/path/to/another/dir/}")
@end group
@end lisp

would trigger renaming of buffer file names on @samp{badhost} to
@samp{goodhost}, including changing the directory name.

@lisp
("@trampfn{ssh,.+\\\\.company\\\\.org,}" @c
. "@value{prefix}ssh@value{postfixhop}multi.hop|@c
ssh@value{postfixhop}%h@value{postfix}")
@end lisp

routes all connections to a host in @samp{company.org} via
@samp{@trampfn{ssh,multi.hop,}}, which might be useful when using Emacs
outside the company network.

@lisp
(nil . "~/saved-files/%m:%u@@%h/")
@end lisp

saves all remote files locally, with a directory name including method name,
user name and host name of the remote connection.
@end defopt

@defopt tramp-confirm-rename-file-names
Whether renaming a buffer file name by @code{tramp-rename-files} or
@code{tramp-rename-these-files} must be confirmed.
@end defopt


@node Archive file names
@section Archive file names
@cindex file archives
@cindex archive file names
@cindex method archive
@cindex archive method

@value{tramp} offers also transparent access to files inside file archives.
This is possible only on hosts which have installed @acronym{GVFS, the GNOME
Virtual File System}, @ref{GVFS-based methods}.  Internally, file archives
are mounted via the @acronym{GVFS} @option{archive} method.

A file archive is a regular file of kind @file{/path/to/dir/file.EXT}.  The
extension @samp{.EXT} identifies the type of the file archive.  To examine
the contents of an archive with Dired, open file name as if it were a
directory (i.e., open @file{/path/to/dir/file.EXT/}).  A file inside a file
archive, called archive file name, has the name
@file{/path/to/dir/file.EXT/dir/file}.

Most of the @ref{Magic File Names, , magic file name operations, elisp}, are
implemented for archive file names, exceptions are all operations which
write into a file archive, and process related operations.  Therefore,
functions like

@lisp
(copy-file "/path/to/dir/file.tar/dir/file" "/somewhere/else")
@end lisp

@noindent
work out of the box.  This is also true for file name completion, and for
libraries like @code{dired} or @code{ediff}, which accept archive file names
as well.

@vindex tramp-archive-suffixes
File archives are identified by the file name extension @samp{.EXT}.  Since
@acronym{GVFS} uses internally the library @code{libarchive(3)}, all
suffixes, which are accepted by this library, work also for archive file
names.  Accepted suffixes are listed in the constant
@code{tramp-archive-suffixes}.  They are

@itemize
@item @samp{.7z} ---
7-Zip archives
@cindex @file{7z} file archive suffix
@cindex file archive suffix @file{7z}

@item @samp{.apk} ---
Android package kits
@cindex @file{apk} file archive suffix
@cindex file archive suffix @file{apk}

@item @samp{.ar} ---
UNIX archiver formats
@cindex @file{ar} file archive suffix
@cindex file archive suffix @file{ar}

@item @samp{.cab}, @samp{.CAB} ---
Microsoft Windows cabinets
@cindex @file{cab} file archive suffix
@cindex @file{CAB} file archive suffix
@cindex file archive suffix @file{cab}
@cindex file archive suffix @file{CAB}

@item @samp{.cpio} ---
CPIO archives
@cindex @file{cpio} file archive suffix
@cindex file archive suffix @file{cpio}

@item @samp{.crate} ---
Cargo (Rust) packages
@cindex @file{crate} file archive suffix
@cindex file archive suffix @file{crate}

@item @samp{.deb} ---
Debian packages
@cindex @file{deb} file archive suffix
@cindex file archive suffix @file{deb}

@item @samp{.depot} ---
HP-UX SD depots
@cindex @file{depot} file archive suffix
@cindex file archive suffix @file{depot}

@item @samp{.epub} ---
Electronic publications
@cindex @file{epub} file archive suffix
@cindex file archive suffix @file{epub}

@item @samp{.exe} ---
Self extracting Microsoft Windows EXE files
@cindex @file{exe} file archive suffix
@cindex file archive suffix @file{exe}

@item @samp{.iso} ---
ISO 9660 images
@cindex @file{iso} file archive suffix
@cindex file archive suffix @file{iso}

@item @samp{.jar} ---
Java archives
@cindex @file{jar} file archive suffix
@cindex file archive suffix @file{jar}

@item @samp{.lzh}, @samp{.LZH} ---
Microsoft Windows compressed LHA archives
@cindex @file{lzh} file archive suffix
@cindex @file{LZH} file archive suffix
@cindex file archive suffix @file{lzh}
@cindex file archive suffix @file{LZH}

@item @samp{.msu}, @samp{.MSU} ---
Microsoft Windows Update packages
@cindex @file{msu} file archive suffix
@cindex @file{MSU} file archive suffix
@cindex file archive suffix @file{msu}
@cindex file archive suffix @file{MSU}

@item @samp{.mtree} ---
BSD mtree format
@cindex @file{mtree} file archive suffix
@cindex file archive suffix @file{mtree}

@item @samp{.odb}, @samp{.odf}, @samp{.odg}, @samp{.odp}, @samp{.ods},
@samp{.odt} --- OpenDocument formats
@cindex @file{odb} file archive suffix
@cindex @file{odf} file archive suffix
@cindex @file{odg} file archive suffix
@cindex @file{odp} file archive suffix
@cindex @file{ods} file archive suffix
@cindex @file{odt} file archive suffix
@cindex file archive suffix @file{odb}
@cindex file archive suffix @file{odf}
@cindex file archive suffix @file{odg}
@cindex file archive suffix @file{odp}
@cindex file archive suffix @file{ods}
@cindex file archive suffix @file{odt}

@item @samp{.pax} ---
Posix archives
@cindex @file{pax} file archive suffix
@cindex file archive suffix @file{pax}

@item @samp{.rar} ---
RAR archives
@cindex @file{rar} file archive suffix
@cindex file archive suffix @file{rar}

@item @samp{.rpm} ---
Red Hat packages
@cindex @file{rpm} file archive suffix
@cindex file archive suffix @file{rpm}

@item @samp{.shar} ---
Shell archives
@cindex @file{shar} file archive suffix
@cindex file archive suffix @file{shar}

@item @samp{.tar}, @samp{.tbz}, @samp{.tgz}, @samp{.tlz}, @samp{.txz},
@samp{.tzst} --- (Compressed) tape archives
@cindex @file{tar} file archive suffix
@cindex @file{tbz} file archive suffix
@cindex @file{tgz} file archive suffix
@cindex @file{tlz} file archive suffix
@cindex @file{txz} file archive suffix
@cindex @file{tzst} file archive suffix
@cindex file archive suffix @file{tar}
@cindex file archive suffix @file{tbz}
@cindex file archive suffix @file{tgz}
@cindex file archive suffix @file{tlz}
@cindex file archive suffix @file{txz}
@cindex file archive suffix @file{tzst}

@item @samp{.warc} ---
Web archives
@cindex @file{warc} file archive suffix
@cindex file archive suffix @file{warc}

@item @samp{.xar} ---
macOS XAR archives
@cindex @file{xar} file archive suffix
@cindex file archive suffix @file{xar}

@item @samp{.xpi} ---
XPInstall Mozilla addons
@cindex @file{xpi} file archive suffix
@cindex file archive suffix @file{xpi}

@item @samp{.xps} ---
Open XML Paper Specification (OpenXPS) documents
@cindex @file{xps} file archive suffix
@cindex file archive suffix @file{xps}

@item @samp{.zip}, @samp{.ZIP} ---
ZIP archives
@cindex @file{zip} file archive suffix
@cindex @file{ZIP} file archive suffix
@cindex file archive suffix @file{zip}
@cindex file archive suffix @file{ZIP}
@end itemize

@vindex tramp-archive-compression-suffixes
File archives could also be compressed, identified by an additional
compression suffix.  Valid compression suffixes are listed in the constant
@code{tramp-archive-compression-suffixes}.  They are @samp{.bz2},
@samp{.gz}, @samp{.lrz}, @samp{.lz}, @samp{.lz4}, @samp{.lzma}, @samp{.lzo},
@samp{.uu}, @samp{.xz}, @samp{.Z}, and @samp{.zst}.  A valid archive file
name would be @file{/path/to/dir/file.tar.gz/dir/file}.  Even several
suffixes in a row are possible, like
@file{/path/to/dir/file.tar.gz.uu/dir/file}.

@vindex tramp-archive-all-gvfs-methods
An archive file name could be a remote file name, as in
@file{/ftp:anonymous@@ftp.gnu.org:/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL}.
Since all file operations are mapped internally to @acronym{GVFS}
operations, remote file names supported by @code{tramp-gvfs} perform better,
because no local copy of the file archive must be downloaded first.  For
example, @samp{/sftp:user@@host:...} performs better than the similar
@samp{/scp:user@@host:...}.  See the constant
@code{tramp-archive-all-gvfs-methods} for a complete list of
@code{tramp-gvfs} supported method names.

If @code{url-handler-mode} is enabled, archives could be visited via URLs,
like @file{https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL}.  This
allows complex file operations like

@lisp
@group
(progn
  (url-handler-mode 1)
  (ediff-directories
   "https://ftp.gnu.org/gnu/tramp/tramp-2.4.4.tar.gz/tramp-2.4.4"
   "https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/tramp-2.4.5" ""))
@end group
@end lisp

It is even possible to access file archives in file archives, as

@lisp
@group
(progn
  (url-handler-mode 1)
  (find-file
   "https://ftp.debian.org/debian/pool/main/c/coreutils/\
coreutils_8.28-1_amd64.deb/control.tar.gz/control"))
@end group
@end lisp

@vindex tramp-archive-enabled
In order to disable file archives, you could add the following form to your
init file:

@lisp
(customize-set-variable 'tramp-archive-enabled nil)
@end lisp


@node Bug Reports
@chapter Reporting Bugs and Problems
@cindex bug reports

@value{tramp}'s development team is actively engaged in solving bugs and
problems and looks to feature requests and suggestions.

@value{tramp}'s mailing list is the place for more advice and information on
working with @value{tramp}, solving problems, discussing, and general
discussions about @value{tramp}.

@value{tramp}'s mailing list is moderated but even non-subscribers can post
for moderator approval.  Sometimes this approval step may take as long as 48
hours due to public holidays.

@email{@value{tramp-bug-report-address}} is the mailing list.  Messages sent
to this address go to all the subscribers.  This is @emph{not} the address
to send subscription requests to.

To subscribe to the mailing list, visit:
@uref{https://lists.gnu.org/mailman/listinfo/tramp-devel/, the @value{tramp}
Mail Subscription Page}.

@ifset installchapter
Before sending a bug report, run the test suite first @ref{Testing}.
@end ifset

@findex tramp-bug
Check if the bug or problem is already addressed in @xref{Frequently Asked
Questions}.

Run @kbd{M-x tramp-bug @key{RET}} to generate a buffer with details of the
system along with the details of the @value{tramp} installation.  Please
include these details with the bug report.

The bug report must describe in as excruciating detail as possible the steps
required to reproduce the problem.  These details must include the setup of
the remote host and any special or unique conditions that exist.

Include a minimal test case that reproduces the problem.  This will help the
development team find the best solution and avoid unrelated detours.

To exclude cache-related problems, flush all caches before running the test,
@ref{Cleanup remote connections}.  Alternatively, and often better for
analysis, reproduce the problem in a clean Emacs session started with
@command{emacs -Q}.  Then, @value{tramp} does not load the persistency file
(@pxref{Connection caching}), and it does not use passwords from
@file{auth-source.el} (@pxref{Password handling}).  The latter does not
happen for the @option{sudoedit} method, otherwise it would be unusable.

If you use the GNU ELPA version of @value{tramp}, you must load it
explicitly, because @command{emacs -Q} ignores installed ELPA packages.
Call (version number adapted)

@example
$ emacs -Q -l ~/.emacs.d/elpa/tramp-2.4.5.1/tramp-autoloads
@end example

When including @value{tramp}'s messages in the bug report, increase the
verbosity level to 6 (@pxref{Traces and Profiles, Traces}) in the
@file{~/.emacs} file before repeating steps to the bug.  Include the
contents of the @file{*tramp/foo*} and @file{*debug tramp/foo*} buffers with
the bug report.  Both buffers could contain non-@acronym{ASCII} characters
which are relevant for analysis, append the buffers as attachments to the
bug report.  This is also needed in order to avoid line breaks during mail
transfer.

If you send the message from Emacs, you are asked about to append these
buffers to the bug report.  If you use an external mail program, you must
save these buffers to files, and append them with that mail program.

@strong{Note} that a verbosity level greater than 6 is not necessary at this
stage.  Also note that a verbosity level of 6 or greater, the contents of
files and directories will be included in the debug buffer.  Passwords typed
in @value{tramp} will never be included there.


@node Frequently Asked Questions
@chapter Frequently Asked Questions
@cindex frequently asked questions
@cindex FAQ

@itemize @bullet
@item
What is the official name - ``Tramp'' or ``@value{tramp}''?

The official name is ``Tramp''.  This is used in comments, docstrings, and
everywhere speaking about @value{tramp}.

However, for historical reasons this is formatted as ``@@sc@{Tramp@}'' in
the @value{tramp} manual.
@ifinfo
@pxref{Smallcaps, , , texinfo}.
@end ifinfo
So it looks different there.


@item
Where is the latest @value{tramp}?

@value{tramp} is available at the GNU URL:

@noindent
@uref{https://ftp.gnu.org/gnu/tramp/}

@noindent
@value{tramp}'s GNU project page is located here:

@noindent
@uref{https://savannah.gnu.org/projects/tramp/}


@item
Which systems does it work on?

The package works successfully on @w{Emacs 26}, @w{Emacs 27}, @w{Emacs 28},
and @w{Emacs 29}.

While Unix and Unix-like systems are the primary remote targets,
@value{tramp} has equal success connecting to other platforms, such as MS
Windows 7/8/10.


@item
How to speed up @value{tramp}?

@value{tramp} does many things in the background, some of which depends on
network speeds, response speeds of remote hosts, and authentication delays.
During these operations, @value{tramp}'s responsiveness slows down.  Some
suggestions within the scope of @value{tramp}'s settings include:

Use an external method, such as @option{scp}, which are faster than internal
methods.

Keep the file @code{tramp-persistency-file-name}, which is where
@value{tramp} caches remote information about hosts and files.  Caching is
enabled by default.  Don't disable it.

@vindex remote-file-name-inhibit-cache
Set @code{remote-file-name-inhibit-cache} to @code{nil} if remote files are
not independently updated outside @value{tramp}'s control.  That cache
cleanup will be necessary if the remote directories or files are updated
independent of @value{tramp}.

Disable version control to avoid delays:

@lisp
@group
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
@end group
@end lisp

If this is too radical, because you want to use version control remotely,
trim @code{vc-handled-backends} to just those you care about, for example:

@lisp
(setq vc-handled-backends '(SVN Git))
@end lisp

Disable excessive traces.  Set @code{tramp-verbose} to 3 or lower, default
being 3.  Increase trace levels temporarily when hunting for bugs.


@item
@value{tramp} がリモート・ホストに接続しません

@value{tramp} がリモート・ホストに接続しない主な理由は 3 つ:

@itemize @minus
@item
プロンプトの不明なキャラクターコード

@value{tramp} は、 正確なパースのために、 リモート・ホスト上で明確に認識できるプロンプトを必要とします。
色付けのためのエスケープ・シーケンスを含むシェル・プロンプトは、 パースの問題を引き起こします。
正規表現を使用してプロンプト検出をカスタマイズするためには @ref{Remote shell setup} を参照してください。

リモート・ホストのプロンプトが認識されているかどうかを確認するには、 @value{tramp} connection buffer
@file{*tramp/foo*} に切り替え、 カーソルをバッファーの先頭に置き、 以下の式を適用します:

@example
@kbd{M-: (re-search-forward (concat tramp-shell-prompt-pattern "$")) @key{RET}}
@end example

カーソルがバッファの一番下にあるプロンプトに移動していない場合、 @value{tramp} はプロンプトを認識できていません。

zsh は左側プロンプト(left-hand side prompt)と右側プロンプト(right-hand side
prompt)を並行して使用するため、 リモート・ホストで zsh を使用する場合は、 zsh ライン・エディタを無効にします。 以下の行を
@file{~/.zshrc} に追加します:

@example
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
@end example

This uses the default value of @code{tramp-terminal-type}, @t{"dumb"}, as
value of the @env{TERM} environment variable.  If you want to use another
value for @env{TERM}, change @code{tramp-terminal-type} and this line
accordingly.

Alternatively, you could set the remote login shell explicitly.  See
@ref{Remote shell setup} for discussion of this technique,

When using fish shell on remote hosts, disable fancy formatting by adding
the following to @file{~/.config/fish/config.fish}:

@example
@group
function fish_prompt
  if test $TERM = "dumb"
     echo "\$ "
  else
     @dots{}
  end
end
@end group
@end example

When using WinSSHD on remote hosts, @value{tramp} does not recognize the
strange prompt settings.

A similar problem exist with the iTerm2 shell integration, which sends
proprietary escape codes when starting a shell.  This can be suppressed by
changing the respective integration snippet in your @file{~/.profile} like
this:

@example
@group
[ $TERM = "dumb" ] || \
test -e "$@{HOME@}/.iterm2_shell_integration.bash" && \
source "$@{HOME@}/.iterm2_shell_integration.bash"
@end group
@end example

And finally, bash's readline should not use key bindings like @samp{C-j} to
commands.  Disable this in your @file{~/.inputrc}:

@example
@group
$if term=dumb
# Don't bind Control-J or it messes up @value{tramp}.
$else
"\C-j": next-history
$endif
@end group
@end example

@item
ログイン後のキャラクター・エコー

@value{tramp} suppresses echos from remote hosts with the @command{stty
-echo} command.  But sometimes it is too late to suppress welcome messages
from the remote host containing harmful control characters.  Using
@option{sshx} or @option{scpx} methods can avoid this problem because they
allocate a pseudo tty.  @xref{Inline methods}.

@item
@value{tramp} が 500 文字を超える文字列の転送を中断する

Set @code{tramp-chunksize} to 500 to get around this problem, which is
related to faulty implementation of @code{process-send-string} on HP-UX,
FreeBSD and Tru64 Unix systems.  Consult the documentation for
@code{tramp-chunksize} to see when this is necessary.

Set @code{file-precious-flag} to @code{t} for files accessed by
@value{tramp} so the file contents are checked using checksum by first
saving to a temporary file.
@ifinfo
@pxref{Saving Buffers, , , elisp}.
@end ifinfo

@lisp
@group
(add-hook
 'find-file-hook
 (lambda ()
   (when (file-remote-p default-directory)
     (set (make-local-variable 'file-precious-flag) t))))
@end group
@end lisp
@end itemize


@item
@value{tramp} fails in a chrooted environment

@vindex tramp-local-host-regexp
When connecting to a local host, @value{tramp} uses some internal
optimizations.  They fail when Emacs runs in a chrooted environment.  In
order to disable those optimizations, set user option
@code{tramp-local-host-regexp} to @code{nil}.


@item
Does @value{tramp} support @acronym{SSH} security keys?

Yes.  @command{OpenSSH} has added support for @acronym{FIDO} hardware
devices via special key types @option{*-sk}.  @value{tramp} supports the
additional handshaking messages for them.  This requires at least
@command{OpenSSH} 8.2, and a @acronym{FIDO} @acronym{U2F} compatible
security key, like yubikey, solokey, or nitrokey.


@item
@value{tramp} does not connect to Samba or MS Windows hosts running SMB1
connection protocol

@vindex tramp-smb-options
Recent versions of @command{smbclient} do not support old connection
protocols by default.  In order to connect to such a host, add a respective
option:

@lisp
(add-to-list 'tramp-smb-options "client min protocol=NT1")
@end lisp

@strong{Note} that using a deprecated connection protocol raises security
problems, you should do it only if absolutely necessary.


@item
File name completion does not work with @value{tramp}

@acronym{ANSI} escape sequences from the remote shell may cause errors in
@value{tramp}'s parsing of remote buffers.

To test if this is the case, open a remote shell and check if the output of
@command{ls} is in color.

To disable @acronym{ANSI} escape sequences from the remote hosts, disable
@samp{--color=yes} or @samp{--color=auto} in the remote host's
@file{.bashrc} or @file{.profile}.  Turn this alias on and off to see if
file name completion works.


@item
File name completion does not work in directories with large number of files

This may be related to globbing, which is the use of shell's ability to
expand wild card specifications, such as @samp{*.c}.  For directories with
large number of files, globbing might exceed the shell's limit on length of
command lines and hang.  @value{tramp} uses globbing.

To test if globbing hangs, open a shell on the remote host and then run
@command{ls -d * ..?* > /dev/null}.

When testing, ensure the remote shell is the same shell (@command{/bin/sh},
@command{ksh} or @command{bash}), that @value{tramp} uses when connecting to
that host.


@item
How to get notified after @value{tramp} completes file transfers?

Make Emacs beep after reading from or writing to the remote host with the
following code in @file{~/.emacs}.

@lisp
@group
(defadvice tramp-handle-write-region
  (after tramp-write-beep-advice activate)
  "Make @value{tramp} beep after writing a file."
  (interactive)
  (beep))
@end group

@group
(defadvice tramp-handle-do-copy-or-rename-file
  (after tramp-copy-beep-advice activate)
  "Make @value{tramp} beep after copying a file."
  (interactive)
  (beep))
@end group

@group
(defadvice tramp-handle-insert-file-contents
  (after tramp-insert-beep-advice activate)
  "Make @value{tramp} beep after inserting a file."
  (interactive)
  (beep))
@end group
@end lisp


@item
How to get a Visual Warning when working with @samp{root} privileges? Host
indication in the mode line?

@cindex @value{tramp} theme
@vindex tramp-theme-face-remapping-alist
Install @file{tramp-theme} from GNU ELPA via Emacs's Package Manager.
Enable it via @kbd{M-x load-theme @key{RET} tramp @key{RET}}.  Further
customization is explained in user option
@code{tramp-theme-face-remapping-alist}.


@item
Remote host does not understand default options for directory listing

Emacs computes the @command{dired} options based on the local host but if
the remote host cannot understand the same @command{ls} command, then set
them with a hook as follows:

@lisp
@group
(add-hook
 'dired-before-readin-hook
 (lambda ()
   (when (file-remote-p default-directory)
     (setq dired-actual-switches "-al"))))
@end group
@end lisp


@item
Why is @file{~/.sh_history} on the remote host growing?

@vindex tramp-histfile-override
@vindex HISTFILE@r{, environment variable}
@vindex HISTFILESIZE@r{, environment variable}
@vindex HISTSIZE@r{, environment variable}
Due to the remote shell saving tilde expansions triggered by @value{tramp},
the history file is probably growing rapidly.  @value{tramp} can suppress
this behavior with the user option @code{tramp-histfile-override}.  When set
to @code{t}, environment variable @env{HISTFILE} is unset, and environment
variables @env{HISTFILESIZE} and @env{HISTSIZE} are set to 0.  Don't use
this with @command{bash} 5.0.0.  There is a bug in @command{bash} which lets
@command{bash} die.

Alternatively, @code{tramp-histfile-override} could be a string.
Environment variable @env{HISTFILE} is set to this file name then.  Be
careful when setting to @file{/dev/null}; this might result in undesired
results when using @command{bash} as remote shell.

Another approach is to disable @value{tramp}'s handling of the
@env{HISTFILE} at all by setting @code{tramp-histfile-override} to
@code{nil}.  In this case, saving history could be turned off by putting
this shell code in @file{.bashrc} or @file{.kshrc}:

@example
@group
if [ -f $HOME/.sh_history ] ; then
   /bin/rm $HOME/.sh_history
fi
if [ "$@{HISTFILE-unset@}" != "unset" ] ; then
   unset HISTFILE
fi
if [ "$@{HISTSIZE-unset@}" != "unset" ] ; then
   unset HISTSIZE
fi
@end group
@end example

For @option{ssh}-based method, add the following line to your
@file{~/.ssh/environment}:

@example
HISTFILE=/dev/null
@end example


@item
Where are remote files trashed to?

Emacs can trash file instead of deleting
@ifinfo
them, @ref{Misc File Ops, Trashing , , emacs}.
@end ifinfo
@ifnotinfo
them.
@end ifnotinfo
Remote files are always trashed to the local trash, except remote encrypted
files (@pxref{Keeping files encrypted}), which are deleted anyway.

If Emacs is configured to use the XDG conventions for the trash directory,
remote files cannot be restored with the respective tools, because those
conventions don't specify remote paths.  Such files must be restored by
moving them manually from @file{$@{XDG_DATA_HOME@}/Trash/files/}, if needed.


@item
How to identify temporary files produced by @value{tramp}?

@vindex tramp-temp-name-prefix
Temporary files are kept in your @code{temporary-file-directory} directory,
which is often @file{/tmp/}.  By default, they have the file name prefix
@t{"tramp."}.  If you want to change this prefix, for example because you
want to identify temporary files produced by @code{file-local-copy} in your
package, you can bind the variable @code{tramp-temp-name-prefix}
temporarily:

@example
@group
(let ((tramp-temp-name-prefix "my-prefix."))
  (file-local-copy "@trampfn{ssh,,.emacs}"))
@result{} "/tmp/my-prefix.HDfgDZ"
@end group
@end example


@item
How to shorten long file names when typing in @value{tramp}?

Adapt several of these approaches to reduce typing.  If the full name is
@file{@trampfn{ssh,news@@news.my.domain,/opt/news/etc}}, then:

@enumerate

@item
Use simplified syntax:

If you always apply the default method (@pxref{Default Method}), you could
use the simplified @value{tramp} syntax (@pxref{Change file name syntax}):

@lisp
@group
(customize-set-variable 'tramp-default-method "ssh")
(tramp-change-syntax 'simplified)
@end group
@end lisp

The reduced typing: @kbd{C-x C-f
@code{@value{prefix}news@@news.my.domain@value{postfix}/opt/news/etc}
@key{RET}}.

@item
Use default values for method name and user name:

You can define default methods and user names for hosts, (@pxref{Default
Method}, @pxref{Default User}):

@lisp
@group
(custom-set-variables
 '(tramp-default-method "ssh")
 '(tramp-default-user "news"))
@end group
@end lisp

The reduced typing: @kbd{C-x C-f @trampfn{-,news.my.domain,/opt/news/etc}
@key{RET}}.

@strong{Note} that there are some useful shortcuts already.  Accessing your
local host as @samp{root} user, is possible just by @kbd{C-x C-f
@trampfn{su,,} @key{RET}}.

@item
Use configuration options of the access method:

Programs used for access methods already offer powerful configurations
(@pxref{Customizing Completion}).  For @option{ssh}, configure the file
@file{~/.ssh/config}:

@example
@group
Host xy
     HostName news.my.domain
     User news
@end group
@end example

The reduced typing: @kbd{C-x C-f @trampfn{ssh,xy,/opt/news/etc} @key{RET}}.

Depending on the number of files in the directories, host names completion
can further reduce key strokes: @kbd{C-x C-f
@value{prefix}ssh@value{postfixhop}x @key{TAB}}.

@item
Use environment variables to expand long strings:

For long file names, set up environment variables that are expanded in the
minibuffer.  Environment variables are set either outside Emacs or inside
Emacs with Lisp:

@lisp
(setenv "xy" "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}")
@end lisp

The reduced typing: @kbd{C-x C-f $xy @key{RET}}.

@strong{Note} that file name cannot be edited here because the environment
variables are not expanded during editing in the minibuffer.

@item Define own keys:

Redefine another key sequence in Emacs for @kbd{C-x C-f}:

@lisp
@group
(global-set-key
 [(control x) (control y)]
 (lambda ()
   (interactive)
   (find-file
    (read-file-name
     "Find @value{tramp} file: "
     "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))))
@end group
@end lisp

Simply typing @kbd{C-x C-y} would prepare minibuffer editing of file name.

See @uref{https://www.emacswiki.org/emacs/TrampMode, the Emacs Wiki} for a
more comprehensive example.

@item
Define own abbreviation (1):

Abbreviation list expansion can be used to reduce typing long file names:

@lisp
@group
(add-to-list 'directory-abbrev-alist
             '("^/xy" . "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))
@end group
@end lisp

The reduced typing: @kbd{C-x C-f /xy @key{RET}}.

@strong{Note} that file name cannot be edited here because the abbreviations
are not expanded during editing in the minibuffer.  Furthermore, the
abbreviation is not expanded during @key{TAB} completion.

@item
Define own abbreviation (2):

The @code{abbrev-mode} gives additional flexibility for editing in the
minibuffer:

@lisp
@group
(define-abbrev-table 'my-tramp-abbrev-table
  '(("xy" "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}")))
@end group

@group
(add-hook
 'minibuffer-setup-hook
 (lambda ()
   (abbrev-mode 1)
   (setq local-abbrev-table my-tramp-abbrev-table)))
@end group

@group
(defadvice minibuffer-complete
  (before my-minibuffer-complete activate)
  (expand-abbrev))
@end group
@end lisp

The reduced typing: @kbd{C-x C-f xy @key{TAB}}.

The minibuffer expands for further editing.

@item Use bookmarks:

Use bookmarks to save @value{tramp} file names.
@ifinfo
@pxref{Bookmarks, , , emacs}.
@end ifinfo

Upon visiting a location with @value{tramp}, save it as a bookmark with
@kbd{@key{menu-bar} @key{edit} @key{bookmarks} @key{set}}.

To revisit that bookmark: @kbd{@key{menu-bar} @key{edit} @key{bookmarks}
@key{jump}}.

@item Use recent files:

@file{recentf} remembers visited places.
@ifinfo
@pxref{File Conveniences, , , emacs}.
@end ifinfo

Keep remote file names in the recent list without have to check for their
accessibility through remote access:

@lisp
(recentf-mode 1)
@end lisp

Reaching recently opened files: @kbd{@key{menu-bar} @key{file} @key{Open
Recent}}.

@item Use filecache:

Since @file{filecache} remembers visited places, add the remote directory to
the cache:

@lisp
@group
(with-eval-after-load 'filecache
  (file-cache-add-directory
    "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))
@end group
@end lisp

Then use directory completion in the minibuffer with @kbd{C-x C-f
C-@key{TAB}}.

@item Use bbdb:

@file{bbdb} has a built-in feature for Ange FTP files, which also works for
@value{tramp} file names.
@ifinfo
@pxref{bbdb-ftp, Storing FTP sites in the BBDB, , bbdb}.
@end ifinfo

Load @file{bbdb} in Emacs:

@lisp
@group
(require 'bbdb)
(bbdb-initialize)
@end group
@end lisp

Create a BBDB entry with @kbd{M-x bbdb-create-ftp-site @key{RET}}.  Then
specify a method and user name where needed.  Examples:

@example
@group
@kbd{M-x bbdb-create-ftp-site @key{RET}}
@b{Ftp Site:} news.my.domain @key{RET}
@b{Ftp Directory:} /opt/news/etc/ @key{RET}
@b{Ftp Username:} ssh@value{postfixhop}news @key{RET}
@b{Company:} @key{RET}
@b{Additional Comments:} @key{RET}
@end group
@end example

In BBDB buffer, access an entry by pressing the key @kbd{F}.

@end enumerate

Thanks to @value{tramp} users for contributing to these recipes.


@item
Why saved multi-hop file names do not work in a new Emacs session?

When saving ad-hoc multi-hop @value{tramp} file names (@pxref{Ad-hoc
multi-hops}) via bookmarks, recent files, filecache, bbdb, or another
package, use the full ad-hoc file name including all hops, like
@file{@trampfn{ssh,bird@@bastion|ssh@value{postfixhop}news.my.domain,/opt/news/etc}}.

Alternatively, when saving abbreviated multi-hop file names
@file{@trampfn{ssh,news@@news.my.domain,/opt/news/etc}}, the user option
@code{tramp-save-ad-hoc-proxies} must be set non-@code{nil} value.


@item
How to connect to a remote Emacs session using @value{tramp}?

Configure Emacs Client
@ifinfo
(@pxref{Emacs Server, , , emacs}).
@end ifinfo

Then on the remote host, start the Emacs Server:

@lisp
@group
(require 'server)
(setq server-host (system-name)
      server-use-tcp t)
(server-start)
@end group
@end lisp

If @code{(system-name)} of the remote host cannot be resolved on the local
host, use IP address instead.

Copy from the remote host the resulting file @file{~/.emacs.d/server/server}
to the local host, to the same location.

Then start Emacs Client from the command line:

@example
$ emacsclient @trampfn{ssh,user@@host,/file/to/edit}
@end example

@code{user} and @code{host} refer to the local host.

To make Emacs Client an editor for other programs, use a wrapper script
@file{emacsclient.sh}:

@example
@group
#!/bin/sh
emacsclient @trampfn{ssh,$(whoami)@@$(hostname --fqdn),$1}
@end group
@end example

@vindex EDITOR@r{, environment variable}
Then change the environment variable @env{EDITOR} to point to the wrapper
script:

@example
$ export EDITOR=/path/to/emacsclient.sh
@end example


@item
How to determine whether a buffer is remote?

The buffer-local variable @code{default-directory} tells this.  If the form
@code{(file-remote-p default-directory)} returns non-@code{nil}, the buffer
is remote.  See the optional arguments of @code{file-remote-p} for
determining details of the remote connection.


@item
How to save files when a remote host isn't reachable anymore?

If the local machine Emacs is running on changes its network integration,
remote hosts could become unreachable.  This happens for example, if the
local machine is moved between your office and your home without restarting
Emacs.

In such cases, the command @code{tramp-rename-files} can be used to alter
remote buffers’ method, host, and/or directory names.  This permits saving
their contents in the same location via another network path, or somewhere
else entirely (including locally).  @pxref{Renaming remote files}.


@item
How to prevent @value{tramp} from clearing the @code{recentf-list}?

When @value{tramp} cleans a connection, it removes the respective remote
file name(s) from @code{recentf-list}.  This is needed, because an
unresponsive remote host could trigger @code{recentf} to connect that host
again and again.

If you find the cleanup disturbing, because the file names in
@code{recentf-list} are precious to you, you could add the following two
forms in your @file{~/.emacs} after loading the @code{tramp} and
@code{recentf} packages:

@lisp
@group
(remove-hook
 'tramp-cleanup-connection-hook
 #'tramp-recentf-cleanup)
@end group
@group
(remove-hook
 'tramp-cleanup-all-connections-hook
 #'tramp-recentf-cleanup-all)
@end group
@end lisp


@item
I get a warning @samp{Tramp has been compiled with Emacs a.b, this is Emacs
c.d}
@item
I get an error @samp{tramp-file-name-handler: Invalid function:
tramp-compat-with-mutex}

@value{tramp} comes with compatibility code for different Emacs versions.
When you see such a message (the text might differ), you don't use the Emacs
built-in version of @value{tramp}, and you must recompile it.  In case you
have installed @value{tramp} from GNU ELPA,
@ifset installchapter
@xref{ELPA Installation}.  Otherwise, @xref{Recompilation}.
@end ifset
@ifclear installchapter
see @uref{@value{trampurl}#ELPA-Installation}.  Otherwise, see
@uref{@value{trampurl}#Recompilation}.
@end ifclear


@item
I get an error @samp{Remote file error: Forbidden reentrant call of Tramp}

@vindex remote-file-error
@vindex debug-ignored-errors
Timers, process filters and sentinels, and other event based functions can
run at any time, when a remote file operation is still running.  This can
cause @value{tramp} to block.  When such a situation is detected, this error
is triggered.  It should be fixed in the respective function (sending an
error report will help), but for the time being you can suppress this error
by the following code in your @file{~/.emacs}:

@lisp
@group
(setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
@end group
@end lisp


@item
I get an error @samp{Remote file error: Not a valid Tramp file name function
`tramp-FOO-file-name-p'}

@value{tramp} has changed the signature of an internal function.  External
packages implementing an own @value{tramp} backend must follow this change.
Please report this problem to the author of that package.

For the running session, @value{tramp} disables the external package, and
you can continue to work.  If you don't want to see this error while
activating @value{tramp}, you can suppress it by the same code as above in
your @file{~/.emacs}:

@lisp
@group
(setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
@end group
@end lisp


@item
How to disable other packages from calling @value{tramp}?

There are packages that call @value{tramp} without the user ever entering a
remote file name.  Even without applying a remote file syntax, some packages
enable @value{tramp} on their own.  How can users disable such features.

@itemize @minus
@item
@file{ido.el}

Disable @value{tramp} file name completion:

@lisp
(customize-set-variable 'ido-enable-tramp-completion nil)
@end lisp

@c Obsolete since Emacs 29.1.
@item
@file{rlogin.el}

Disable remote directory tracking mode:

@lisp
(rlogin-directory-tracking-mode -1)
@end lisp
@end itemize


@item
How to disable @value{tramp}?

@itemize @minus
@item
To keep Ange FTP as default the remote files access package, set this in
@file{.emacs}:

@lisp
(customize-set-variable 'tramp-default-method "ftp")
@end lisp

If you want to enable Ange FTP's syntax, add the following form:

@lisp
(tramp-change-syntax 'simplified)
@end lisp

@item
@vindex tramp-mode
To disable both @value{tramp} (and Ange FTP), set @code{tramp-mode} to
@code{nil} in @file{.emacs}.  @strong{Note}, that we don't use
@code{customize-set-variable}, in order to avoid loading @value{tramp}.

@lisp
(setq tramp-mode nil)
@end lisp

@item
@vindex tramp-ignored-file-name-regexp
To deactivate @value{tramp} for some look-alike remote file names, set
@code{tramp-ignored-file-name-regexp} to a proper regexp in @file{.emacs}.
@strong{Note}, that we don't use @code{customize-set-variable}, in order to
avoid loading @value{tramp}.

@lisp
(setq tramp-ignored-file-name-regexp "\\`/ssh:example\\.com:")
@end lisp

This is needed, if you mount for example a virtual file system on your local
host's root directory as @file{/ssh:example.com:}.

@item
To unload @value{tramp}, type @kbd{M-x tramp-unload-tramp @key{RET}}.
Unloading @value{tramp} resets Ange FTP plugins also.
@end itemize


@item
What is the difference between Ange FTP and @value{tramp}?

The difference is that Ange FTP uses @command{ftp} to transfer files between
the local and the remote host, whereas @value{tramp} uses a combination of
@command{ssh} and @command{scp} or other work-alike programs.
@end itemize


@c For the developer.
@node Files directories and localnames
@chapter How file names, directories and localnames are mangled and managed

@menu
* Localname deconstruction::  Splitting a localname into its component 
                                parts.
* External packages::        Integrating with external Lisp packages.
@end menu


@node Localname deconstruction
@section Splitting a localname into its component parts

@value{tramp} package redefines lisp functions @code{file-name-directory}
and @code{file-name-nondirectory} to accommodate the unique file naming
syntax that @value{tramp} requires.

The replacements dissect the file name, use the original handler for the
localname, take that result, and then re-build the @value{tramp} file name.
By relying on the original handlers for localnames, @value{tramp} benefits
from platform specific hacks to the original handlers.


@node External packages
@section Integrating with external Lisp packages

In general, it is not recommended to use @value{tramp} functions and
variables not described in this manual.  They might change their signature
and/or semantics without any announcement.


@subsection File name completion

@vindex non-essential
Sometimes, it is not convenient to open a new connection to a remote host,
including entering the password and alike.  For example, this is nasty for
packages providing file name completion.  Such a package could signal to
@value{tramp}, that they don't want it to establish a new connection.  Use
the variable @code{non-essential} temporarily and bind it to non-@code{nil}
value.

@lisp
@group
(let ((non-essential t))
  @dots{})
@end group
@end lisp


@subsection File attributes cache

@vindex process-file-side-effects
Keeping a local cache of remote file attributes in sync with the remote host
is a time-consuming operation.  Flushing and re-querying these attributes
can tax @value{tramp} to a grinding halt on busy remote hosts.

To get around these types of slow-downs in @value{tramp}'s responsiveness,
set the @code{process-file-side-effects} to @code{nil} to stop @value{tramp}
from flushing the cache.  This is helpful in situations where callers to
@code{process-file} know there are no file attribute changes.  The let-bind
form to accomplish this:

@lisp
@group
(let (process-file-side-effects)
  @dots{})
@end group
@end lisp

For asynchronous processes, @value{tramp} uses a process sentinel to flush
file attributes cache.  When callers to @code{start-file-process} know
beforehand no file attribute changes are expected, then the process sentinel
should be set to the default state.  In cases where the caller defines its
own process sentinel, @value{tramp}'s process sentinel is overwritten.  The
caller can still flush the file attributes cache in its process sentinel
with this code:

@lisp
@group
(unless (memq (process-status proc) '(run open))
  (dired-uncache remote-directory))
@end group
@end lisp

Since @value{tramp} traverses subdirectories starting with the root
directory, it is most likely sufficient to make the @code{default-directory}
of the process buffer as the root directory.


@subsection Timers

@vindex remote-file-error
Timers run asynchronously at any time when Emacs is waiting for sending a
string to a process, or waiting for process output.  They can run any remote
file operation, which would conflict with the already running remote file
operation, if the same connection is affected.  @value{tramp} detects this
situation, and raises the @code{remote-file-error} error.  A timer function
should avoid this situation.  As a minimum, it should protect itself against
this error, by wrapping the timer function body as follows:

@lisp
@group
(ignore-error 'remote-file-error
  @dots{})
@end group
@end lisp


@node Traces and Profiles
@chapter How to Customize Traces
@vindex tramp-verbose
@vindex tramp-debug-to-file

@value{tramp} messages are raised with verbosity levels ranging from 0 to
10.  @value{tramp} does not display all messages; only those with a
verbosity level less than or equal to @code{tramp-verbose}.

The verbosity levels are

          @w{ 0} silent (no @value{tramp} messages at all)  @*@indent @w{ 1} errors
@*@indent @w{ 2} warnings @*@indent @w{ 3} connection to remote hosts
(default verbosity)  @*@indent @w{ 4} activities @*@indent @w{ 5} internal
@*@indent @w{ 6} sent and received strings @*@indent @w{ 7} connection
properties @*@indent @w{ 8} file caching @*@indent @w{ 9} test commands
@*@indent @w{10} traces (huge)  @*@indent @w{11} call traces (maintainer
only)

With @code{tramp-verbose} greater than or equal to 4, messages are also
written to a @value{tramp} debug buffer.  Such debug buffers are essential
to bug and problem analyzes.  For @value{tramp} bug reports, set the
@code{tramp-verbose} level to 6 (@pxref{Bug Reports}).

The debug buffer is in
@ifinfo
@ref{Outline Mode, , , emacs}.
@end ifinfo
@ifnotinfo
Outline Mode.
@end ifnotinfo
In this buffer, messages can be filtered by their level.  To see messages up
to verbosity level 5, enter @kbd{C-u 6 C-c C-q}.
@ifinfo
Other navigation keys are described in @ref{Outline Visibility, , , emacs}.
@end ifinfo

@value{tramp} handles errors internally.  Hence, to get a Lisp backtrace,
the following settings are required:

@lisp
@group
(setq debug-on-error t
      debug-on-signal t)
@end group
@end lisp

If @code{tramp-verbose} is greater than or equal to 10, Lisp backtraces are
also added to the @value{tramp} debug buffer in case of errors.

In very rare cases it could happen, that @value{tramp} blocks Emacs.
Killing Emacs does not allow inspecting the debug buffer.  In that case, you
can instruct @value{tramp} to mirror the debug buffer to a file:

@lisp
(customize-set-variable 'tramp-debug-to-file t)
@end lisp

The debug buffer is written as a file in your
@code{temporary-file-directory}, which is usually @file{/tmp/}.  Use this
option with care, because it could decrease the performance of @value{tramp}
actions.

If @code{tramp-verbose} is greater than or equal to 11, @value{tramp}
function call traces are written to the buffer @file{*trace-output*}.


@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi


@node Function Index
@unnumbered Function Index
@printindex fn


@node Variable Index
@unnumbered Variable Index
@printindex vr


@node Concept Index
@unnumbered Concept Index
@printindex cp

@bye

@c TODO
@c
@c * Say something about the .login and .profile files of the remote
@c   shells.
@c
@c * Explain how tramp.el works in principle: open a shell on a remote
@c   host and then send commands to it.
@c
@c * Consistent small or capitalized words especially in menus.
