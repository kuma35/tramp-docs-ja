This is tramp, produced by makeinfo version 6.7 from tramp.texi.

Copyright © 1999–2022 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual”, and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
INFO-DIR-SECTION Emacs network features
START-INFO-DIR-ENTRY
* Tramp: (tramp).            Transparent Remote Access, Multiple Protocol
                               Emacs remote file access via ssh and scp.
END-INFO-DIR-ENTRY


File: tramp,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

TRAMP 2.6.0-pre User Manual
***************************

このファイルは、Emacs 用のリモートファイル編集パッケージである
TRAMP 2.6.0-pre について説明しています。

   TRAMP は、 “Transparent Remote (file) Access, Multiple Protocol” の略
です。 このパッケージは、あたかもローカルファイルであるかのように、リモ
ートファイルを透過的に編集するための簡単で便利な一貫したインターフェイス
を提供します。 これは、編集、バージョン管理、 ‘dired’ などにまで及びます
。

   このドキュメントの最新バージョンは、ウェブ上の
<https://www.gnu.org/software/tramp/> で見つけることができます。

   TRAMP のメーリングリストは、 <tramp-devel@gnu.org> で利用でき、 the
TRAMP Mail Archive (https://lists.gnu.org/r/tramp-devel/) でアーカイブさ
れています。

   Copyright © 1999–2022 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual”, and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License”.

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

* Menu:

* Overview::                 TRAMP が出来る事と
                               出来無い事。

エンドユーザー向け:



* TRAMP の取得::  TRAMP の取得方法。
* Installation:: Installing TRAMP with your Emacs.
* Quick Start Guide::        Short introduction how to use TRAMP.
* Configuration::            Configuring TRAMP for use.
* Usage::                    An overview of the operation of TRAMP.
* Bug Reports::              Reporting Bugs and Problems.
* Frequently Asked Questions::  Questions and answers from the mailing list.

開発者向け:



* Files directories and localnames::  How file names, directories and
                                        localnames are mangled and managed.
* Traces and Profiles::      How to Customize Traces.

* GNU Free Documentation License::  The license for this documentation.
* Function Index::           TRAMP functions.
* Variable Index::           User options and variables.
* Concept Index::            An item for each concept.

 — The Detailed Node Listing —


Installing TRAMP with your Emacs

* System Requirements:: TRAMP インストールの前提条件。
* Basic Installation:: Installation steps.
* Installation parameters:: インストールを制御するためのパラメータ。
* Testing:: A test suite for TRAMP.
* Load paths:: How to plug-in TRAMP into your environment.


Configuring TRAMP for use



* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       GVFS-based external methods.
* FUSE-based methods::       FUSE-based external methods.
* Default Method::           Selecting a default method.
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related
                                         information.
* Remote programs::          How TRAMP finds and uses programs on
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               FUSE setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.

Using TRAMP



* File name syntax::         TRAMP file name conventions.
* Change file name syntax:: Alternative file name syntax.
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding ‘~’ to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.

How file names, directories and localnames are mangled and managed



* Localname deconstruction::  Breaking a localname into its components.
* External packages::        Integration with external Lisp packages.



File: tramp,  Node: Overview,  Next: TRAMP の取得,  Up: Top

1 An overview of TRAMP
**********************

TRAMP は、Emacs内からリモートファイルに透過的にアクセスするためのもので
す。 TRAMP は、あたかもローカルファイルであるかのように、リモートファイ
ルへの簡単で便利な一貫したインターフェイスを有効にします。 TRAMP の透過
性は、編集やバージョン管理や ‘dired’ にまで及びます。

   TRAMP は、‘ssh’ や ‘scp’ や ‘telnet’ や それらの関連プログラムなどの
ような、 あまたのアクセス方式(access method)を使用してリモート・ホストに
アクセスできます。 これらのプログラムに ASCII 文字を正常に渡すことができ
る場合、 TRAMP はそれらを使用できます。 TRAMP は、 8ビット・クリーンな接
続を必要とせず、強制しません。

   TRAMP の最も一般的なアクセス方式(access method)は、 ‘ssh’ によるもの
です。これは、 ‘ftp’ やその他の古いアクセス方式に代わる、より安全な方式
です。

   MS Windows オペレーティングシステムの TRAMP は PuTTY パッケージと統合
され、‘plink’ プログラムを使用します。

   TRAMP は、ほとんどの場合、接続プログラムを使用してバックグラウンドで
透過的に動作します。 これらのプログラムがリモートログインを有効にし、タ
ーミナルを使用できる限り、TRAMP はそれらをシームレスで透過的なアクセスに
適応させることができます。

   TRAMP は、リモートファイルの内容をローカルホストの編集および関連操作
のために一時的に転送します。 TRAMP は、標準の Emacsインターフェイスを使
用してホスト間でファイルを転送することもできます。これは、Emacs に TRAMP
を直接統合する利点です。

   TRAMP は、 ‘rcp’ または ‘scp’ または ‘rsync’ または (MS Windows では)
‘pscp’ など、リモートファイル用に利用可能な、あまたのホストプログラムを
使用してファイルを転送できます。 TRAMP は、これらのプログラムを指定し、
特定のファイル、ホスト、またはアクセス方式(access method)に合わせてカス
タマイズする簡単な方法を提供します。

   小さいサイズのファイル転送を高速化するために、TRAMP は ‘mimencode’ ま
たは ‘uuencode’ を使用して、シェルを介して直接エンコードされた転送をサポ
ートします (そのようなツールがリモートホストで利用可能である場合)。

TRAMP behind the scenes
.......................

TRAMP を介してリモートファイルにアクセスするには、一連のアクションが必要
であり、その多くはユーザーに対して透過的です。 ただし、一部のアクション
ではユーザーの応答が必要になる場合があります(パスワードの入力やファイル
名の入力など)。 ここでは、関連する手順を説明するために、リモートホストで
ファイルを開く、ある典型的なシナリオを示します。

   ‘C-x C-f’ でファイル検索を開始し、 TRAMP ファイル名の一部を入力してか
ら、 ‘<TAB>’ を押して完了します。 そのホストに初めて接続する場合は、以下
のようになります:

   • TRAMP は ‘telnet HOST’ または ‘ssh -l USER HOST’ を呼び出し、外部プ
     ロセスを確立してリモートホストに接続します。 TRAMP は、リモートホス
     トからの出力も表示する Emacs バッファーを介してプロセスと通信します
     。

   • リモートホストは、バッファ内でログイン名((たとえば、 ‘telnet’ のた
     めに)を要求する場合があります。 一方、ログイン名がファイル名部分に
     含まれていた場合、TRAMP はログイン名に続いて改行(newline)を送信しま
     す。

   • 次に、リモートホストはパスワードまたはパスフレーズ (‘ssh’ または
     ‘telnet’ の場合) を要求する場合があります。 TRAMP は、ミニバッファ
     ーにパスワードプロンプトを表示しユーザーに入力を促します。 そして
     TRAMP は、ユーザーから入力された内容をリモートホストに送信し、その
     後に改行(newline)を続けます。

   • TRAMP は、今や、シェルプロンプト または 失敗したログインメッセージ
     のいずれかを待機しています。

     TRAMP がタイムアウト期間(たとえば 1 分)以内にメッセージを受信しない
     場合、TRAMP はリモートシェルプロンプトが見つからないというエラーメ
     ッセージで応答します。 リモートホストからのメッセージがある場合、
     TRAMP はそれらをバッファに表示します。

     リモートホストからの ‘login failed’ メッセージに対して、TRAMP はロ
     グイン試行を中止(abort)し、ログイン手順を再度開始します。

   • ログインの成功時、TRAMP がリモートホストからのシェルプロンプトを認
     識した場合、TRAMP は、エコーをオフにし、シェルプロンプトを設定し、
     その他の雑事を行ってシェル環境を準備します。

     *注意* リモートシェルの場合、 TRAMP は ‘/bin/sh’ を呼び出します。 リ
     モートホストは ‘exec /bin/sh’ を認識し、適切なシェルを実行する必要
     があります。 このシェルは、 Bourne シェル構文をサポートする必要があ
     ります。

   • TRAMP は ‘cd’ と ‘ls’ コマンドを実行して、 リモート・ホストに存在す
     るファイルを見つけます。 TRAMP はしばしばグロブ(glob)するために
     ‘echo’ を使用します。 TRAMP は、 ファイルまたはディレクトリが
     ‘test’ コマンドで書き込み可能かどうかをチェックします。 各コマンド
     実行後、 TRAMP は次の操作を完了させるためにリモート・ホストからの出
     力をパースします。

   • リモート・ファイル名の補完後、 TRAMP はファイルの内容をリモート・ホ
     ストから転送します。

     インライン転送(inline transfers)の場合、 TRAMP は ‘mimencode -b
     /path/to/remote/file’ などのコマンドを送信し、 出力がバッファに蓄積
     されるまで待機してから、 その出力をデコードしてファイルの内容を生成
     します。

     外部転送(external transfers)の場合、 TRAMP は以下のようにコマンドを
     送信します:
          $ rcp user@host:/path/to/remote/file /tmp/tramp.4711
     TRAMP は ローカルの一時ファイル(the local temporary file)
     ‘/tmp/tramp.4711’ をバッファに読み込み、 それから一時ファイル(the
     temporary file)を削除します。

   • 通常どおりバッファの内容を編集、変更、変更し、 ‘C-x C-s’ でバッファ
     を保存します。

   • TRAMP は、 適切なインライン(inline)または外部(external)プログラムを
     使用して、 リモート・ホストからの読み込みとは逆のプロセスでバッファ
     の内容をリモート・ホストに転送します。

   これで、 TRAMP でファイルを開いたときに舞台裏で何が起こっているのか、
基本的な概要を理解していただけたかと思います。


File: tramp,  Node: TRAMP の取得,  Next: Installation,  Prev: Overview,  Up: Top

2 TRAMP の取得
**************

TRAMP は (Emacs 22.1 以降) Emacs の一部として含まれています。

   TRAMP は、 インターネット上の <https://ftp.gnu.org/gnu/tramp/> からダ
ウンロードできるように自由にパッケージ化されています。 TRAMP のバージョ
ン番号は、 変数 ‘tramp-version’ で取得できます。 リリースされた TRAMP バ
ージョンでは、 バージョン番号は “2.4.5” のような 3 つの数字の文字列です
。

   Emacs にパッケージ化された TRAMP リリースは、 対応するスタンドアロー
ン・リリースとは若干異なる場合があります。 これは、 Emacs と TRAMP の間
でリリース日を常に同期できるとは限らないためです。 そのようなバージョン
番号には、“2.4.5.27.2” のように Emacs のバージョン番号が接尾辞として付き
ます。 これは、 TRAMP 2.4.5 が Emacs 27.2 に統合されたことを意味します。
Emacs にパッケージ化された TRAMP バージョンの完全なリストは以下で得られ
ます。

     (assoc 'Tramp customize-package-emacs-version-alist)

   TRAMP は GNU ELPA (https://elpa.gnu.org) パッケージとしても利用できま
す。 スタンドアロン・リリースに加えて、 TRAMP の次のリリースが現れるまで
、 TRAMP のさらなるマイナー・バージョンが GNU ELPA に現れるでしょう。 こ
れらのマイナー・バージョンには、 “2.4.5.1” のような 4 つの数字の文字列が
あります。

   TRAMP 開発バージョンは Git サーバーで利用できます。 開発バージョンに
は、 新しい機能や不完全な機能が含まれています。 TRAMP の開発バージョンは
、 常に次回のリリースのバージョン番号に、 “2.4.4-pre” のように接尾辞
“-pre” を加えたものです。

   Git サーバーから TRAMP を取得する 1 つの方法は、 以下の URL の
Savannah プロジェクト・ページにアクセスし、 上部のナビゲーション・バーに
ある Git リンクをクリックすることです。

<https://savannah.gnu.org/projects/tramp/>

別の方法として、以下のようにターミナルに打ち込みます:

     $ cd ~/emacs
     $ git clone git://git.savannah.gnu.org/tramp.git

プロキシ経由で取得する:

     $ git config --global http.proxy http://user:pwd@proxy.server.com:8080
     $ git clone https://git.savannah.gnu.org/r/tramp.git

TRAMP 開発者の場合:

     $ git clone login@git.sv.gnu.org:/srv/git/tramp.git

上記のいずれかの実行後、 ‘~/emacs/tramp’ には TRAMP の最新バージョンが含
まれています。

リポジトリから更新を取得するには、 ‘git pull’ を使用します。

     $ cd ~/emacs/tramp
     $ git pull

以下のように ‘autoconf’ を実行して、 最新の ‘configure’ スクリプトを生成
します:

     $ cd ~/emacs/tramp
     $ autoconf


File: tramp,  Node: Installation,  Next: Quick Start Guide,  Prev: TRAMP の取得,  Up: Top

3 Installing TRAMP into Emacs
*****************************

TRAMP は、 バージョン 22 以降は Emacs の一部になりました。 あなたが
Emacs に付属のバージョン、 または GNU ELPA のバージョンを使用する場合、
以下の情報は必要ありません。

* Menu:

* System Requirements::
* Basic Installation::
* Installation parameters::
* Recompilation::
* Testing::
* Load paths::
* ELPA Installation::


File: tramp,  Node: System Requirements,  Next: Basic Installation,  Up: Installation

3.1 System Requirements
=======================

インストールには、 少なくとも以下のプログラム・バージョンが必要です:

   • GNU Emacs 26.1
   • ソースを Git から取得した場合、 GNU Autoconf 2.50
   • GNU make 3.76
   • GNU texinfo 4.6

   MS Windows では、 インストールに Posix プログラムが必要です。 上記や
、その他の便利な Posix ユーティリティは、 以下のいくつかのプロジェクトの
1 つから入手できます:

   • <http://www.mingw.org/msys.shtml>  ( MSYS )
   • <http://www.cygwin.com/>           ( Cygwin )
   • <http://unxutils.sourceforge.net/> ( UnxUtils )
   • <http://gnuwin32.sourceforge.net/> ( GnuWin32 )


File: tramp,  Node: Basic Installation,  Next: Installation parameters,  Prev: System Requirements,  Up: Installation

3.2 Basic Installation
======================

TRAMP を Emacs にインストールするのは、 少なくともあなたのマシンをゼロか
ら再構築する場合と比較して、 比較的簡単なプロセスです。 ;)

   真面目な話、 インストールはかなり簡単なはずです。 最も簡単な方法は、
以下の通りです:

   • ‘~/emacs/’ などのディレクトリを選択します。 そのディレクトリに移動
     し、 tarball を解凍します。 これにより、 Lisp コード用のサブディレ
     クトリ ‘lisp’ と、 ドキュメント用の ‘texi’ と、 TRAMP のテスト・ス
     イートを実行するコード用の ‘test’ を含むディレクトリ
     ‘~/emacs/tramp-2.6.0-pre/’ が得られます。 以下のシンボリック・リン
     クを作成してください:

          $ ln -s tramp-2.6.0-pre tramp

   • ‘cd’ で ‘~/emacs/tramp/’ に入ります。 Git ソースから TRAMP を取得し
     た場合は、 最新の ‘configure’ スクリプトを取得するために ‘autoconf’
     と入力してください。 これは、Git から TRAMP をクローンした後に 1 回
     だけ行う必要があります。

   • ‘./configure’ と入力して、 あなたのシステムのための TRAMP を設定し
     ます。

     ‘configure’ の実行には時間がかかります。 実行中に、 チェックしてい
     る機能を示すいくつかのメッセージを出力します。

   • ‘make’ と入力して、 バイトコンパイルされた Lisp ファイルと Info マ
     ニュアルをビルドします。

   • ‘make install’ と入力して、TRAMP Lisp ファイルと Info マニュアルを
     インストールします。

   • ‘make clean’ と入力することで、 バイトコンパイルされた Lisp ファイ
     ルと Info マニュアルをソース・ディレクトリから削除できます。
     ‘configure’ が作成したファイルも削除するには、 代わりに ‘make
     distclean’ と入力します。

   • 注意: ‘make’ コマンドの例を実行する際に問題が発生した場合でも、 絶
     望しないでください。 ‘~/emacs/tramp/lisp’ で ‘dired’ (‘C-x d’) モー
     ドで Emacs を開くことにより、 ‘*.el’ ファイルをバイトコンパイルする
     ことができます。 Lisp ファイルを ‘m’ でマークしてから、 ‘B’ を押し
     てあなたが選択したものをバイトコンパイルします。

     Info マニュアルの作成に問題があった場合も同様のことができます。 デ
     ィレクトリ ‘~/emacs/tramp/texi’ に移動し、 ‘tramp.texi’ ファイルを
     Emacs にロードするだけです。 それから ‘M-x texinfo-format-buffer
     <RET>’ を押して ‘~/emacs/tramp/info/tramp’ を生成します。


File: tramp,  Node: Installation parameters,  Next: Recompilation,  Prev: Basic Installation,  Up: Installation

3.3 インストールを制御するためのパラメータ
==========================================

デフォルトでは、 ‘make install’ は TRAMP のファイルを
‘/usr/local/share/emacs/site-lisp’ と ‘/usr/local/share/info’ にインスト
ールします。 ‘configure’ にオプション ‘--prefix=PATH’ を与えることで、
‘/usr/local’ 以外のインストール・プレフィックスを指定できます。
GNU/Linux システムでは、以下を適用すると便利であると報告されています。

     $ ./configure --prefix=/usr

   インストールされた Emacs のコピーが ‘emacs’ 以外の名前である場合、
TRAMP ソースを正しくバイトコンパイルできるように、‘make’ にそれを見つけ
る場所を伝える必要があります。

   たとえば、 呼び出される Emacs コマンドを渡すには:

     $ ./configure --with-emacs=emacs26

   あなたがコマンドの絶対パスを指定する場合、 空白(whitespace)を含めるこ
とはできません。 あなたが必要な場合、 ‘PATH’ 環境変数に対応するパスを追
記してください。

   また、 ‘configure’ への ‘--prefix=PATH’ オプションでは、 あなたが必要
なパスの設定を網羅できてないかもしれません。 網羅できてない場合、 あなた
は Lisp や Info ファイルをインストールするディレクトリを宣言できます。

   たとえば、 Lisp ファイルを ‘$HOME/elisp’ に配置し、 Info ファイルを
‘$HOME/info’ に配置するには、以下のようにします:

     $ ./configure --with-lispdir=$HOME/elisp --infodir=$HOME/info

   MS Windows では、 Emacs が ‘C:/Program Files/Emacs’ にインストールさ
れている場合、 以下を適用する必要があります:

     $ ./configure \
         --with-lispdir='C:/Program Files/Emacs/share/emacs/site-lisp' \
         --infodir='C:/Program Files/Emacs/share/info'

   ‘make’ は、 段階的なインストール(staged installation)のための
‘DESTDIR’ 環境変数をサポートしています。 *note (standards)Command
Variables:::

     $ make DESTDIR=/tmp install

   ‘configure’ を実行すると、 エラーまたは警告が発生する場合があります。
出力には、何が問題なのかが詳細に説明されています。

   エラーが発生した場合は、 続行する前に修正する必要があります。 これは
、 ‘emacs’ または Emacs パッケージ または ‘make’ または ‘makeinfo’ の、
欠落または間違ったバージョン、である可能性があります。

   警告によって ‘configure’ (およびインストールプロセス全体) は続行され
ますが、 TRAMP の一部はインストールされません。 これは、 ‘texi2dvi’ また
は ‘install-info’ が見つからないか間違ったバージョンの場合に発生する可能
性があります。 ここで、 あなたは関連する機能(印刷出力用の ‘tramp.dvi’ フ
ァイル、 Info の ‘dir’ ファイル内の TRAMP エントリ)を放棄するか、 または
‘PATH’ 環境変数を調整して ‘configure’ を再実行するかを自分で決めることが
できます。 その代わりに、 見逃した部分を後で手動で呼び出すこともできます
。


File: tramp,  Node: Recompilation,  Next: Testing,  Prev: Installation parameters,  Up: Installation

3.4 Emacsのバージョンが変わった時の再コンパイル
===============================================

TRAMP には、 異なる Emacs バージョン用の互換コードが付属しています。
Emacs のメジャー・バージョンをアップグレードする場合、 少なくとも TRAMP
Lisp ファイルを再コンパイルしなければなりません。 あなたは以下の手順を適
用する必要があります:

   • コンパイルに使用する Emacs のバージョンが変更されている場合は、 再
     構成します。

          $ ./configure --with-emacs=emacs26

   • すべての Lisp ファイルを再コンパイルします。

          $ make -C lisp distclean all

   • TRAMP をインストールします。

          $ make install

   あなたが TRAMP を GNU ELPA パッケージとしてインストールしている場合は
、 コマンド ‘M-xtramp-recompile-elpa <RET>’ を使用して、 実行中の Emacs
バージョンで再コンパイルできます。


File: tramp,  Node: Testing,  Next: Load paths,  Prev: Recompilation,  Up: Installation

3.5 TRAMP のテスト・スイート
============================

TRAMP には、 独自のテスト・スイートが付属しています。 このテスト・スイー
トを実行するには、 以下のように呼び出します

     $ make check

   このテスト・スイートは、 テストにモックアップ接続メソッド(mock-up
connection method)を使用します。 つまり、 実際の接続は確立されず、 テス
トにパスワードは必要ありません。 環境変数
‘REMOTE_TEMPORARY_FILE_DIRECTORY’ を微調整することで、 このデフォルトの
振る舞いを変更できます。

     $ env REMOTE_TEMPORARY_FILE_DIRECTORY=/sudo::/tmp make check

   MS Windows を使用している場合、 モックアップのトリックは機能せず、 デ
フォルトを変更する必要があります。

   テスト・スイートの実行方法の詳細については、 ‘test/README’ ファイルを
参照してください。

   そのテスト・スイートであなたがカバーできなかったエラーがある場合は、
*note bug report: Bug Reports. を送ってください。


File: tramp,  Node: Load paths,  Next: ELPA Installation,  Prev: Testing,  Up: Installation

3.6 TRAMP をあなたの環境にプラグインする方法
============================================

TRAMP を目的のディレクトリにインストールせず、 ソース・ディレクトリから
使用する場合は、 以下の行を ‘.emacs’ に追加する必要があります:

     (add-to-list 'load-path "~/emacs/tramp/lisp/")
     (require 'tramp)

   環境変数 ‘INFOPATH’ が設定されている場合は、 ディレクトリ
‘~/emacs/tramp/info/’ をそれに追加します。 それ以外の場合は、 以下のよう
にディレクトリを ‘Info-directory-list’ に追加します:

     (add-to-list 'Info-directory-list "~/emacs/tramp/info/")


File: tramp,  Node: ELPA Installation,  Prev: Load paths,  Up: Installation

3.7 Installing TRAMP via GNU ELPA
=================================

Tramp は、 実行している Emacs バージョン用にコンパイルする必要があります
。 Tramp パッケージの互換性エラー・メッセージが表示された場合、 または
Tramp がインストールされているバージョンとは別の主要な Emacs バージョン
を使用している場合は、 パッケージを再コンパイルする必要があります:

   • バイトコンパイルされた Tramp のファイル全てを削除

          $ rm -f ~/.emacs.d/elpa/tramp-2.6.0-pre/tramp*.elc

   • Tramp のソースファイルを指定して Emacs を起動

          $ emacs -L ~/.emacs.d/elpa/tramp-2.6.0-pre -l tramp

     ここでエラーが発生してはいけません。

   • (実行中の Emacs インスタンスで) Tramp パッケージを再コンパイル

          M-x tramp-recompile-elpa

     その後、 Emacs を再起動する必要があります。


File: tramp,  Node: Quick Start Guide,  Next: Configuration,  Prev: Installation,  Up: Top

4 Short introduction how to use TRAMP
*************************************

TRAMP は、 リモート・コンポーネントを追加することにより、 Emacs ファイル
名の構文を拡張します。 リモート・ファイル名は常に
‘/method:user@host:/path/to/file’ のようになります。

   リモートファイルは、通常のファイルとまったく同じように使用できます。
つまり、 ‘C-x C-f /method:user@host:/path/to/file <RET>’ でファイルまた
はディレクトリを開き、ファイルを編集して保存することができます。
‘copy-file’ や ‘rename-file’ のように、 2 つの引数を使用してファイル操作
でローカル・ファイルとリモート・ファイルを混在させることもできます。 最
後に、 プロセスを呼び出すバッファにリモートの ‘default-directory’ がある
場合、 リモート・ホストでプロセスを実行することもできます。

4.1 File name syntax
====================

リモート・ファイル名には、 ‘method’ 部分と ‘user’ 部分と ‘host’ 部分が先
頭に追加されます。 それらのすべてとローカル・ファイル名の部分はオプショ
ンです。 欠落している部分がある場合は、 デフォルト値が想定されます。 空
のローカル・ファイル名部分のデフォルト値は、 リモート・ユーザーのホーム
・ディレクトリです。 したがって、 最短のリモート・ファイル名は ‘/-::’ で
す。 デフォルトの方式の ‘-’ 記法は、 構文上の理由により *note Default
Method:: として使用されます。

   ‘method’ 部分は、リモート・ホストに到達するために使用される接続方式
(connection method)を記述します。 後述します。

   ‘user’ の部分は、 リモート・ホストにアクセスするためのユーザー名です
。 ‘smb’ 方式の場合、 ドメイン名も必要になることがあり、 その際は
‘user%domain’ と記述されます。

   ‘host’ の部分は、 あなたのローカル・ホストで解決できるホスト名でなけ
ればなりません。 短いホスト名、 完全修飾ドメイン名、 IPv4 または IPv6 ア
ドレス、 *note File name syntax:: のいずれかです。 一部の接続方式
(connection method)では、 使用するポートの表記もサポートされており、 そ
の場合は ‘host#port’ と記述されます。

4.2 Using ‘ssh’ and ‘plink’
===========================

あなたのローカル・ホストが SSH クライアントを実行し、 リモート・ホストが
SSH サーバーを実行している場合、 最も単純なリモート・ファイル名は
‘/ssh:user@host:/path/to/file’ です。 リモート・ファイル名 ‘/ssh::’ は、
ローカル・ホスト上の自分自身へのリモート接続を開き、 TRAMP のテストによ
く使用されます。

   MS Windows では、 PuTTY が SSH クライアントとしてよく使用されます。 そ
の ‘plink’ 方式を使用して、 ‘ssh’ サーバーを実行しているリモート・ホスト
への接続を開くことができます: ‘/plink:user@host:/path/to/file’

4.3 Using ‘su’, ‘sudo’, ‘doas’ and ‘sg’
=======================================

しばしば異なる権限(different permissions)であなたのローカル・ホストを操
作する必要があります。 これには、 ‘su’ または ‘sudo’ 接続方式(connection
method)を使用できます。 OpenBSD システムでは、 ‘doas’ 接続方式が同じ機能
を提供します。 これらの方式(method)は、 ‘root’ をデフォルトのユーザー名
として使用し、 ‘(system-name)’ の戻り値をデフォルトのホスト名として使用
します。 したがって、 ‘/sudo::/path/to/file’ としてファイルを開くと便利
です。

   ‘sg’ 方式は “switch group” を意味します。 ここでは、 ユーザー名が変更
先のグループとして使用されます。 デフォルトのホスト名は同一です。

4.4 ‘ssh’ または ‘plink’ を、 ‘su’ または ‘sudo’ または ‘doas’ と組み合わせる
=============================================================================

‘su’ オプションまたは ‘sudo’ オプションまたは ‘doas’ オプションを別のホ
ストで実行する必要がある場合は、 先行する ‘ssh’ オプションまたは ‘plink’
オプションと組み合わせることができます。 つまり、 TRAMP は最初に管理者以
外の資格情報(credentials)を使用して他のホストに接続し、 その後、そのホス
トの管理者資格情報に変更します。 単純なケースでは、 構文は
‘/ssh:user@host|sudo::/path/to/file’ のようになります。 *Note Ad-hoc
multi-hops::

4.5 Using ‘sudoedit’
====================

‘sudoedit’ 方式は ‘sudo’ 方式に似ています。 ただし、 実装が異なります。
バックグラウンドで開いているセッションを実行し続けるわけではありません。
これはセキュリティ上の理由によるもので、 裏側では、 この方式は ‘sudo’ 方
式よりもパフォーマンスが悪く、‘localhost’ のみに制限されており、 外部プ
ロセスをサポートしていません。

4.6 Using ‘smbclient’
=====================

リモートの MS Windows ホストまたは Samba サーバーにアクセスするには、
‘smbclient’ クライアントが使用されます。 リモート・ファイル名の構文は
‘/smb:user%domain@host:/path/to/file’ です。 ローカル・ファイル名の最初
の部分は、 リモート・ホストによってエクスポートされた共有 (この例では
‘path’) です。

4.7 Using GVFS-based methods
============================

GVFS (the GNOME Virtual File System) がインストールされているシステムで
は、 GVFSで提供されている方式を TRAMP で使用できます。 例えば、
‘/sftp:user@host:/path/to/file’ や、 ‘/afp:user@host:/path/to/file’
(Apple の AFP ファイルシステムにアクセス)や、
‘/dav:user@host:/path/to/file’ や、 ‘/davs:user@host:/path/to/file’
(WebDAV 共有用) や、 ‘/mtp:device:/path/to/file’ (メディアデバイス用) で
す。

4.8 Using GNOME Online Accounts based methods
=============================================

GVFSベースの方式には、 ‘Files’ サービスをサポートする GNOME オンライン・
アカウントも含まれます。 これらは、 Google ドライブ・ファイル・システム
と、OwnCloud/NextCloud ファイル システムです。 ここでのファイル名の構文
は、 OwnCloud/NextCloud ファイルの場合は常に
‘/gdrive:john.doe@gmail.com:/path/to/file’ (‘john.doe@gmail.com’ は
Google ドライブ・アカウントを表します) または
‘/nextcloud:user@host#8081:/path/to/file’ (‘8081’ はポート番号を表します
) です。

4.9 Using FUSE-based methods
============================

FUSE (Filesystem in Userspace) は、 ユーザーが仮想ファイル・システムをマ
ウントできるようにします。 GVFS によって内部的にも使用されますが、 ここ
では GVFS API を使用しない方式(method)について説明します。

   システム・ストレージにアクセスする便利な方法は ‘rclone’ プログラムで
す。 ‘rclone’ で ‘storage’ という名前でストレージを構成した場合、 (たと
えば、) リモート・ファイル名の構文 ‘/rclone:storage:/path/to/file’ を介
してアクセスできます。 ユーザー名は必要ありません。

   ‘sftp’ に基づいてファイル・システムをマウントするための ‘sshfs’ クラ
イアントをインストールしたローカル・ホストでは、 この方式(method)を使用
できます。 すべてのリモート・ファイルは、 ローカル・マウント・ポイント経
由で利用できます。 TRAMP は、 ファイル・システムがまだマウントされていな
い場合にマウントを支援し、 通常のファイル名構文
‘/sshfs:user@host:/path/to/file’ によるアクセスをサポートします。

4.10 Using Android
==================

USB 経由でローカル ホストに接続されている Android デバイスには、 ‘adb’ コ
マンド経由でアクセスできます。 ユーザー名またはホスト名は必要ありません
。 ファイル名の構文は ‘/adb::/path/to/file’ です。


File: tramp,  Node: Configuration,  Next: Usage,  Prev: Quick Start Guide,  Up: Top

5 Configuring TRAMP
*******************

TRAMP は、 最初は ‘scp’ プログラムを使用してリモート・ホストに接続するよ
うに設定されています。 ‘C-x C-f’ と入力してから、 ファイル名
‘/scp:user@host:/path/to/file’ を入力します。 詳細については、 *Note
Default Method::, *Note Default User::, *Note Default Host:: を参照して
ください。

   リモート・シェルの動作に関する問題については *Note Remote shell
setup:: を参照してください。

   接続タイプとファイル・アクセス方式(method)をデフォルトから他のいくつ
かのオプションのいずれかに変更する場合 *Note Connection types:: を参照し
てください。

   *注意* これらの例で説明されている一部のユーザー・オプションは、 Emacs
によって自動ロードされません。 すべての例は TRAMP をインストールしてロー
ドする必要があります:

     (customize-set-variable 'tramp-verbose 6 "Enable remote command traces")

   TRAMP の設定に使用される関数については、 以下の句をあなたの init ファ
イルで使用できます:

     (with-eval-after-load 'tramp (tramp-change-syntax 'simplified))

   ‘enable-remote-dir-locals’ を non-‘nil’に設定して、 リモート・ディレ
クトリのディレクトリ・ローカル変数を介して他の変数を変更できるようにする
必要があります。 *Note (emacs)Directory Variables:: 参照。

* Menu:

* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       GVFS-based external methods.
* FUSE-based methods::       FUSE-based external methods.
* Default Method::           デフォルトの手段(method)を選択します。
                               ここでは、
                               どの手段が自分に適しているかあまり理解できていない人を支援しようとしています。
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related
                                         information.
* Remote programs::          How TRAMP finds and uses programs on
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               FUSE setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.


File: tramp,  Node: Connection types,  Next: Inline methods,  Up: Configuration

5.1 Types of connections to remote hosts
========================================

インライン方式(“Inline method”) と 外部方式(“external method”) はアクセ
ス方式(method)の 2 つの基本的なタイプです。 どちらも ‘rsh’ または ‘ssh’
または ‘telnet’ などの同じリモート・シェル・アクセス・プログラムを使用し
ますが、 ファイル・アクセス方法が異なります。 ファイルの編集または、大き
なファイルの転送または、多数のファイルの操作、 では、 適切な方法を選択す
ることが重要になります。

   一般に、 外部方式(the external methods)のパフォーマンスは、 少なくと
も大きなファイルの場合、 インライン方式(the inline methods)のパフォーマ
ンスよりも優れています。 これは、 インライン転送時にはデータをエンコード
およびデコードする必要があるためです。

   この規則の唯一の例外は、 ‘scp’ ベースのアクセス方式(method)です。 こ
れらの方式では、 実際にファイルを転送するときのパフォーマンスは向上しま
すが、起動時の暗号化ネゴシエーションのオーバーヘッドにより、ファイル転送
時間の改善がかき消される可能性があります。

   外部方式(external methods)は、 (‘ssh-agent’ など、)パスワードを必要と
しない方法で構成する必要があります。 最新の ‘scp’ 実装では、 既存の
‘ssh’ 接続を再利用するオプションを提供します。 これは、 利用可能であれば
TRAMP がデフォルトで有効にします。 それが不可能な場合は、 *note Password
handling:: を考慮する必要があり、 考慮しないと、 コピー操作ごとにパスワ
ードの入力を求めるプロンプトが表示されます。


File: tramp,  Node: Inline methods,  Next: External methods,  Prev: Connection types,  Up: Configuration

5.2 Inline methods
==================

インライン方式(inline methods)は、 同じログイン接続を使用してファイル・
コンテンツを転送します。 インライン方式は、 小さなファイルに対してすばや
く簡単に使用できます。 これらは、リモート・ホストで適切なエンコード・プ
ログラムとデコード・プログラムが利用できるかどうかに依存します。 ローカ
ルの送信元と送信先の場合、 TRAMP は、 そのようなプログラムと同等の Emacs
の組み込みのプログラムを使用できます。

   インライン方式(inline method)は、 外部転送プログラムが利用できない状
況で機能します。 インライン方式は、 同じホスト上の異なる _ユーザーID_ 間
でファイルを転送する場合にも機能します。

   TRAMP は、 ‘tramp-remote-coding-commands’ で定義されたコマンドの 1 つ
が使用可能であるか、 リモート・ホストをチェックします。 TRAMP は、 最初
に見つけた信頼できる(reliable)コマンドを使用します。 TRAMP の検索パスは
カスタマイズできます。 *note Remote programs:: を参照してください。

   どのコマンドも使用できない場合、 TRAMP は最初に小さな Perl プログラム
をリモート ホストに転送し、 次にそのプログラムをエンコードとデコードに使
用しようとします。

   大きなテキスト・ファイルの転送速度を上げるために、 TRAMP はエンコード
の前に圧縮を使用できます。 ユーザー・オプション
‘tramp-inline-compress-start-size’ は、この最適化を使用するファイル・サ
イズを指定します。 この機能は、 ‘tramp-inline-compress-commands’ で定義
されたコマンドの 1 つの可用性と使いやすさに依存します。

‘rsh’

     ‘rsh’ は他の方式ほど安全ではないため、 ローカル・ネットワーク内のホ
     ストに接続するためのオプションです。 ‘ssh’ が完全な代替品であり、至
     るところで使えるので、 ‘rsh’ を使用する理由はありません。

‘ssh’

     ‘ssh’ は、リモート・ホストに接続するための他のオプションよりも安全
     なオプションです。

     ‘ssh’ は、 追加のパラメーターをポート番号として受け取ることもできま
     す。 たとえば、 ポート番号 42 のホストは ‘host#42’ (実際のホスト名
     、ハッシュ記号、ポート番号) として指定されます。 これは ‘-p 42’ を
     ‘ssh’ コマンドに渡すのと同一です。

‘telnet’

     ‘telnet’ によるリモート・ホストへの接続は、‘rsh’ 方式と同じくらい危
     なっかしい(insecure)です。

‘su’

     リモート・ホストに接続する代わりに、 ‘su’ プログラムを使用すると、
     別のユーザーとして編集できます。 ホストは、 ‘localhost’ または関数
     ‘(system-name)’ によって返されるホストのいずれかです。 この動作の例
     外については *note Multi-hops:: を参照してください。

‘sudo’

     ‘su’ 方式と同様に、 ‘sudo’ は ‘sudo’ を使用します。 ‘sudo’ には、シ
     ェルを開始するための十分な権限が必要です。

     セキュリティ上の理由から、 ‘sudo’ 接続は、 定義済みのタイムアウト
     (デフォルトでは 5 分) が経過すると無効になります。 これは変更できま
     す。 *note Predefined connection information:: を参照してください。

‘doas’

     この方式は、 ‘sudo’ コマンドのように OpenBSD で使用されます。
     ‘sudo’ 方式と同様に、‘doas’ 接続は事前定義されたタイムアウト後に無
     効になります。

‘sg’

     ‘sg’ プログラムは、 別のグループとして編集できます。 ホストは、
     ‘localhost’ または関数 ‘(system-name)’ によって返されるホストのいず
     れかです。 ユーザー名を指定する必要がありますが、 これはグループ名
     を示しています。 この動作の例外については、 *note Multi-hops:: を参
     照してください。

‘sshx’

     ‘ssh’ のように動作しますが、 追加の認証プロンプトはありません。
     ‘sshx’ は ‘ssh -t -t -l USER -o RemoteCommand='/bin/sh -i' HOST’ を
     使用して「標準のログイン・シェル」(“standard” login shell)との接続
     を開きます。 リモート・ログイン・シェル ‘/bin/sh’ の変更をサポート
     しています。

     *注意* ‘sshx’ は認証の質問をバイパスしないことに注意してください。
     たとえば、リモート・ホストのホスト・キーが不明な場合でも、 ‘sshx’ は
     引き続き “Are you sure you want to continue connecting?”(接続を続行
     しますか?)と尋ねます。 TRAMP はそのような質問を処理できません。 そ
     のような質問なしでログインを続行できる接続をセットアップする必要が
     あります。

     ‘sshx’ は、‘ssh’ が疑似 tty の割り当てに関するエラーを引き起こす場
     合に、 MS Windows ユーザーにとって役立ちます。 これはシェル・プロン
     プトを見つけられないために TRAMP が混乱することで発生します。

     ‘sshx’ は ‘-p’ 引数をサポートします。

‘krlogin’

     この方式は ‘ssh’ にも似ています。 ‘krlogin -x’ コマンドは、 リモー
     ト・ホスト・ログインにのみ使用されます。

‘ksu’

     これは、 Kerberos スイート用の別の方式です。 ‘su’ のように振る舞い
     ます。

‘plink’

     ‘plink’ 方式は、 SSH の PuTTY 実装を使用する MS Windows ユーザー向
     けです。 ‘plink -ssh’ を使用してリモート・ホストにログインします。
     リモート・ログイン・シェル ‘/bin/sh’ の変更をサポートしています。

     当該セッションの ‘Share SSH connections if possible’(可能であれば
     SSH 接続を共有する) 制御を確認します。

     ‘plink’ 方式は ‘-P’ 引数をサポートします。

‘plinkx’

     ホスト名の代わりにセッション名を使用して、 MS Windows で PuTTY を使
     用する別の方式。 ‘plinkx’ は ‘plink -load SESSION -t’ を呼び出しま
     す。 ユーザー名とポート番号は、 セッションで定義する必要があります
     。 リモート・ログイン・シェル ‘/bin/sh’ の変更をサポートしています
     。

     当該セッションの ‘Share SSH connections if possible’(可能であれば
     SSH 接続を共有する) 制御を確認します。


File: tramp,  Node: External methods,  Next: GVFS-based methods,  Prev: Inline methods,  Up: Configuration

5.3 External methods
====================

外部方式(external methods)は、ファイル転送を外部転送プログラムに委譲しな
がら、一部のアクションにリモート・シェル接続を使用して、複数チャネルで動
作します。

   外部方式(external methods)は、 インライン方式(inline methods)でのエン
コードとデコードのオーバーヘッドを節約します。

   外部方式(external methods)には新しいチャンネルを開くオーバーヘッドが
あるため、 ‘tramp-copy-size-limit’ より小さいファイルは引き続きインライ
ン方式(inline methods)を使用します。

‘rcp’

     この方式は、 ‘rsh’ および ‘rcp’ コマンドを使用してリモート・ホスト
     に接続し、 ファイルを転送します。 これは利用可能な最速のアクセス方
     法です。

     代替方式の ‘remcp’ は ‘remsh’ と ‘rcp’ コマンドを使用します。

‘scp’

     接続に ‘ssh’ 、 転送に ‘scp’ を組み合わせて使用するのが最も安全です
     。 パフォーマンスは良好ですが、 小さいファイルでのインライン方式よ
     りも遅くなります。 インライン方式でのエンコードとデコードのオーバー
     ヘッドはありませんが、 ‘scp’ の暗号化ハンドシェイクはこれらの速度向
     上を打ち消します。

     ‘ssh’ ベースの方式は、 ポート番号を指定するための ‘-p’ 機能をサポー
     トしています。 たとえば、 ‘host#42’ は、 引数 ‘-p 42’ を ‘ssh’ に渡
     し、 かつ、 引数 ‘-P 42’ を ‘scp’ に渡します。

‘rsync’

     接続のための ‘ssh’ コマンドと、 転送のための ‘rsync’ コマンドの組み
     合わせは、 ‘scp’ 方式と似ています。

     両方のホストに存在するファイル達を転送する場合、 ‘rsync’ は ‘scp’ よ
     りもはるかに優れたパフォーマンスを発揮します。 ただし、 ファイルが
     接続の片側にのみ存在する場合、 この利点は失われます。

     この方式は ‘-p’ 引数をサポートしています。

‘scpx’

     ‘scpx’ は、 ログイン・シェルの質問を避けるのに役立ちます。 パフォー
     マンスは ‘scp’ に似ています。 ‘scpx’ は ‘ssh -t -t -l USER -o
     RemoteCommand='/bin/sh -i' HOST’ を使用して接続を開きます。 リモー
     ト・ログイン・シェル ‘/bin/sh’ の変更をサポートしています。

     ‘scpx’ は、 ‘ssh’ が疑似 tty の割り当てに関するエラーを引き起こす場
     合に、 MS Windows ユーザーにとって役立ちます。 これはシェル・プロン
     プトを見つけられないために TRAMP が混乱することで発生します。

     この方式は ‘-p’ 引数をサポートしています。

‘pscp’
‘psftp’

     これらの方式は ‘scp’ または ‘sftp’ に似ていますが、 ‘plink’ コマン
     ドを使用してリモート・ホストに接続し、 ‘pscp’ または ‘psftp’ を使用
     してファイル転送します。 これらのプログラムは、 MS Windows の SSH 実
     装である PuTTY の一部です。

     リモート・グイン・シェル ‘/bin/sh’ の変更をサポートしています。

     当該セッションの ‘Share SSH connections if possible’(可能であれば
     SSH 接続を共有する) 制御を確認します。

     これらの方式は ‘-P’ 引数をサポートしています。

‘fcp’

     この方式は ‘scp’ に似ていますが、 ‘fsh’ を使用して接続し、 ‘fcp’ を
     使用してファイルを転送します。 ‘ssh’ のフロントエンドである
     ‘fsh/fcp’ は、 いくつかのコマンドを送信して ‘ssh’ セッションを再利
     用します。 これにより、‘scp’ の安全な接続による起動時のオーバーヘッ
     ドが回避されます。 インライン方式(inline methods)でも同様の利点があ
     ります。

     この接続に使用されるコマンドは ‘fsh HOST -l USER /bin/sh -i’ です。

     ‘fsh’ が提供する多重化(multiplexing)は TRAMP では役に立たないため、
     ‘fsh’ にはインライン方式(inline method)はありません。 ‘fsh’ はリモ
     ート・ホストに接続し、 TRAMP はその 1 つの接続を開いたままにします
     。

‘nc’

     ‘telnet’ を使用して接続し、 ‘nc’ を使用してファイルを転送することは
     、 ルーターまたは NAS ホストへのアクセスに適した唯一の組み合わせで
     ある場合があります。 ‘busybox’ や、 ‘telnet’ 以外のエンコード・プロ
     グラムやデコード・プログラムをホストしていないなど、これらのダム
     (dumb)・デバイスではローカル・シェルが厳しく制限されています。

‘sudoedit’

     ‘sudoedit’ 方式を使用すると、 ローカル・ホストで別のユーザーとして
     ファイルを編集できます。 これは TRAMP による ‘sudoedit’ の実装と見
     なすことができます。 ‘sudo’ 方式とは対照的に、 すべてのマジック・フ
     ァイル名関数(all magic file name functions)は、単一の ‘sudo ...’ コ
     マンドによって実装されます。 その目的は、 そのようなファイルの編集
     を可能な限り安全にすることです。 Emacs のバックグラウンドで実行され
     ているセッションが Emacs の内部から攻撃される可能性があってはなりま
     せん。

     ゆえに、 外部プロセス(external processes)は実装されません。

     このようなリモート・ファイル名のホスト名は、 ローカル・ホストを表す
     必要があります。 デフォルト値がすでに適切なので、
     ‘/sudoedit::/path/to/file’ や ‘/sudoedit:user@:/path/to/file’ のよ
     うに、 リモート・ファイル名にホスト名を使用しないことをお勧めします
     。

     ‘sudo’ 方式と同様に、 ‘sudoedit’ パスワードは事前定義されたタイムア
     ウト後に期限切れになります。

‘ftp’

     TRAMP が ‘ftp’ を使用すると、 リクエストは Ange FTP で指定された任
     意の ftp プログラムに転送されます。 この外部プログラムは、TRAMP か
     らのリクエストを処理できる必要があります。

‘smb’

     この非ネイティブの TRAMP 方式は、 Server Message Block (SMB) ネット
     ワーク・プロトコルを介して、 通常は Samba または MS Windows に基づ
     く、 ファイル・サーバーを実行しているホストに接続します。

     ‘smbclient’ を使用するには、TRAMP を操作するときにいくつか調整
     (tweaks)が必要です:

     ローカルネーム(localname) の最初のディレクトリ(first directory)は、
     リモート・ホスト上の共有名である必要があります。

     一部の SMB 共有名は ‘$’ 文字で終わるため、 環境変数の置換を避けるた
     めに、 これらの共有を指定する際に TRAMP は ‘$$’ を使用する必要があ
     ります。

     TRAMP が共有名を指定していないか、 または一般的なリモート・ディレク
     トリ ‘/’ を使用している場合、 ‘smbclient’ は利用可能なすべての共有
     を返します。

     SMB 認証は 各 SMB 共有に基づいているため、 同じ SMB ホスト上の別の
     共有にアクセスする場合でも、 TRAMP はパスワードの入力を求めます。 こ
     のプロンプトは、 *note Password handling:: によって抑制できます。

     MS Windows 認証で必要な ユーザー名/ドメイン名 構文に対応するために
     、 TRAMP は ‘user%domain’ 形式の拡張構文を提供します (‘user’ はユー
     ザー名、‘%’ はパーセント記号、‘domain’ は MS Windows ドメイン名です
     )。 例:

          /smb:daniel%BIZARRE@melancholia:/daniel$$/.emacs

     ここで、 ユーザー ‘daniel’ はドメイン・ユーザーとして MS Windows ド
     メイン ‘BIZARRE’ の SMB ホスト ‘melancholia’ に接続し、 ホーム・デ
     ィレクトリ(共有 ‘daniel$’)にある ‘.emacs’ を編集します。

     または、(ドメイン・ユーザーではなく) ローカル WINS ユーザーの場合は
     、 逝かに示すように、 ドメイン名を大文字のローカル・ホストの名前に
     置き換えます:

          /smb:daniel%MELANCHOLIA@melancholia:/daniel$$/.emacs

     ここで、 ユーザー ‘daniel’ はローカル・ユーザーとしてローカル・ドメ
     イン ‘MELANCHOLIA’ の SMB ホスト ‘melancholia’ に接続し、 ホーム・
     ディレクトリ(共有 ‘daniel$’)にある ‘.emacs’ を編集します。

     ‘smbclient’ 認証では、 ドメイン名とユーザー名はオプションです。 ユ
     ーザー名が指定されていない場合、‘smbclient’ は匿名(anonymous)ユーザ
     ーを使用します(パスワードのプロンプトは表示されません)。 この動作は
     、 ローカル・ユーザー名で代用される他の TRAMP 方式とは異なります。

     Emacs が MS Windows のローカル・ユーザー認証コンテキストで実行され
     ている場合、 ‘smb’ 方式は使用できません。 ただし、 そのようなユーザ
     ーは、 TRAMP の代わりに UNC ファイル名を使用してリモート・ファイル
     にアクセスできます。

          //melancholia/daniel$$/.emacs

     UNC ファイル名の指定では、 ‘smbclient’ のように認証用に別のユーザー
     名を指定することはできません。

‘adb’

     この方式では、 Android Debug Bridge プログラムを使用して Android デ
     バイスにアクセスします。 TRAMP を機能させるには、 Android Debug
     Bridge をローカルにインストールする必要があります。 一部の
     GNU/Linux ディストリビューションでは、 インストール・パッケージとし
     て Android Debug Bridge が提供されています。 または、プログラムは
     Android SDK の一部としてインストールされます。 TRAMP は、 ‘PATH’ 環
     境変数、またはユーザーオプション ‘tramp-adb-program’ で設定された絶
     対パスを介して、 ‘adb’ プログラムを探します。

     TRAMP は、 ユーザー・オプション
     ‘tramp-adb-connect-if-not-connected’ が ‘nil’ でない場合にのみ、
     ‘adb’ を使用して Android デバイスに接続します。 それ以外の場合、 接
     続は Emacs の外部で確立する必要があります。

     TRAMP は、 単一の Android デバイスが ‘adb’ に接続されている場合、 リ
     モート・ファイル名のホスト名部分を必要としません。 TRAMP は、 代わ
     りに ‘/adb::’ をデフォルト名として使用します。 ‘adb devices’ を
     Emacs 外のシェルで実行すると、 利用可能なホスト名が表示されます。

     ‘adb’ 方式は、 ‘adbd’ プロセスで実行されるため、 通常、 Android デ
     バイスでの認証にユーザー名は必要ありません。 ただし、 ユーザー名が
     指定されている場合、 TRAMP は構文で ‘su’ を適用します。 特に root 化
     されていない Android デバイス(un-rooted Android devices)で認証が成
     功しない場合、 TRAMP はログイン・エラーを表示します。

     TCP/IP 経由で接続された Android デバイスの場合、 ‘device#42’ ホスト
     名構文を使用してポート番号を指定するか、 TRAMP で ‘adb’ コマンドで
     宣言されているデフォルト値を使用できます。 ポート番号は USB 経由で
     接続された Android デバイスには適用されません。


File: tramp,  Node: GVFS-based methods,  Next: FUSE-based methods,  Prev: External methods,  Up: Configuration

5.4 GVFS-based external methods
===============================

GVFS は GNOME デスクトップの仮想ファイル・システムです
(<https://en.wikipedia.org/wiki/GVFS>)。 GVFS 上のリモート・ファイルは
FUSE を介してローカルにマウントされ、 TRAMP はこのローカルにマウントされ
たディレクトリを内部的に使用します。

   Emacs は D-Bus メカニズムを使用して GVFS と通信します。 Emacs では、
メッセージ・バス・システム、 D-Bus 統合がアクティブになっている必要があ
ります。 *note D-Bus: (dbus)Top.

‘afp’

     この方式は、 Apple Filing Protocol を使用してリモート・ホストに接続
     し、 macOS ボリューム上のファイルにアクセスするためのものです。
     TRAMP アクセス構文では、 先頭のボリューム(共有)名が必要です。 例:
     ‘/afp:user@host:/volume’

‘dav’
‘davs’

     ‘dav’ 方式は、 HTTP などの標準プロトコルに基づいて、 WebDAV ファイ
     ルおよびディレクトリへのアクセスを提供します。 ‘davs’ も同じことを
     行いますが、 SSL 暗号化を使用します。 どちらの方式もポート番号指定
     をサポートしています。

     GVFS によってマウントされる WebDAV ボリュームの一部であるパスは、
     OwnCloud や NextCloud ファイル名の方が一般的であるため、 これらの方
     式ではサポートされていません。 それらの処理については ‘nextcloud’ 方
     式を参照してください。

‘gdrive’

     ‘gdrive’ メソッドを介して、 Google ドライブのオンライン・ストレージ
     にアクセスできます。 リモート・ファイル名のユーザー名とホスト名は、
     ‘/gdrive:john.doe@gmail.com:/’ のような Google ドライブ資格情報のメ
     ール・アドレスです。 これらの資格情報は、 Emacs 外の ‘Online
     Accounts’ アプリケーションで入力する必要があります。

     Google ドライブは暗号化されたブロブ・ファイル名を内部的に使用するた
     め、 TRAMP はファイルの ‘display-name’ で機能します。 これは、同じ
     ディレクトリ内の 2 つのファイルが同じ ‘display-name’ を持つ場合に予
     期しない動作を引き起こす可能性があり、 そのような状況は回避しなけれ
     ばなりません。

‘mtp’

     携帯電話、タブレット、カメラなどのメディア・バイスには、 ‘mtp’ 方式
     を介してアクセスできます。 ファイル名でホストを指定するには、 デバ
     イス名だけが必要です。 ただし、 アクセスする前に、 デバイスが USB 経
     由で接続されている必要があります。 可能なデバイス名は、 ホスト名補
     完によって表示されます。 *note File name completion::

     デバイスの種類によっては、 アクセスが読み取り専用になる場合がありま
     す。 一部のデバイスは、 異なる名前で並行してアクセスでき、 ファイル
     ・システムの異なる部分を提供します。

     TRAMP は、単一のメディア・デバイスが接続されている場合、 リモート・
     ファイル名の一部としてホスト名を必要としません。 TRAMP は、 代わり
     に ‘/mtp::’ をデフォルト名として使用します。

‘nextcloud’

     名前が示すように、 ‘nextcloud’ 方式を使用すると、 OwnCloud や
     NextCloud がホストするファイルとディレクトリにアクセスできます。
     ‘gdrive’ 方式と同様に、 資格情報は Emacs 外の ‘Online Accounts’ ア
     プリケーションで入力する必要があります。 この方式はポート番号指定を
     サポートしています。

‘sftp’

     この方式は、 リモート・ホストに安全にアクセスするために ‘sftp’ を使
     用します。 ‘sftp’ は、 セキュリティ上の理由で ‘ssh’ 接続を拒否する
     ホストに接続するためのより安全なオプションです。

     あなたの ‘ssh’ 設定にそれぞれのエントリがある場合は、
     ‘RemoteCommand’ オプションを「設定してないで」ください。

 -- User Option: tramp-gvfs-methods
     このユーザー・オプションは、GVFS の外部方式(external methods)のリス
     トです。 デフォルトでは、 このリストには ‘afp’ と ‘dav’ と ‘davs’ と
     ‘gdrive’ と ‘mtp’ と ‘nextcloud’ と ‘sftp’ が含まれます。 含める事
     ができる他の方式は、 ‘ftp’ と ‘http’ と ‘https’ と ‘smb’ で、 これ
     らの方式は、 GVFS ベースのメソッドとして直接使用するためのものでは
     なく、 代わりに、 *note Archive file names:: のためにここに追加され
     ています。

     あなたが GVFS ベースの ‘ftp’ または ‘smb’ 方式を使用する場合は、 あ
     なたはそれらを ‘tramp-gvfs-methods’ に追加する必要があり、そして、
     あなたはそれぞれ ‘tramp-ftp-method’ または ‘tramp-smb-method’ を
     ‘nil’ に設定して、 対応する TRAMP パッケージを無効にする必要があり
     ます。

          (add-to-list 'tramp-gvfs-methods "ftp")
          (customize-set-variable 'tramp-ftp-method nil)


File: tramp,  Node: FUSE-based methods,  Next: Default Method,  Prev: GVFS-based methods,  Up: Configuration

5.5 FUSE-based external methods
===============================

GVFS 以外にも、 FUSE インターフェイスを使用する仮想ファイル・システムが
あります。 リモート・ファイルは FUSE によってローカルにマウントされ、
TRAMP はこのローカルにマウントされたディレクトリを内部的に使用します。 可
能な場合、TRAMP はリモート・ファイル名をそれぞれのローカル・ファイル名に
マップし、 それらにファイル名操作を適用します。 一部のファイル名操作では
これが不可能であり、 TRAMP はそれらの操作を別の方法でエミュレートします
。

‘rclone’

     プログラム ‘rclone’ を使用すると、クラウド内のさまざまなシステム・
     ストレージにアクセスできます。 サポートされているシステムのリストに
     ついては、 <https://rclone.org/> を参照してください。 ‘rclone’ プロ
     グラムが ‘PATH’ 環境変数で見つからない場合、 ユーザーオプション
     ‘tramp-rclone-program’ を介して TRAMP にその絶対パスを伝えることが
     できます。

     システム・ストレージは、 Emacs の外部で ‘rclone config’ コマンドを
     介して設定する必要があります。 ‘rclone’ で たとえば、 ‘storage’ と
     いう名前でストレージを構成した場合、 以下のようにリモート・ファイル
     名を介してアクセスできます

          /rclone:storage:/path/to/file

     ユーザー名は ‘rclone’ 設定の一部であり、 リモート・ファイル名には必
     要ありません。 リモート・ファイル名にユーザー名が含まれている場合、
     無視されます。

     内部的には、 TRAMP はリモート・システム・ストレージを
     ‘/tmp/tramp.rclone.storage’ にマウントします。 ‘storage’ は構成され
     たシステム・ストレージの名前です。

     さまざまな ‘rclone’ 操作に対するマウント・ポイントとオプションのフ
     ラグは、 接続プロパティ(connection properties)として渡すことができ
     ます。 *Note Setup of rclone method::

     ‘rclone’ 経由のアクセスは遅いです。 システム・ストレージにアクセス
     する別の方法がある場合は、 それを使用するべきです。 それは例えば
     *note GVFS-based methods:: の ‘gdrive’ 方式や ‘nextcloud’ 方式です
     。

‘sshfs’

     ‘sftp’ に基づいてファイル・システムをマウントするための ‘sshfs’ ク
     ライアントをインストールしたローカル・ホストでは、 この方式を使用で
     きます。 <https://github.com/libfuse/sshfs/blob/master/README.rst/>
     参照。 ‘sshfs’ プログラムが ‘PATH’ 環境変数で見つからない場合、 ユ
     ーザー・オプション ‘tramp-sshfs-program’ を介して TRAMP にその絶対
     パスを伝えることができます。

     すべてのリモート・ファイルがローカル・マウント・ポイント経由で利用
     できます。 TRAMP は、 ファイル・システムがまだマウントされていない
     場合にマウントするのを手助けします。 リモート・ファイル名の構文は以
     下のとおりです

          /sshfs:user@host#port:/path/to/file

     ユーザー名とポート番号はオプションです。 この方式はパスワード処理を
     サポートしていません。 ファイル・システムがすでにマウントされている
     か、 ssh キーを介してパスワードなしで接続を確立する必要があります。

     マウント・ポイントとマウント引数は、 接続プロパティ(connection
     properties)として渡すことができます。 *Note Setup of sshfs method::


File: tramp,  Node: Default Method,  Next: Default User,  Prev: FUSE-based methods,  Up: Configuration

5.6 Selecting a default method
==============================

リモート・ファイル名では、 デフォルト方式(default method)の使用は疑似方
式(pseudo method) ‘-’ によって示されます。 *note File name syntax::

 -- User Option: tramp-default-method
     デフォルトの方式は、 ファイルを転送するためのものです。 ユーザー・
     オプション ‘tramp-default-method’ で設定します。 TRAMP は、このユー
     ザー ・オプションを使用して、 指定されていないリモート・ファイル名
     のデフォルトの方式を決定します。

          (customize-set-variable 'tramp-default-method "ssh")

 -- User Option: tramp-default-method-alist
     ファイル転送のデフォルトの方式は、 ユーザー・オプション
     ‘tramp-default-method-alist’ を使用して、 特定のユーザーとホストの
     組み合わせに対してカスタマイズできます。

     たとえば、 以下の 2 行では、 ‘john’ に一致するすべてのユーザー名に
     対して ‘ssh’ メソッドを使用し、 ‘lily’ に一致するすべてのホスト名に
     対して ‘rsync’ メソッドを使用するように指定しています。 3 行目は、
     ホスト ‘localhost’ 上のユーザー ‘root’ に対して ‘su’ メソッドを使用
     することを指定します。

          (add-to-list 'tramp-default-method-alist '("" "john" "ssh"))
          (add-to-list 'tramp-default-method-alist '("lily" "" "rsync"))
          (add-to-list 'tramp-default-method-alist
                       '("\\`localhost\\'" "\\`root\\'" "su"))

大きなファイルの場合、 外部方式(external methods)のパフォーマンスが向上
します。 *note Inline methods:: *note External methods::

   アクセス方式の選択は、 セキュリティ環境にも依存します。 たとえば、 ク
リア・テキストのパスワード転送を使用する ‘rsh’ および ‘telnet’ 方式は、
インターネット接続では不適切です。 安全なリモート接続には、 暗号化を提供
する ‘ssh’ を使用する必要があります。

5.6.1 Which method to use?
--------------------------

TRAMP は、 最大の柔軟性のために最大数の選択肢を提供します。 どの方式を選
択するかは、ホストやクライアントやネットワーク速度やセキュリティ・コンテ
キストによって異なります。

   インライン方式(inline method)を使用して開始します。

   大きなファイルには外部方式(external methods)の方が効率的かもしれませ
んが、 ほとんどの TRAMP ユーザーは大きなファイルよりも小さなファイルを頻
繁に編集します。

   インライン方式(inline methods)での大きなファイルのパフォーマンスを向
上させるために、 ‘tramp-inline-compress-start-size’ で圧縮を有効にします
。

   ‘ssh’ はリモート・ホスト・アクセスの最も一般的な方法になり、 最も合理
的なセキュリティ・プロトコルを備えているため、 ‘ssh’ 方式を使用します。
他のホストで ‘/etc/motd’ ファイルを編集するための一般的な ‘ssh’ の使用法
は:

     C-x C-f /ssh:root@otherhost:/etc/motd <RET>

   何らかの理由で ‘ssh’ が利用できない場合は、 他の明白な選択肢を探して
ください。 MS Windows では、 ‘plink’ メソッドを試してください。 Kerberos
の場合は、 ‘krlogin’ を試してください。

   ‘su’ または ‘sudo’ 方式としてローカル・ファイルを編集するには、 以下
の ‘root’ の短縮構文を試してください:

     C-x C-f /su::/etc/motd <RET>

   大きなファイルを編集する場合、 ‘scp’ は ‘ssh’ より高速です。 ‘pscp’ は
‘plink’ より高速です。 しかし、この速度向上は常に真とは限りません。

   ‘scp’ を介して 2 つの異なるリモート・ホスト間で大きなファイルをコピー
する場合、 ‘tramp-use-scp-direct-remote-copying’ を 非 ‘nil’ に設定しま
す。


File: tramp,  Node: Default User,  Next: Default Host,  Prev: Default Method,  Up: Configuration

5.7 Selecting a default user
============================

 -- User Option: tramp-default-user
     TRAMP ファイル名は、 現在ログインしているユーザー名を TRAMP で置き
     換えるため、 ユーザー名の部分を省略できます。 ただし、 この置換は
     ‘tramp-default-user’ でオーバーライドできます。 例えば:

          (customize-set-variable 'tramp-default-user "root")

 -- User Option: tramp-default-user-alist
     ‘tramp-default-user-alist’ は、 単一のデフォルト・ユーザーの代わり
     に、 アクセス方式やホスト名の組み合わせに基づいて、 複数のデフォル
     ト・ユーザー値を許可します。 連想リストは複数の値を保持できます。 た
     とえば、‘john’ をドメイン ‘somewhere.else’ のみのデフォルト・ユーザ
     ーとして使用するには、以下のようにします:

          (add-to-list 'tramp-default-user-alist
                       '("ssh" ".*\\.somewhere\\.else\\'" "john"))

     警告: TRAMP は、 ‘~/.ssh/config’ などの Emacs 外部の構成ファイルで
     指定されたデフォルトのユーザーを上書きします。 TRAMP がデフォルト値
     を適用するのを止めるには、 対応する連想リストのエントリを ‘nil’ に
     設定します:

          (add-to-list 'tramp-default-user-alist
                       '("ssh" "\\`here\\.somewhere\\.else\\'" nil))

     ‘tramp-default-user-alist’ の最後のエントリは、 キャッチ・オールま
     たは最も頻繁に使用されるログイン用に予約する必要があります。

          (add-to-list 'tramp-default-user-alist
                       '(nil nil "jonas") t)


File: tramp,  Node: Default Host,  Next: Multi-hops,  Prev: Default User,  Up: Configuration

5.8 Selecting a default host
============================

 -- User Option: tramp-default-host
     ホスト名が省略されている場合、 TRAMP は ‘tramp-default-host’ ユーザ
     ー・オプションの値に置き換えられます。 最初は、 Emacs が実行されて
     いるローカル・ホスト名が入力されています。 デフォルトの方式とデフォ
     ルトのユーザーとデフォルトのホストは、 以下のようにオーバーライドで
     きます:

          (custom-set-variables
           '(tramp-default-method "ssh")
           '(tramp-default-user "john")
           '(tramp-default-host "target"))

     すべてのデフォルトを設定すると、 ‘/-::’ は TRAMP を ‘target’ 上の
     John のホーム・ディレクトリに ‘ssh’ 経由で接続します。

 -- User Option: tramp-default-host-alist
     ‘tramp-default-host-alist’ は、 単一のデフォルト・ホストの代わりに
     、 アクセス方式やユーザー名の組み合わせに基づいて複数のデフォルト・
     ホスト値を許可します。 連想リストは複数の値を保持できます。 ほとん
     どの場合、 ‘tramp-default-host’ で十分ですが、 ‘adb’ などの一部のメ
     ソッドでは、 デフォルトを上書きする必要があります。


File: tramp,  Node: Multi-hops,  Next: Firewalls,  Prev: Default Host,  Up: Configuration

5.9 Connecting to a remote host using multiple hops
===================================================

マルチ・ホップ(multi-hops)は、 ファイア・ウォールの背後にあるホストに到
達する方式、 または要塞(bastion)ホスト内から外部の世界に到達する方式です
。 マルチ・ホップを使用すると、 TRAMP は、 各ホップ(hop)で適切な ユーザ
ー認証/ホスト認証 を使用してこれらのホップをネゴシエートできます。 これ
までのすべての方式は、 接続の始点と終点の間にチェック・ポイント達がなか
ったシングル・ホップな種類(single hop kind)でした。

 -- User Option: tramp-default-proxies-alist
     ‘tramp-default-proxies-alist’ は、 通過(パススルー;pass through)す
     るプロキシ・ホストを指定します。 このユーザー・オプションは、
     ‘(HOST USER PROXY)’ で構成される三つ組(triple)のリストです。

     最初にマッチするのは、 ファイル名を渡すプロキシ・ホストと、
     USER@HOST にマッチするターゲット・ホストです。 HOST と USER は正規
     表現または ‘nil’ で、 ‘nil’ の場合は常に一致する正規表現として解釈
     されます。

     PROXY は、 ローカル名の部分が無視されるリテラルの TRAMP ファイル名
     であり、 方式(method)とユーザー名の部分はオプションです。

     方式(method)はインライン方式(inline method)(*note Inline
     methods::)である必要があります。 PROXY が ‘nil’ の場合、 USER@HOST
     に到達する追加のホップは必要ありません。

     たとえば、 ホスト ‘bastion.your.domain’ をユーザー ‘bird’ として通
     過(pass through)して、 ローカル・ドメイン外のリモート・ホストに到達
     するには:

          (add-to-list 'tramp-default-proxies-alist
                       '("\\." nil "/ssh:bird@bastion.your.domain:"))
          (add-to-list 'tramp-default-proxies-alist
                       '("\\.your\\.domain\\'" nil nil))

     *注意*: ‘add-to-list’ はリストの先頭に要素を追加します。 したがって
     、 ‘add-to-list’ を使う場合、最も関連性の高いルールはソースリストの
     最後に来る必要があります。

     プロキシ・ホストは、 alist でカスケードできます。
     ‘bastion.your.domain’ への接続を許可されている唯一のホストである
     ‘jump.your.domain’ という別のホストがある場合:

          (add-to-list 'tramp-default-proxies-alist
                       '("\\`bastion\\.your\\.domain\\'"
                         "\\`bird\\'"
                         "/ssh:jump.your.domain:"))

     PROXY は、 HOST または USER に対してそれぞれパターン ‘%h’ または
     ‘%u’ を取ることができます。 ポートまたはドメインがホップ・ファイル
     名の一部である場合はこれらのパターンの展開は行われません。

     ドメイン ‘your.domain’ のリモート・ホストで ‘root’ としてログインす
     るが、 非ローカル・アクセスでは ‘root’ としてログインを無効にするに
     は、 以下の alist エントリを使用します:

          (add-to-list 'tramp-default-proxies-alist
                       '("\\.your\\.domain\\'" "\\`root\\'" "/ssh:%h:"))

     ‘/sudo:randomhost.your.domain:’ を開くと、 まずあなたのアカウント名
     で ‘ssh’ 経由で ‘randomhost.your.domain’ に接続し、 それから、 その
     ホスト上で ‘sudo -u root’ を実行します。

     上記の例の ‘sudo’ 方式(method)は、 ローカル・ホストではなく、 到達
     後にホストに適用される事が鍵です。 したがって、 TRAMP は、 そのよう
     なホップでのホスト名がその前のホップでのホスト名と一致することを確
     認します。

     HOST と USER と PROXY も Lisp 式にすることができます。 これらの式は
     評価(eval)されたら文字列または ‘nil’ を返さなければなりません。

     (先程の例を)一般化するには: ローカル・ホストを除くすべてのホストに
     対して、 まず ‘ssh’ 経由で接続し、 それから ‘sudo -u root’ を適用し
     ます:

          (add-to-list 'tramp-default-proxies-alist
                       '(nil "\\`root\\'" "/ssh:%h:"))
          (add-to-list 'tramp-default-proxies-alist
                       `(,(regexp-quote (system-name)) nil nil))

   ホップ達を通過するには、 ‘bash’ などの制限されたシェルを処理する必要
があります。 制限されたシェルを TRAMP に認識させると、 制限されたシェル
はプロキシのみで使用されます。

 -- User Option: tramp-restricted-shell-hosts-alist
     ‘bash’ などの制限付きシェルを実行しているホストの正規表現の連想リス
     ト(alist)。 TRAMP はそれらをプロキシとしてのみ使用します。

     上記の要塞(bastion)ホストで制限付きシェルを実行するように指定するに
     は、 以下のようにします:

          (add-to-list 'tramp-restricted-shell-hosts-alist
                       "\\`bastion\\.your\\.domain\\'")


File: tramp,  Node: Firewalls,  Next: Customizing Methods,  Prev: Multi-hops,  Up: Configuration

5.10 Passing firewalls
======================

しばしばリモート・ホストに直接到達できないことがあります。 ファイアウォ
ールが邪魔をしている可能性があり、プロキシ・サーバーを介して通過する可能
性があります。

   OpenSSH と PuTTY の両方で、 ‘CONNECT’ コマンド(RFC 2616, 2817 仕様に
準拠)を介して HTTP トンネルを使用して、 このようなプロキシ設定をサポート
します。 HTTP 1.1 以降のプロトコルを使用するプロキシ・サーバーは、 この
コマンドをサポートします。

5.10.1 Tunneling with ssh
-------------------------

‘ssh’ では、 ‘~/.ssh/config’ で ‘ProxyCommand’ エントリを使用できます:

     Host host.other.domain
          ProxyCommand nc -X connect -x proxy.your.domain:3128 %h %p

   ‘nc’ は、 HTTP トンネルを確立する BSD の netcat プログラムです。 この
ような機能を備えた他のプログラムも同様に使用できます。

   この例では、 ‘/ssh:host.your.domain:’ を開くと、 ポート 3128 で HTTP
プロキシ・サーバー ‘proxy.your.domain’ が渡されます。

5.10.2 Tunneling with PuTTY
---------------------------

PuTTY では外部プログラムを必要とせず、 HTTP トンネルのサポートは組み込み
です。 PuTTY 構成プログラムで、 ‘host.your.domain’ のセッションを作成し
ます。 ‘Connection/Data’ エントリで、 ‘HTTP’ オプションを選択し、
‘proxy.your.domain’ を ‘Proxy hostname’ として追加し、 3128 を ‘Port’ と
して追加します。

   ‘/plinkx:host.your.domain:’ を開くと、 ポート 3128 で HTTP プロキシ・
サーバー ‘proxy.your.domain’ が渡されます。


File: tramp,  Node: Customizing Methods,  Next: Customizing Completion,  Prev: Firewalls,  Up: Configuration

5.11 Using Non-Standard Methods
===============================

‘tramp-methods’ 変数には現在、 定義済み方式(method)の完全なリストがあり
ます。 このリストのどの部分も、 より適切な設定で変更できます。 ‘C-h v
trapp-methods <RET>’ でアクセスできる、その変数の Lisp ドキュメント
(Lisp documentation)を参照してください。

   ELPA アーカイブには、 そのような拡張機能の例がいくつかあります。 以下
をご覧下さい。 これらは Emacs のパッケージ・マネージャーでインストールで
きます

‘docker-tramp’
     Docker コンテナーとの統合。 コンテナーは、
     ‘/docker:user@container:/path/to/file’ を介してアクセスされます。 こ
     こで、‘user’ は使用する (オプションの) ユーザーであり、 ‘container’
     はコンテナーの ID または名前です。

‘kubernetes-tramp’
     Kubernetes クラスターにデプロイされた Docker コンテナーの統合。
     ‘docker-tramp’ から派生しています。 コンテナーは
     ‘/kubectl:user@container:/path/to/file’ 経由でアクセスされます。
     ‘user’ と ‘container’ は ‘docker-tramp’ と同じ意味です。

‘lxc-tramp’
     LXC コンテナーの統合。 コンテナーは ‘/lxc:container:/path/to/file’
     経由でアクセスされます。 ‘container’ は ‘docker-tramp’ と同じ意味で
     す。 ‘user’ の指定は無視されます。

‘lxd-tramp’
     LXD コンテナーの統合。 コンテナーは
     ‘/lxd:user@container:/path/to/file’ 経由でアクセスされます。 ‘user’
     と ‘container’ は ‘docker-tramp’ と同じ意味です。

‘magit-tramp’
     ‘magit’ を使用して Git リポジトリをブラウズします。 バージョン管理
     されたファイルは、 ‘/git:rev@root-dir:/path/to/file’ 経由でアクセス
     されます。 ‘rev’ は Git リビジョン、 ‘root-dir’ は
     ‘magit-tramp-hosts-alist’ で指定されたルート・ディレクトリの仮想ホ
     スト名です。

‘tramp-hdfs’
     hadoop/hdfs ファイル・システムへのアクセス。 ファイルは
     ‘/hdfs:user@node:/path/to/file’ 経由でアクセスされます。 ここで、
     ‘user’ は使用したいユーザーで、 ‘node’ は Hadoop サーバーの名前です
     。

‘tramp-nspawn’
     systemd-nspawn によって提供される環境へのアクセス。
     ‘/nspawn:user@container:/path/to/file’ を介してファイルにアクセスし
     ます。 ここで、 ‘user’ は使用する (オプションの) ユーザーであり、
     ‘container’ は接続先のコンテナーです。 systemd-nspawn とそのコンテ
     ナー・ユーティリティを実行するには、 多くの場合スーパー・ユーザー・
     アクセスが必要です。 マルチホップ・ファイル名と ‘doas’ または
     ‘sudo’ を使用して権限を上げてください。

‘vagrant-tramp’
     vagrant ボックスにアクセスするための便利な方式(method)。
     ‘/vagrant:box|sudo:box:/path/to/file’ のようなマルチ・ホップ・ファ
     イル名でよく使用されます。 ここで、 ‘box’ は vagrant ボックスの名前
     です。


File: tramp,  Node: Customizing Completion,  Next: Password handling,  Prev: Customizing Methods,  Up: Configuration

5.12 Selecting config files for user/host name completion
=========================================================

‘tramp-completion-function-alist’ は、 ユーザー名とホスト名の補完に定義
済みファイルを使用します(*note File name completion::)。 方式(method)ご
とに、 一連の構成ファイルとそのファイルをパースできる関数を保持します。
‘tramp-completion-function-alist’ の各エントリは、(METHOD PAIR1 PAIR2
...) の形式です。

   各 PAIR は (FUNCTION FILE) で構成されます。 FUNCTION は、補完のために
FILE からユーザー名とホスト名を抽出する役割を果たします。 この変数にアク
セスする関数は 2 つあります:

 -- Function: tramp-get-completion-function method
     この関数は、 METHOD 引数を取り、 METHOD の補完関数のリストを返しま
     す。

     例:
          (tramp-get-completion-function "rsh")

               ⇒ ((tramp-parse-rhosts "/etc/hosts.equiv")
                   (tramp-parse-rhosts "~/.rhosts"))

 -- Function: tramp-set-completion-function method function-list
     この関数は、 引数 METHOD と FUNCTION-LIST を取り、 FUNCTION-LIST を
     METHOD の補完関数のリストとして設定します。

     例:
          (tramp-set-completion-function "ssh"
           '((tramp-parse-sconfig "/etc/ssh_config")
             (tramp-parse-sconfig "~/.ssh/config")))

               ⇒ ((tramp-parse-sconfig "/etc/ssh_config")
                   (tramp-parse-sconfig "~/.ssh/config"))

   構成ファイルをパースする以下の定義済み関数達があります:

‘tramp-parse-rhosts’

     この関数は、 構文的に ‘~/.rhosts’ と同等のファイルをパースします。
     指定されている場合、 ホスト名とユーザー名の両方を返します。

‘tramp-parse-shosts’

     この関数は、 構文的に ‘~/.ssh/known_hosts’ と同等のファイルをパース
     します。 このようなファイルにはユーザー名が指定されていないため、 ホ
     スト名のみを返すことができます。

‘tramp-parse-sconfig’

     この関数は、 ‘~/.ssh/config’ スタイル・ファイルの ‘Host’ エントリで
     定義されたホスト・ニックネームを返します。

‘tramp-parse-shostkeys’

     ディレクトリ ‘/etc/ssh2/hostkeys/*’ と ‘~/ssh2/hostkeys/*’ の SSH2
     パース。 ホストは、 ファイル名 ‘hostkey_PORTNUMBER_HOST-NAME.pub’ で
     コーディングされます。 ユーザー名は常に ‘nil’ です。

‘tramp-parse-sknownhosts’

     ‘/etc/ssh2/knownhosts/*’ や ‘~/ssh2/knownhosts/*’ などの別の SSH2 ス
     タイルのディレクトリのパース。 この場合、 ホスト名はファイル名
     ‘HOST-NAME.ALGORITHM.pub’ でコーディングされます。 ユーザー名は常に
     ‘nil’ です。

‘tramp-parse-hosts’

     ホスト名専用の ‘/etc/hosts’ 関数。

‘tramp-parse-passwd’

     ユーザー名の ‘/etc/passwd’ をパースする関数。

‘tramp-parse-etc-group’

     グループ名の ‘/etc/group’ をパースする関数。

‘tramp-parse-netrc’

     ‘~/.netrc’ や ‘~/.authinfo’ スタイルのファイルをパースする関数。

   カスタム・データを含むカスタム・ファイルをカスタム構造に保持するには
、 カスタム関数を提供する必要があります。 カスタム関数は、 以下の規則を
満たす必要があります:

 -- Function: my-tramp-parse file
     引数 FILE は、 ホスト上のファイルまたは ‘nil’ でなければなりません
     。 この関数は、(USER HOST) のリストを返す必要があります。 これは、
     ユーザー名とホスト名の補完の候補となります。

     例:
          (my-tramp-parse "~/.my-tramp-hosts")

               ⇒ ((nil "toto") ("daniel" "melancholia"))


File: tramp,  Node: Password handling,  Next: Connection caching,  Prev: Customizing Completion,  Up: Configuration

5.13 Reusing passwords for several connections
==============================================

パスワード入力の繰り返しを回避するには、 ‘ssh’ のような方式の
‘ssh-agent’ や、 ‘plink’ のような方式の ‘pageant’ などのネイティブ・キャ
ッシュ・メカニズムを検討してください。

   TRAMP は、 ネイティブな解決方法で必要を満たせない場合に代替手段を提供
します。

5.13.1 Using an authentication file
-----------------------------------

パッケージ ‘auth-source.el’ は、 もともと No Gnus 用に開発されたもので、
さまざまなソースからパスワードを読み取ります(*Note auth-source:
(auth)Help for users.)。 デフォルトの認証ファイルは ‘~/.authinfo.gpg’ で
すが、 これはユーザー・オプション ‘auth-sources’ で変更できます。

認証ファイルの典型的なエントリ:

     machine melancholia port scp login daniel password geheim

   port は任意の TRAMP 方式(method)(*note Inline methods::, *note
External methods::)を取ることができます。 port の値を省略すると、 すべて
の TRAMP 方式(methods)に一致します。 TRAMP ファイル名構文で使用されるド
メインとポートを machine と login 項目に追加する必要があります:

     machine melancholia#4711 port davs login daniel%BIZARRE password geheim

   方式 ‘doas’ と ‘sudo’ と ‘sudoedit’ では、 接続を要求しているユーザー
のパスワードが必要であり、 ターゲット・ユーザーのパスワードは必要ありま
せん。 これらの接続がローカル・ホストで発生する場合、 ローカル・ユーザー
とローカル・ホストのエントリが使用されます。

     machine HOST port sudo login USER password secret

   USER と HOST は、 ‘(user-login-name)’ と ‘(system-name)’ によって返さ
れる文字列です。 これらの方法のいずれかがマルチ・ホップ (*note
Multi-hops::)経由で接続されている場合、その前のホップの資格情報が使用さ
れます。

   適切なエントリが存在しない場合、 パスワードは対話的に読み取られます。
ログイン(パスワードの検証)に成功した後、 Emacs は、 これをサポートする
‘auth-source’ バックエンドでさらに使用するために、 対応するエントリを保
存することを提案します。 これは、 ユーザー・オプション
‘auth-source-save-behavior’ を ‘nil’ に設定することで変更できます。

   デバッグ・メッセージを出すためには ‘auth-source-debug’ を ‘t’ に設定
します。

   *注意* ‘auth-source.el’ は ‘ftp’ 接続には使用されません。 これは、
TRAMP が作業を Ange FTP に渡すためです。 たとえば、 ‘~/.authinfo.gpg’ 認
証ファイルを使用する場合は、 ‘ange-ftp-netrc-filename’ をカスタマイズす
る必要があります。

     (customize-set-variable 'ange-ftp-netrc-filename "~/.authinfo.gpg")

   TRAMP パスワードに認証ファイルを使用したくない場合は、 接続ローカル変
数(connection-local variables)を使用してください (*note
(emacs)Connection Variables::) 以下のようにします:

     (connection-local-set-profile-variables
      'remote-without-auth-sources '((auth-sources . nil)))

     (connection-local-set-profiles
      '(:application tramp) 'remote-without-auth-sources)

5.13.2 Caching passwords
------------------------

TRAMP は、 入力されたパスワードをキャッシュし、 アクセス方式(method)に関
係なく、 同じユーザーまたはホスト名に対して必要なときに再利用できます。

   ‘password-cache-expiry’ は、 パスワードが記憶される期間(秒単位)を設定
します。 パスワードは永久に保存されることはなく、 現在の Emacs セッショ
ンの存続期間を超えて延長されることもありません。 有効期限を無効にするに
は ‘password-cache-expiry’ を ‘nil’ に設定します。

   パスワードのキャッシュを無効にするには ‘password-cache’ を ‘nil’ に設
定します。


File: tramp,  Node: Connection caching,  Next: Predefined connection information,  Prev: Password handling,  Up: Configuration

5.14 Reusing connection related information
===========================================

初期接続時間を短縮するために、 TRAMP は以前の接続プロパティ(connection
properties)をユーザー・オプション ‘tramp-persistency-file-name’ で指定さ
れたファイルに保存します。

   ‘tramp-persistency-file-name’ のデフォルトのファイル名は
‘~/.emacs.d/tramp’ です。

   TRAMP は、 Emacs の起動時にこのファイルを読み取り、 Emacs の終了時に
書き込みます。 TRAMP のこのファイルを削除すると、 次の Emacs 起動時に新
しいファイルを再作成します。

   接続の永続的な保存を無効にするには ‘tramp-persistency-file-name’ を
‘nil’ に設定します。

   TRAMP が (コマンド ‘uname -sr’ を介して) リモート・ホストでオペレーテ
ィング・システムのバージョンの変更を検出すると、 そのホストのすべての接
続関連情報をフラッシュし、 新しいエントリを作成します。


File: tramp,  Node: Predefined connection information,  Next: Remote programs,  Prev: Connection caching,  Up: Configuration

5.15 Setting own connection related information
===============================================

より正確なカスタマイズのために、 ‘tramp-methods’ で指定されたパラメータ
ーを手動で上書きできます。

   ‘tramp-connection-properties’ を設定して、‘tramp-methods’ を手動で上
書きします。 このリストのプロパティは、‘(REGEXP PROPERTY VALUE)’ の形式
になっています。 REGEXP は、リモート・ファイル名とマッチします。 ‘nil’ を
使用するとすべてにマッチさせます。 PROPERTY はプロパティの名前で、 VALUE
はプロパティの値です。

   PROPERTY は、‘tramp-methods’ に含まれる方式(method)固有のパラメーター
です。 ‘tramp-methods’ のパラメーター key は、 シンボル名 ‘tramp-<foo>’
です。 そのプロパティを上書きするには、 PROPERTY に文字列 "<foo>" を使用
します。 たとえば、 以下はリモート・シェルを変更します:

     (add-to-list 'tramp-connection-properties
                  (list (regexp-quote "/ssh:user@randomhost.your.domain:")
                        "remote-shell" "/bin/ksh"))

     (add-to-list 'tramp-connection-properties
                  (list (regexp-quote "/ssh:user@randomhost.your.domain:")
                        "remote-shell-login" '("-")))

   ‘tramp-methods’ のパラメータ ‘tramp-remote-shell’ と
‘tramp-remote-shell-login’ に、 リモート・ホスト用の新しい値を追加しまし
た。

   PROPERTY は、 ‘tramp-persistency-file-name’ 内で見つけられる任意のプ
ロパティにすることもできます。

5.15.1 Relevant connection properties to override
-------------------------------------------------

すべての接続プロパティを変更する必要があるわけではありません。 最も関連
性の高いプロパティを以下に示します:

   • "login-program"

     プロパティ "login-program" は、 リモート・ホストへの接続に使用され
     るプログラムを格納します。 場合によっては、 プログラムがホスト上で
     別の名前になっている場合や、 別のパスにある場合があります。 この場
     合、 接続方式(connection method)ごとに特別なデフォルト値を上書きで
     きます。 ‘tramp-sh.el’ のすべての接続方式(connection methods)で使用
     されます。

   • "login-args"

     "login-args" は、 "login-program" に渡す引数リストのリストを指定し
     ます。 これらのリストを構築する方法は ‘tramp-methods’ の docstring
     を読んで確認してください。

   • "remote-shell"

     このプロパティは、 リモート・ホストに適用するリモート・シェルを
     TRAMP に指示します。 ‘tramp-sh.el’ のすべての接続方式で使用されます
     。 デフォルト値は "/bin/sh" です。

   • "remote-shell-login"

     "remote-shell" と組み合わせて使用するプロパティ。 これは、 どのシェ
     ル引数(shell argument)がログイン・シェルをトリガーするかを指定しま
     す。 デフォルト値は "-l" ですが、 ‘ksh’ などの一部のシェルは "-" を
     好みます。

   • "session-timeout"

     すべての ‘tramp-sh.el’ ベースの方式(methods)は、 プロパティ
     "session-timeout" を受け入れます。 これは、セキュリティ上の理由で接
     続が無効になってから再確立する必要があるまでの時間(秒単位)です。
     ‘nil’ 値は、 この機能を無効にします。 定義済みの値を使用する ‘sudo’
     方式と ‘doas’ 方式を除いて、 ほとんどの方式はこのプロパティを設定し
     ません(not set)。

   • "~"
     "~user"

     これは、 リモート・ホストのホーム・ディレクトリです。 この接続プロ
     パティを設定すると、 ‘adb’ や ‘rclone’ や ‘sshfs’ など、 リモートの
     ホーム・ディレクトリを "~", "~user" などから展開できない方式
     (method)の場合に特に役立ちます。 例として *note Home directories::
     を参照してください。

   • "tmpdir"

     リモート・ホスト上の一時(temporary)ディレクトリ。 指定されていない
     場合、 デフォルト値は ‘adb’ 方式の場合は "/data/local/tmp" で、
     ‘smb’ 方式の場合は "/C$/Temp" で、 それ以外は "/tmp" です。

   • "direct-async-process"

     このプロパティが ‘nil’ 以外の場合、 二者択一として、 ‘make-process’
     と ‘start-file-process’ のうち、 よりパフォーマンスの高い方の実装が
     適用されます。 接続方式(method)も、 ‘tramp-methods’ の
     ‘tramp-direct-async’ パラメータを ‘nil’ 以外でマークする必要があり
     ます。 制約の議論については、 *note Improving performance of
     asynchronous remote processes:: を参照してください。

   • "posix"

     ‘smb’ 方式を使用した接続は、 リモート・ホストが posix コマンドをサ
     ポートしているかどうかを確認します。 リモート・ホストが Samba を実
     行している場合、 この機能を確認(confirm)します。 ただし、一部の非常
     に古い Samba バージョンでは、 実装にエラーがあります。 これらのホス
     トの posix コマンドを抑制するには、 プロパティ "posix" を ‘nil’ に
     設定する必要があります。

     このプロパティのデフォルト値は ‘t’ (‘tramp-methods’ では指定されて
     いません) です。 リモート・ホストがネイティブの MS Windows を実行し
     ている場合、 このプロパティは効果がありません。

   • "mount-point"

     FUSE ベースのファイル・システムがマウントされているディレクトリ・フ
     ァイル名。 このプロパティのデフォルト値は
     "/tmp/tramp.method.user@host#port" です (‘tramp-methods’ では指定さ
     れていません)。

   • "mount-args"
     "copyto-args"
     "moveto-args"
     "about-args"

     これらのプロパティは、 さまざまな ‘rclone’ 操作に対するオプションの
     フラグを保持します。 値を変更したい場合は、 ‘tramp-methods’ のデフ
     ォルト値を参照してください。


File: tramp,  Node: Remote programs,  Next: Remote shell setup,  Prev: Predefined connection information,  Up: Configuration

5.16 How TRAMP finds and uses programs on the remote host
=========================================================

TRAMP は、リモート・ホスト上のいくつかのコマンドへのアクセスと実行権限を
要求します: ‘ls’ と ‘test’ と ‘find’ と ‘cat’ です。

   他にも *note Inline methods:: と *note External methods:: の接続に必
要なプログラムがあります。

   リモート・ファイル・アクセスのパフォーマンスと精度を改善するために、
TRAMP は ‘perl’ (または ‘perl5’) と ‘grep’ を、使用可能な場合、使用しま
す。

 -- User Option: tramp-remote-path
     ‘tramp-remote-path’ は、 TRAMP が *note Remote programs:: を検索で
     きるリモート・ディレクトリ・パスを指定します。

     TRAMP は、‘/bin’ や ‘/usr/bin’ などの標準的なデフォルトを使用します
     が、 これはほとんどのホストにとって適切です。 ホストとパスの違いに
     対応するには、 たとえば、 Debian GNU/Linux の ‘/bin:/usr/bin’ また
     は Solaris の
     ‘/usr/xpg4/bin:/usr/ccs/bin:/usr/bin:/opt/developerstudio12.6/bin’
     では、 TRAMP はリモート・ホストで ‘getconf PATH’ でクエリを実行し、
     シンボル ‘tramp-default-remote-path’ を更新します。

     ホストがセキュリティ上の理由でパスの場所を曖昧にしている場合は、 以
     下に示すように、 接続時に TRAMP を使用するために、 そのようなパスを
     ローカルの ‘.emacs’ に手動で追加します。

          (add-to-list 'tramp-remote-path "/usr/local/perl/bin")

     リモート・パスを見つけるもう 1 つの方法は、 リモート・ホストによっ
     てリモート・ユーザーに割り当てられたパスを使用することです。 TRAMP
     は通常、 ログイン後にこのリモート・パスを保持しません。 ただし、
     ‘tramp-own-remote-path’ はパス値を保持し、 ‘tramp-remote-path’ を更
     新するために使用できます。

          (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

     *注意* これは、 リモートの ‘/bin/sh’ シェルがログイン引数 ‘-l’ をサ
     ポートしている場合にのみ機能することに注意してください。

   ‘tramp-remote-path’ は、 接続ローカル変数(connection-local
variables)を介してホストごとに設定することもできます。 *Note
(emacs)Connection Variables:: あなたは以下のようにあなた独自の検索ディレ
クトリを定義できます:

     (connection-local-set-profile-variables 'remote-path-with-bin
        '((tramp-remote-path . ("~/bin" tramp-default-remote-path))))

     (connection-local-set-profile-variables 'remote-path-with-apply-pub-bin
        '((tramp-remote-path . ("/appli/pub/bin" tramp-default-remote-path))))

     (connection-local-set-profiles
        '(:application tramp :machine "randomhost") 'remote-path-with-bin)

     (connection-local-set-profiles
        '(:application tramp :user "anotheruser" :machine "anotherhost")
          'remote-path-with-apply-pub-bin)

   リモート検索パスが変更された場合、 ローカルの TRAMP キャッシュを再計
算する必要があります。 TRAMP に再計算を強制するには、 ‘M-x
Tramp-cleanup-this-connection <RET>’ とするか、 何処かにつなげ直します。
(*note Cleanup remote connections::)


File: tramp,  Node: Remote shell setup,  Next: Ssh setup,  Prev: Remote programs,  Up: Configuration

5.17 Remote shell setup hints
=============================

5.17.1 Changing the default remote or local shell
-------------------------------------------------

デフォルトでは、 TRAMP はコマンド ‘/bin/sh’ を使用して、 リモート・ホス
トでシェルを起動します。 これは、 接続プロパティ "remote-shell" を設定す
ることで変更できます。 *note Predefined connection information:: を参照
してください。 たとえば、 リモート・ホストで ‘/usr/bin/zsh’ を使用したい
場合は以下のようにします

     (add-to-list 'tramp-connection-properties
                  (list (regexp-quote "/sshx:user@host:")
                        "remote-shell" "/usr/bin/zsh"))

   これは、 ‘sshx’ や ‘plink’ などの、 リモート・ログイン・シェルをオー
バーライドできる接続方式でのみ機能します。 これをサポートする接続方式に
ついては、 *note Inline methods:: と *note External methods:: を参照して
ください。

   このアプローチには、 ‘tramp-sh-extra-args’ の設定が適用されるという利
点もあります。 ‘zsh’ では、 zle オプションの設定によるシェル・プロンプト
のトラブルが回避されます。 ‘bash’ の場合、 ‘~/.editrc’ または
‘~/.inputrc’ の読み込みが抑制されます。

   プロセスを作成するために TRAMP が使用するローカル・シェルでも同様の問
題が発生する可能性があります。 デフォルトでは、 これにはコマンド
‘/bin/sh’ を使用しますが、 これは別のシェルへのリンクでもあります。 これ
を上書きするために、 あなたは以下を適用するかもしれません

     (customize-set-variable 'tramp-encoding-shell "/usr/bin/zsh")

   これは ‘tramp-sh-extra-args’ の設定も使用します。

   *注意*: 接続に ‘ssh’ ベースの方法を使用する場合は、 ‘ssh’ 構成で
‘RemoteCommand’ オプション、たとえば ‘screen’ などを「設定しないでくださ
い」。 一方、 ‘sshx’ や ‘scpx’ などの ‘ssh’ ベースのメソッドは、 構成フ
ァイルの ‘RemoteCommand’ オプションを黙って上書きします。

5.17.2 Other remote shell setup hints
-------------------------------------

TRAMP は、 通常の場所で標準プログラムが利用可能かどうかをチェックします
。 一般的な戦術には、 ‘test -e’ と ‘/usr/bin/test -e’ と ‘/bin/test -e’
を連続して試すことが含まれます。 ‘ls -d’ は、 もう一つのアプローチです。
しかし、 これらのアプローチは、 以下の新しいログイン ・パターンには役に
立ちません。

   TRAMP が 2 要素ログイン(two-factor logins)または追加のチャレンジ質問
(additional challenge questions)(生年月日、 セキュリティ・コード、 パス
フレーズの入力など)に遭遇した場合、 TRAMP はそれらに対応するためにさらに
いくつかの構成手順が必要です。

   パスワード・プロンプトとパスフレーズ・プロンプトの違いは、 パスワード
はログインを完了するためのもので、 パスフレーズはssh鍵などのローカル認証
情報へのアクセスを許可するためのものであることです。

   ログイン・セキュリティのすべてのバリエーションに対応する単一の構成は
ありません。 特に特殊なものはそうです。 ただし、 TRAMP は、 最も一般的な
ものに対処するためにいくつかの調整(tweaks)を提供します。

‘tramp-shell-prompt-pattern’

     ‘tramp-shell-prompt-pattern’ はリモート・ログイン・シェル・プロンプ
     ト用であり、 ローカル・ログイン・シェル・プロンプト
     ‘shell-prompt-pattern’ とは異なる場合があります。 ほとんどのホスト
     は同じプロンプトを使用するため、 TRAMP は両方のプロンプトに同様のデ
     フォルト値を設定します。

‘tramp-password-prompt-regexp’
‘tramp-wrong-passwd-regexp’

     TRAMP は ‘tramp-password-prompt-regexp’ を使用して、 パスワードのプ
     ロンプトとパスフレーズのプロンプトを区別します。 デフォルトでは、
     ‘tramp-password-prompt-regexp’ は英語環境(English language
     environments)での検出を処理します。 以下のローカライズの例を参照し
     てください:

          (customize-set-variable
           'tramp-password-prompt-regexp
            (concat
             "^.*"
             (regexp-opt
              '("passphrase" "Passphrase"
                ;; English
                "password" "Password"
                ;; Deutsch
                "passwort" "Passwort"
                ;; Français
                "mot de passe" "Mot de passe")
              t)
             ".*:\0? *"))

     このユーザーオプションは、 デフォルトで、 TRAMP がロードされるとき
     に ‘password-word-equivalents’ から初期化されます。 通常、 このユー
     ザーオプションを変更する代わりに、 そのユーザーオプションに新しいパ
     スフレーズを追加する方が便利です。

     TRAMP が ‘tramp-wrong-passwd-regexp’ を使用する間違ったパスワード・
     プロンプト(wrong password prompts)を処理するには、 同様のローカライ
     ズが必要になる場合があります。

‘tramp-terminal-type’

     TRAMP は、 ユーザー・オプション ‘tramp-terminal-type’ を使用して、
     実行するシェルのリモート環境変数 ‘TERM’ を設定します。 デフォルトで
     は "dumb" ですが、これは変更できます。 ダム(dumb)端末は、 TRAMP の
     バックグラウンド・セッションを実行するのに最適です。 ただし、 イン
     タラクティブなリモート・シェルを実行するには、 別の設定が必要になる
     場合があります。 これは、 ‘process-environment’ の ‘TERM’ 環境変数
     を調整(tweak)することで実現できます。

          (let ((process-environment
                 (cons "TERM=xterm-256color" process-environment)))
            (shell))

Determining a TRAMP session

     しばしばシェルが TRAMP 制御下で実行されているかどうかを識別する必要
     があります。 環境変数 ‘TERM’ の設定が役立ちます:

          if test "$TERM" = "dumb"; then
             ...
          fi

     別の手としては、 環境変数 ‘INSIDE_EMACS’ を確認することです。 Emacs
     のすべてのサブプロセスと同様に、 これは親 Emacs プロセスのバージョ
     ンに設定されます(*Note (emacs)Interactive Shell::)。 TRAMP は、 自
     身のパッケージ・バージョンをこの文字列に追加します。 これは、 下位
     シェルでのさらなるテストに使用できます。 その環境変数の文字列は常に
     以下のようになります

          echo $INSIDE_EMACS
          ⇒ 27.2,tramp:2.4.5

‘tset’ and other questions

     端末タイプでの不適切なプロンプトを抑制するために、 TRAMP は、 リモ
     ート・ログイン・プロセスがユーザー・オプション
     ‘tramp-terminal-type’ (上記を参照)を介して開始される前に ‘TERM’ 環
     境変数を設定します。 これは一般的な ‘tset’ 関連のプロンプトを無しに
     します。

     (通常はリモート・ホスト上のログイン・スクリプトからトリガーされる、
     )このようなプロンプトを処理するための、 TRAMPの戦略は、 シェルの初
     期化処理がロンプトによって中断(interrupt)されないように環境変数を設
     定することです。

     別のアプローチとしては、 ‘tramp-actions-before-shell’ を使用して、
     そのような質問を識別できる文字列で TRAMP を構成することです。 たと
     えば:

          (defconst my-tramp-prompt-regexp
            "Enter the birth date of your mother:\\s-*"
            "Regular expression matching my login prompt question.")

          (defun my-tramp-action (proc vec)
            "Enter \"19000101\" in order to give a correct answer."
            (save-window-excursion
              (with-current-buffer (tramp-get-connection-buffer vec)
                (tramp-message vec 6 "\n%s" (buffer-string))
                (tramp-send-string vec "19000101"))))

          (add-to-list 'tramp-actions-before-shell
                       '(my-tramp-prompt-regexp my-tramp-action))

     ‘tramp-actions-before-shell’ で使用される正規表現は、 接続バッファ
     の末尾とマッチする必要があります。 パフォーマンス上の理由により、 こ
     の検索はバッファの最後から開始され、 後方 256 文字に制限されていま
     す。

Conflicting names for users and variables in ‘.profile’

     ユーザー名が ‘.profile’ などのローカル・ファイル内の変数名と同じで
     ある場合、 TRAMP は環境変数に対して誤った値を送信する可能性がありま
     す。 誤った値を避けるために、 ローカル変数名をユーザー名とは異なる
     名前に変更してください。 たとえば、 ユーザー名が ‘FRUMPLE’ の場合、
     変数名を ‘FRUMPLE_DIR’ に変更します。

Non-Bourne commands in ‘.profile’

     リモート・ホストの ‘.profile’ が Bourne シェル以外のシェルにも使用
     されている場合、 ‘.profile’ 内のコマンドの互換性のない構文によって
     、 ホスト上の Bourne シェルでエラーが発生し、 クライアントの TRAMP
     接続が完了しない場合があります。

     ‘.profile’ の Bourne シェル非互換構文の一例: ‘FOO=bar; export FOO’
     の代わりに ‘export FOO=bar’ を使用。 Bourne シェルは ‘.profile’ に
     入力された、 このエクスポート・コマンドを認識しないため、 リモート
     ・ログイン後、 TRAMP はリモート・ホストで ‘/bin/sh’ の実行中にエラ
     ーをトリガーします。

     同様に、 Bourne シェルは (‘~’) 文字展開を行わないため、 パスに
     (‘~’) 文字があるとエラーが発生します。

     これらの非互換性を回避する方法の一つは、 ‘~/.shrc’ や ‘~/.profile’
     Bourne シェル内のすべてのコマンドを互換性のあるものにして、 TRAMP が
     そのリモートへの接続を完了できるようにすることです。 そのリモートで
     非 Bourne シェルの使用に対応するには、 他のシェル固有の構成ファイル
     を使用します。 たとえば、 bash は ‘~/.bash_profile’ を使用し、
     ‘.profile’ を無視できます。

Interactive shell prompt

     TRAMP は、 堅牢なパースのために内部的にリモート・シェル・プロンプト
     を再定義します。 この再定義は、 ‘M-x shell <RET>’ などのコマンドを
     介した対話型リモート・シェルのプロンプトの外観に影響します。 ただし
     、 このようなプロンプトは、 これらの環境変数を使用して、 より読みや
     すく認識しやすいものにリセットできます。

     TRAMP は、 起動スクリプト・ファイル ‘~/.emacs_SHELLNAME’ に
     ‘INSIDE_EMACS’ 環境変数を設定します。

     ‘SHELLNAME’ は ‘bash’ または同等のシェル名です。 ‘.emacs’ の環境変
     数 ‘ESHELL’ を以下のように設定することにより変更します:

          (setenv "ESHELL" "bash")

     それから、 ‘~/.emacs_SHELLNAME’ のプロンプト文字列を以下のように再
     設定します:

          # Reset the prompt for remote TRAMP shells.
          if [ "${INSIDE_EMACS/*tramp*/tramp}" == "tramp" ] ; then
             PS1="[\u@\h \w]$ "
          fi

     *Note (emacs)Interactive Shell::.

‘busybox’ / ‘nc’

     TRAMP の ‘nc’ 方式(method)は、 ‘nc’ コマンドを使用して、以下のよう
     にリスナー(listener)をインストールおよび実行します (‘tramp-methods’
     参照)。

          $ nc -l -p 42

     上記のコマンドライン構文は、 ‘busybox’ バージョンで変更されました。
     ‘nc’ が ‘-p’ パラメータを拒否する場合は、 以下のように上書きします:

          (add-to-list 'tramp-connection-properties
                       `(,(regexp-quote "192.168.0.1")
                         "remote-copy-args" (("-l") ("%r"))))

     ここで、 ‘192.168.0.1’ はリモート・ホストの IP アドレスです(*note
     Predefined connection information::)。


File: tramp,  Node: Ssh setup,  Next: FUSE setup,  Prev: Remote shell setup,  Up: Configuration

5.18 Ssh setup hints
====================

最も一般的な TRAMP 接続ファミリは、 OpenSSH の ‘ssh’ や ‘scp’、 または
MS Windows 上の PuTTY の ‘plink’ や ‘pscp’ に基づいています。 以下に、い
くつかの構成に関する推奨事項を示します。

5.18.1 Using ssh config include for host name completion
--------------------------------------------------------

OpenSSH 構成ファイルは、 追加の構成ファイルに ‘Include’ オプションを使用
できます。 デフォルトの TRAMP ホスト名補完は、 このオプションを無視しま
す。 ただし、これは自分で構成できます。

   ‘~/.ssh/config’ ファイルに以下のオプションが含まれているとします:

     Include ~/.ssh/conf.d/*

   ‘.emacs’ 内の以下のコード片は、 そのディレクトリ内のすべてのファイル
を使用してホスト名を補完します:

     (tramp-set-completion-function
      "ssh" (append (tramp-get-completion-function "ssh")
                    (mapcar (lambda (file) `(tramp-parse-sconfig ,file))
                            (directory-files
                             "~/.ssh/conf.d/"
                             'full directory-files-no-dot-files-regexp))))

   このコード片は、 ‘ssh’ 方式(method)に対するものです。 "ssh" を "scp"
に置き換えると、その方式(またはあなたの好きなその他の方式)に対しても同じ
ことが行われます。

5.18.2 Detection of session hangouts
------------------------------------

ネットワークがダウンすると、 ローカル・ホスト上の ‘ssh’ セッションがハン
グアップ(hang)します。 TRAMP は、 そのようなハングアップを安全に検出でき
ません。 OpenSSH は、 ‘~/.ssh/config’ で以下の設定を使用して、 このよう
なハングアップを強制終了するように構成できます:

     Host *
          ServerAliveInterval 5
          ServerAliveCountMax 2

   これに対応する PuTTY 設定は、 ‘Connection’ エントリの ‘Seconds
between keepalives’ オプションにあります。 これを 5 に設定します。 カウ
ントは設定できません(訳注: ServerAliveCountMax相当はありません)。

5.18.3 Using ssh connection sharing
-----------------------------------

TRAMP は、 可能であれば、 デフォルトで ‘ControlMaster=auto’ OpenSSH オプ
ションを使用します。 ただし、 ‘ssh’ セッションを開始するときに
‘ControlPath’ 設定を上書きします。 TRAMP は、 Emacs セッションの外で開か
れたマスターセッション(master session)が開かれなくなった場合に、 ストー
ル(stall)を回避するためにこれを行います。 そのため、 ‘ssh’ がすでに開い
ている場合でも、 TRAMP は再度パスワードを要求します。

   一部の OpenSSH バージョンは ‘ControlPersist’ オプションをサポートして
おり、 変数 ‘tramp-ssh-controlmaster-options’ が以下のようにカスタマイズ
されている場合、‘ControlPath’ を設定できます:

     (customize-set-variable
      'tramp-ssh-controlmaster-options
      (concat
        "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
        "-o ControlMaster=auto -o ControlPersist=yes"))

   注意: ‘%r’ と ‘%h’ と ‘%p’ は、 ‘%%r’ や ‘%%h’ や ‘%%p’ としてエンコ
ードする必要があることに注意してください。

   ‘~/.ssh/config’ ファイルが上記の動作に対して適切に設定されている場合
、 ‘ssh’ への変更は、 以下の ‘nil’ 設定で抑制できます:

     (customize-set-variable 'tramp-use-ssh-controlmaster-options nil)

   あなたの ‘ssh’ 設定で ‘ProxyCommand’ または ‘ProxyJump’ オプションを
使用する場合、 これらも ‘nil’ に設定する必要があります。

   ‘ControlMaster’ オプションを使用するには、 TRAMP は ‘ssh’ クライアン
トがこのオプションをサポートしているかどうかを確認する必要があります。 こ
れは、 最初のホップのローカル・ホストでのみ可能です。 したがって、 TRAMP
はプロキシ・ホストではこのオプションを使用しません。

   このオプションを他のホップにも使用する場合は、 プロキシ・ホストで
‘~/.ssh/config’ を構成する必要があります:

     Host *
          ControlMaster      auto
          ControlPath        tramp.%C
          ControlPersist     no

   これらのオプションがプロキシ・ホストでサポートされているかどうかは、
man ページ の ‘ssh_config(5)’ を確認してください。

   MS Windows では、 ‘tramp-use-ssh-controlmaster-options’ はデフォルト
で ‘nil’ に設定されています。 これは、 ‘OpenSSH’ の MS Windows および
MSYS2 実装がこのオプションを適切にサポートしていないためです。

   PuTTY では、 ‘Connection/SSH’ エントリで接続共有(connection sharing)を
実現し、 ‘Share SSH connections if possible’ オプションを有効にできます
。

5.18.4 Configure direct copying between two remote servers
----------------------------------------------------------

TRAMP は、 外部方式(external methods)を介して異なるリモート・ホスト間で
2 つのファイルをコピーするときに、 一時的なローカル・コピーを使用します
。 この動作は、 TRAMP が十分に処理できない認証の問題によるものです。 た
だし、 ‘scp’ 接続の場合、 これは変更できます。 ファイルが 2 つの異なるリ
モート・ホスト ‘source’ と ‘target’ の間でコピーされ、かつ、

   − 変数 ‘tramp-use-scp-direct-remote-copying’ が 非 ‘nil’ で、かつ、

   − リモートホスト ‘source’ が、 ‘~/.ssh/config’ で ‘RemoteCommand’ オ
     プションを使用せず、かつ、

   − リモート・ホスト ‘target’ は、 ローカル・ホストとホスト ‘source’ か
     ら見たとき同一のホスト・キーを表示し、 かつ、

   − ホスト ‘source’ で実行されている ‘scp’ は、パスワードを必要とせずに
     ホスト ‘target’ に対して認証できる場合、

TRAMP は、 以下のように、 ホスト ‘source’ と ‘target’ の間で直接リモート
・コピー(direct remote copying)を適用します

     scp -p -T -R -q -r source:/path/to/file target:/path/to/another/file

   これにより、 大きなファイルをコピーするときに、 ローカルの一時ディレ
クトリもオーバーランから保護されます。

   これらの条件が当てはまらず、 ‘tramp-use-scp-direct-remote-copying’ が
非 ‘nil’ の場合、 ‘-R’ の代わりにオプション ‘-3’ が使用されます。 .

   TRAMP が直接リモート・コピー(direct remote copying)を使用する場合、 パ
スワード・キャッシュは考慮されません(not consulted)。

5.18.5 Issues with Cygwin ssh
-----------------------------

このセクションはまだ不完全です。 良い解決方法をお待ちしています。

   Cygwin の ‘ssh’ は、Emacs の Cygwin バージョンでのみ機能します。 互換
性を確認するには、 ‘M-x eshell <RET>’ と入力し、 ‘ssh test.host <RET>’ を
開始します。 非互換性により、 以下のメッセージがトリガーされます:

     Pseudo-terminal will not be allocated because stdin is not a terminal.

   Cygwin の ‘ssh’ の一部の古いバージョンは、 ‘sshx’ アクセス方式で動作
します。 詳細については、 <https://cygwin.com/faq/> で Cygwin の FAQ を
参照してください。

   the Emacs Wiki (https://www.emacswiki.org/emacs/SshWithNTEmacs) では
、 ヘルパー・プログラム ‘fakecygpty’ を使用してこの問題を修正する方法が
説明されています。

   ‘scpx’ アクセス方式を使用する場合、 Emacs は、 ‘c:/foo’ などの MS
Windows ファイル名で ‘scp’ を呼び出すことができます。 しかし、 Cygwin と
ともにインストールされた ‘scp’ のバージョンは、 MS Windows のファイル命
名法を認識しないため、 ‘c’ という名前のホストを誤って検索します。

   回避策(workaround): ‘scp’ のラッパー・スクリプトを記述して、 Windows
ファイル名を Cygwin ファイル名に変換します。

   MS Windows でパスワードなしの対話に ‘ssh-agent’ を使用する場合、
‘ssh’ 方式は環境変数 ‘SSH_AUTH_SOCK’ に依存します。 ただし、 Emacs がデ
スクトップ・ショートカットから起動され、 かつ、 認証が失敗した場合、 こ
の変数は設定されません。

   回避策の１つは、 ‘Pageant’ などの MS Windows ベースの SSH エージェン
トを使用することです。 これは PuTTY スイートの一部です。

   最後の手段は、 シェルから Emacs を起動することです。


File: tramp,  Node: FUSE setup,  Next: Android shell setup,  Prev: Ssh setup,  Up: Configuration

5.19 FUSE setup hints
=====================

FUSE ファイル・システムは、 デフォルトで
‘/tmp/tramp.method.user@host#port’ にマウントされます。 ユーザー名とポー
ト番号はオプションです。 ファイル・システムがすでにマウントされている場
合は、 そのまま使用されます。 マウント・ポイントがまだ存在しない場合、
TRAMP はこのディレクトリを作成します。

   マウント・ポイントは、 接続プロパティ "mount-point" によって上書きで
きます(*note Predefined connection information::)。 例:

     (add-to-list 'tramp-connection-properties
                  `(,(regexp-quote "/sshfs:user@host:")
                    "mount-point"
                    ,(expand-file-name "sshfs.user@host" user-emacs-directory)))

   ユーザー・オプション ‘tramp-fuse-unmount-on-cleanup’ が 非 ‘nil’ 設定
されている場合、 接続のクリーンアップ時または Emacs の終了時にマウント・
ポイントがアンマウントされるかどうかを制御します。

5.19.1 ‘rclone’ setup
---------------------

‘rclone’ の ‘mount’ 操作や ‘coopyto’ 操作や ‘moveto’ 操作や ‘about’ 操作
のデフォルト引数は、方式(method)固有のパラメータとして変数
‘tramp-methods’ で宣言されます。 通常、上書きする必要はありません。

   必要に応じて、 これらのパラメーターは、 接続プロパティ "mount-args" や
"copyto-args" や "moveto-args" や "about-args" として上書きできます
(*Note Predefined connection information::)。 これらはすべて文字列のリス
トです。

   "--dir-cache-time" の変更には注意してください。 これにより、ファイル
の表示が遅くなる可能性があります。

5.19.2 ‘sshfs’ setup
--------------------

‘sshfs’ 方式は、 ‘sshfs’ コマンドに渡される変数 ‘tramp-methods’ でマウン
ト引数を宣言します。 これは文字列のリストのリストであり、 接続プロパティ
"mount-args" によって上書きできます(*Note Predefined connection
information::)。

   さらに、 ‘ssh’ コマンドを使用して、 リモート・プロセスを実行するため
の引数も宣言します。 これらは変更する必要はありません。


File: tramp,  Node: Android shell setup,  Next: Auto-save File Lock and Backup,  Prev: FUSE setup,  Up: Configuration

5.20 Android shell setup hints
==============================

TRAMP は ‘adb’ 方式(method)を使用して Android デバイスにアクセスします。
Android デバイスは、 USB 接続を介して制限付きシェル・アクセスを提供しま
す。 ローカル・ホストには ‘adb’ プログラムがインストールされている必要が
あります。 通常、 ファイル ‘/adb::/’ を開くだけで十分です。 その後、
‘dired’ を介してファイル・システムをナビゲートできます。

   あるいは、 Android デバイスで ‘sshd’ プロセスを実行する ‘Termux’ や
‘SSHDroid’ などのアプリケーションは、 これらの設定が調整されていれば、
‘ssh’ ベースの方式(method)を受け入れることができます:

   • Android デバイスは ‘/bin/sh’ を提供しないため、 リモート・シェルに
     は ‘sh’ を指定する必要があります。 ‘sh’ は、 以下の設定でデバイスに
     インストールされているシェルを呼び出します:

          (add-to-list 'tramp-connection-properties
                       (list (regexp-quote "192.168.0.26") "remote-shell" "sh"))

     ここで、 ‘192.168.0.26’ は Android デバイスの IP アドレスです。
     (*note Predefined connection information::)。

   • Android デバイスでは、 ディレクトリ名の前にアプリケーション固有のプ
     レフィックスが付きます。 これは、 ‘Termux’ の場合、 ‘/usr/bin’ では
     なく、 ‘/data/data/com.termux/files/usr/bin’ です。
     ‘tramp-remote-path’ でファイル名を調整する必要があります。
     ‘tramp-remote-path’ のファイル名を、 たとえば以下のように
     connection-local 設定を介して調整する必要があります (*note
     (emacs)Connection Variables::)

          (connection-local-set-profile-variables
           'tramp-connection-local-termux-profile
           `((tramp-remote-path
              . ,(mapcar
          	(lambda (x)
          	  (if (stringp x) (concat "/data/data/com.termux/files" x) x))
          	(copy-tree tramp-remote-path)))))

          (connection-local-set-profiles
           '(:application tramp :machine "192.168.0.26")
           'tramp-connection-local-termux-profile)

   • Android デバイスがルート化(‘rooted’)されてない場合は、 一時ファイル
     用に書き込み可能なディレクトリを指定します:

          (add-to-list 'tramp-connection-properties
                       (list (regexp-quote "192.168.0.26")
          		   "tmpdir" "/data/data/com.termux/files/home/tmp"))

   • コマンド ‘C-x C-f /ssh:192.168.0.26#2222: <RET>’ でリモート接続を開
     きます。 ここで、 ‘sshd’ はポート ‘2222’ でリッスンしています。

     (推奨)対応するエントリを ‘~/.ssh/config’ ファイルに追加するには、 以
     下を使用します:

          Host android
               HostName 192.168.0.26
               User root
               Port 2222

     上記例で示した IP アドレスの代わりにホスト名 ‘android’ を使用するに
     は、 接続プロパティを以下のように修正します:

          (add-to-list 'tramp-connection-properties
                       (list (regexp-quote "android") "remote-shell" "sh"))
          (add-to-list 'tramp-connection-properties
                       (list (regexp-quote "android")
          		   "tmpdir" "/data/data/com.termux/files/home/tmp"))
          (connection-local-set-profiles
           '(:application tramp :machine "android")
           'tramp-connection-local-termux-profile)

     これにより、 より簡潔なコマンド ‘C-x C-f /ssh:android: <RET>’ でリ
     モート接続を開けます。


File: tramp,  Node: Auto-save File Lock and Backup,  Next: Keeping files encrypted,  Prev: Android shell setup,  Up: Configuration

5.21 Auto-save, File Lock and Backup configuration
==================================================

TRAMP が、 ‘root’ が所有するバックアップ・ファイルを他のユーザーがアクセ
スできる場所に保存することを回避するには、 ‘backup-directory-alist’ のデ
フォルトのバックアップ設定を変更する必要があります。

   ファイルが誤って公開される可能性があるシナリオを以下に示します。 デフ
ォルトでは、 ‘~/.emacs.d/backups/’ などの別の場所に変更されない限り、
Emacs は元のファイルと同じディレクトリにバックアップ・ファイルを書き込み
ます。 このようなディレクトリは、 たとえば、制限付きファイル
‘/su:root@localhost:/etc/secretfile’ を使用する場合、 TRAMP によってデフ
ォルトで使用されます。 secretfile のバックアップ・ファイルは、 ‘root’ で
はなく、 TRAMP からログインしたユーザーが所有するようになりました。

   ‘backup-directory-alist’ が ‘nil’ (デフォルト) の場合、 このような問
題は発生しません。

   リモート・ファイルのバックアップ機能を「オフ」にして、 TRAMP によるバ
ックアップ・ディレクトリへの保存を停止するには、 以下のようにします:

     (add-to-list 'backup-directory-alist
                  (cons tramp-file-name-regexp nil))

例えば、 バックアップの無効化は、 ‘su’ と ‘sudo’ 方式のみを対象にするこ
とが可能です:

     (setq backup-enable-predicate
           (lambda (name)
             (and (normal-backup-enable-predicate name)
                  (not
                   (let ((method (file-remote-p name 'method)))
                     (when (stringp method)
                       (member method '("su" "sudo"))))))))

   もう 1 つのオプションは、 ファイル名の前にユーザー名とホスト名を付け
て、 より適切なバックアップ・ファイル名を命名することです。 たとえば、
‘/etc/secretfile’ を
‘~/.emacs.d/backups/!su:root@localhost:!etc!secretfile’ に変換し、 既存
のユーザー・オプション ‘backup-directory-alist’ より、 TRAMP ユーザー・
オプション ‘tramp-backup-directory-alist’ を設定します。

   次に、 TRAMP は、 DIRECTORY 名で構成されるプレフィックスで変換された
ファイル名にバックアップします。 このファイル名のプレフィックスは、
DIRECTORY が絶対ローカル・ファイル名である場合にのみ発生します。

例:

     (add-to-list 'backup-directory-alist
                  (cons "." "~/.emacs.d/backups/"))
     (customize-set-variable
      'tramp-backup-directory-alist backup-directory-alist)

‘/su:root@localhost:/etc/secretfile’ のバックアップ・ファイル名は以下の
ようになります
‘/su:root@localhost:~/.emacs.d/backups/!su:root@localhost:!etc!secretfile~’.

   バックアップ・ファイルと同様に、 ファイルの命名に関する同様の問題がリ
モート・ファイルの自動保存に影響します。 自動保存されたファイルは、 ユー
ザー・オプション ‘auto-save-file-name-transforms’ で指定されたディレクト
リに保存されます。 デフォルトでは、 これはローカルの一時ディレクトリに設
定されています。 しかし、 Debian GNU/Linux の一部のバージョンでは、 これ
は Emacs がコンパイルされたソース・ディレクトリを指します。 そのような値
を有効なディレクトリにリセットします。

   ‘auto-save-file-name-transforms’ を ‘nil’ に設定して、 自動保存された
ファイルを元のファイルと同じディレクトリに保存します。

   あるいは、 ユーザー・オプション ‘tramp-auto-save-directory’ を設定し
て、 すべての自動保存をその場所に向けます。

   ‘auto-save-mode’ の代替は ‘auto-save-visited-mode’ です。 このモード
では、 自動保存は明示的保存と同じです。 リモート・ファイルに対してこの動
作を無効にしたい場合は、 ユーザーオプション
‘remote-file-name-inhibit-auto-save-visited’ を 非 ‘nil’ に設定してくだ
さい。

   そして、さらに多くの問題を処理する必要があります。 Emacs 28 以降、 フ
ァイル・ロックは ‘lock-file-name-transforms’ と呼ばれる自動保存ファイル
と同様のユーザー・オプションを使用します。 デフォルトでは、 このユーザー
・オプションは ‘nil’ で、 ファイル・ロックを元のファイルと同じディレクト
リに保持することを意味します。

   もし、 ‘lock-file-name-transforms’を変更して、 リモート・ファイルのフ
ァイル・ロックを別の場所に保持するようにすると、 異なるEmacsセッションや
異なるリモート接続から並行してファイルを変更した場合に警告するEmacsの機
能が失われます。 このような設定には注意を払ってください。

   ‘remote-file-name-inhibit-locks’ を 非 ‘nil’ に設定すると、 リモート
・ロック・ファイルの作成が完全に抑止されます。

   デフォルトでは、 TRAMP は、 ‘root’ 所有のリモート・バックアップまたは
、 自動保存または、 ロック・ファイルをローカルの一時ディレクトリに書き込
む必要があるかどうかを確認します。 この確認の質問を抑制したい場合は、ユ
ーザー・オプション ‘tramp-allow-unsafe-temporary-files’ を ‘t’ に設定し
てください。


File: tramp,  Node: Keeping files encrypted,  Prev: Auto-save File Lock and Backup,  Up: Configuration

5.22 Protect remote files by encryption
=======================================

*注意*: TRAMP でのファイル暗号化(encryption)は実験的なものです。 本番シ
ステムでは使用しないでください！

   しばしば、クラウド・ストレージなどのリモート・ディレクトリにあるファ
イルを保護することが望ましい場合があります。 これを行うには、 TRAMP に、
特定のリモート・ディレクトリにコピーされたすべてのファイルを暗号化し、 ア
クセス時にそのようなファイルを復号化するように指示することができます。 こ
れには、ファイルの内容とファイル名の両方が含まれます。

   TRAMP はこれを透過的に行います。 ファイルとファイル名はどちらもリモー
ト側で暗号化されていますが、 Emacs 内ではそのような変換が為されていない
ためアクセスできます。

   内部的に、 TRAMP は ‘encfs’ パッケージを使用します。 したがって、 こ
の機能は、 このパッケージがローカル・ホストにインストールされている場合
にのみ使用できます。 TRAMP は ‘encfs mountpoint’ を永続的に保持しません
。 代わりに、‘encfsctl’ を使用して、 ファイルとファイル名をオンザフライ
で 暗号化/復号化 します。

 -- Command: tramp-crypt-add-directory name
     このコマンドは、 既存のリモート・ディレクトリ NAME に暗号化のマーク
     を付けます。 そのディレクトリとすべてのサブディレクトリ内のファイル
     は、 コピーする前に暗号化され、 そのディレクトリからコピーした後に
     復号化されます。 ファイル名とディレクトリ名も暗号化されます。

 -- User Option: tramp-crypt-encfs-option
     リモート・ディレクトリが暗号化用にマークされている場合、 このディレ
     クトリ内のファイルが最初にアクセスされたときに ‘encfs’ によって初期
     化されます。 このユーザー・オプションは、 どのデフォルトの ‘encfs’
     構成オプションが選択されるかを制御します。 それは "--standard" また
     は "--paranoia" です。 詳細については、 ‘encfs(1)’ の manページを参
     照してください。

     ただし、 TRAMP はこれらの構成セットを適合(adapt)させる必要がありま
     す。 ‘chainedNameIV’ 構成オプションを無効にする必要があります。 そ
     うしないと TRAMP はファイル名の暗号化を透過的に処理できませんでした
     。

   暗号化されたリモート・ディレクトリに初めてアクセスすると、 パスワード
で保護された ‘encfs’ 構成ファイルが作成されます。 これは、 URLエンコード
されたディレクトリ名がベース名の一部として、 ‘encfs6.xml’ を接尾辞として
‘user-emacs-directory’ に保持します。 たとえば、 リモート・ディレクトリ
‘/nextcloud:user@host:/path/to/dir’ を暗号化用にマークすると、 構成ファ
イルは ‘user-emacs-directory’ 内に
‘tramp-%2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F.encfs6.xml’ と
して保存されます。 このファイルと対応するパスワードを紛失しないでくださ
い。 紛失すると、暗号化されたファイルを復号化する方法はありません。

 -- User Option: tramp-crypt-save-encfs-config-remote
     このユーザー・オプションが 非 ‘nil’ (デフォルト) の場合、 ‘encfs’ 構
     成ファイル ‘.encfs6.xml’ も暗号化されたリモート・ディレクトリに保持
     されます。 このファイルのパスワード保護が十分であると考えるかどうか
     は、 あなた次第です。 利点は、 ユーザー間で構成ファイルを事前に共有
     することなく、 異なる Emacs セッション、 異なるユーザーがそのような
     リモート・ディレクトリにアクセスできることです。

   コマンド ‘encfsctl’ は、 暗号化/復号化 の主力であり、 呼び出しごとに
構成ファイルのパスワードが必要です。 したがって、 このパスワードを Emacs
にキャッシュすることをお勧めします。 これは ‘auth-sources’ を使用して行
うことができます(*note Using an authentication file::)。 エントリには、
url でエンコードされたディレクトリ名を machineの引数とし、そして、 ロー
カル・ユーザー名を loginの引数とし、そして、 パスワードをpasswordの引数
とすることが必要です。 ポート(port)はオプションで、 ポートを指定する場合
は、 portの引数を文字列 "crypt" にする必要があります。 上記の例では、 認
証ファイルに以下のエントリが必要です ("yourname" は ‘(user-login-name)’
の結果です):

     machine %2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F \
             login yourname port crypt password geheim

   ローカル名の部分がクォートされたリモート・ファイル名を使用する場合、
このローカル名と対応するファイルは 暗号化/復号化 されません。 暗号化され
たリモート ディレクトリ ‘/nextcloud:user@host:/path/to/dir’ がある場合、
以下のコマンド

     C-x d /nextcloud:user@host:/path/to/dir

プレーン・ファイル名とコマンドを含むディレクトリ・リストを表示し、以下の
コマンド

     C-x d /nextcloud:user@host:/:/path/to/dir

は、暗号化されたファイル名を含むディレクトリ・リストが表示され、 ファイ
ルにアクセスすると暗号化された内容が表示されます。 ただし、 暗号化された
ファイルと暗号化されていないファイルを同じディレクトリに混在させることは
お勧めしません。

 -- Command: tramp-crypt-remove-directory name
     このコマンドは、 ‘name’ 内のファイルを暗号化しないことを示すために
     使用する必要があります。 既存の暗号化されたファイルとサブディレクト
     リは暗号化されたままになります。


File: tramp,  Node: Usage,  Next: Bug Reports,  Prev: Configuration,  Up: Top

6 Using TRAMP
*************

TRAMP は透過的に動作し、 あたかもローカル・ファイルであるかのようにリモ
ート・ファイルにアクセスします。 ただし、 TRAMP は、 形式化されたリモー
ト・ファイル命名構文を使用して、 その機能を透過的に実行します。 この構文
は、 アクセス方式(method)や認証やホスト名やファイル名を指定する多くの部
品で構成されています。 Ange FTP は同様の構文を使用します。

   瞬時に Emacs でローカル・ファイルを開くのとは異なり、 TRAMP でリモー
ト・ファイルを開くと、 最初は時間がかかります。 パスワードまたは認証のプ
ロンプトがミニバッファーに表示されるまでに、 顕著な遅延が生じることがあ
ります。 この遅延の間(gap)に ‘<RET>’ または他のキーを押すと、 Emacs によ
って処理されます。 この先行入力機能は Emacs の機能で、 TRAMP を使用する
とプロンプトが表示されないことがあります。

* Menu:

* File name syntax::         TRAMP file name conventions.
* Change file name syntax:: Alternative file name syntax.
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding ‘~’ to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.


File: tramp,  Node: File name syntax,  Next: Change file name syntax,  Up: Usage

6.1 TRAMP file name conventions
===============================

‘/method:host:/path/to/file’ は、 方式 METHOD を使用して、 リモート・ホ
スト HOST 上のファイル /PATH/TO/FILE を開きます。

‘/ssh:melancholia:.emacs’
     ホーム・ディレクトリにあるファイル ‘.emacs’ の場合、 ホスト
     ‘melancholia’ で、 方式 ‘ssh’ を使用します。

‘/ssh:melancholia.danann.net:.emacs’
     ホストの完全修飾ドメイン名を使用してファイル ‘.emacs’ を指定した場
     合。

‘/ssh:melancholia:~/.emacs’
     指定のファイル ‘.emacs’ に対して、 ‘~’ が展開されます。

‘/ssh:melancholia:~daniel/.emacs’
     ホスト ‘melancholia’ 上の、 ユーザー ‘daniel’ のホーム・ディレクト
     リにあるファイル ‘.emacs’ の場合。 ‘~<user>’ 構文(construct)は、 リ
     モート・ホスト上のそのユーザーのホーム・ディレクトリに展開されます
     。

‘/ssh:melancholia:/etc/squid.conf’
     ホスト ‘melancholia’ 上のファイル ‘/etc/squid.conf’ の場合。

   HOST は、 ‘/ssh:127.0.0.1:.emacs’ または ‘/ssh:[::1]:.emacs’ のように
、 IPv4 または IPv6 アドレスを取ることができます。 構文上の理由から、
IPv6 アドレスは角括弧(‘[’ と ‘]’)で囲む必要があります。

   デフォルトでは、 TRAMP は現在のローカル・ユーザー名をリモート・ホスト
へのログイン用のリモート・ユーザー名として使用します。 適切な構文を使用
して別の名前を指定すると、 このデフォルトの動作が上書きされます:
‘/method:user@host:path/to/file’

   ‘/ssh:daniel@melancholia:.emacs’ は、 ホスト ‘melancholia’ 上の ユー
ザー ‘daniel’ のホーム・ディレクトリにあるファイル ‘.emacs’ を ‘ssh’ 方
式経由でアクセスします。

   ポート番号の指定は、 ホスト名に ‘#<port>’ を付加してください(例:
‘/ssh:daniel@melancholia#42:.emacs’)。

   すべての方式(method)と、ユーザー名と、ホスト名と、 ポート番号と、 ロ
ーカル名の部分はオプションです(*Note Default Method::, *Note Default
User::, *Note Default Host::)。 構文上の理由から、 デフォルトの方式は疑
似方式(pseudo method) ‘-’ で指定する必要があります。


File: tramp,  Node: Change file name syntax,  Next: File name completion,  Prev: File name syntax,  Up: Usage

6.2 Alternative file name syntax
================================

*note File name syntax:: で説明されているのはデフォルトの構文(‘default’
syntax)であり、 Emacs の起動後にアクティブになります。 ただし、これは変
更できます。

 -- Command: tramp-change-syntax syntax
     このコマンドは、 TRAMP がリモート・ファイル名に使用する構文を変更し
     ます。 値 ‘default’ のほかに、 SYNTAX には以下の値を指定できます

        • ‘simplified’

          このリモート・ファイル名の構文は、 Ange FTP で使用される構文に
          似ています。 リモート・ファイル名の形式は、
          ‘/user@host:path/to/file’ です。 ‘user@’ 部分はオプションで、
          方式(method)は *note Default Method:: によって決定されます。

        • ‘separate’

          このリモート・ファイル名の構文は、 XEmacs テキスト・エディター
          に由来します。 リモートファイル名の形式は
          ‘/[method/user@host]path/to/file’ です。 ‘method’ および
          ‘user@’ 部分はオプションです。

 -- Variable: tramp-file-name-regexp
     この変数は、 選択したリモート・ファイル名の構文にマッチする正規表現
     を保持します。 ‘tramp-change-syntax’ を呼び出すたびに値が変わります
     。 ただし、 この変数を外部パッケージで使用することはお勧めしません
     。 ‘file-remote-p’ の呼び出しの方がより適切です。 *note
     (elisp)Magic File Names::.


File: tramp,  Node: File name completion,  Next: Ad-hoc multi-hops,  Prev: Change file name syntax,  Up: Usage

6.3 File name completion
========================

TRAMP は、 TRAMP ファイル名コンポーネントを補完することができます。 対象
は、方式名(method name)と、ユーザー名と、ホスト名と、リモート・ホストに
あるファイル名です。 ユーザー名とホスト名の補完は、 ファイル名の補完が
‘basic’ または ‘emacs21’ または ‘emacs22’ のスタイルのいずれかである場合
にのみ有効になります。 *Note (emacs)Completion Styles::.

   たとえば、 ‘C-x C-f / s <TAB>’ と打ち込むと、 TRAMP 補完の選択肢が以
下のように表示されます

       sbin/          scp:           scpx:          sftp:          sg:
       smb:           srv/           ssh:           sshx:          su:
       sudo:          sys/

   ‘ssh:’ は、 それぞれの方式(method)の可能な補完であり、 ‘sbin/’ は、 ロ
ーカル・ホスト上のディレクトリ ‘/sbin’ を表します。

   ‘/ssh:’ へのミニバッファ補完のために ‘s h :’ と打ち込んでください。
‘<TAB>’ を打ち込むと、 TRAMP が ‘~/.ssh/config’ ファイルから抽出したホス
ト名達を表示します。 たとえば以下のようになります(1)。

       ssh:127.0.0.1:                       ssh:192.168.0.1:
       ssh:[::1]:                           ssh:localhost:
       ssh:melancholia.danann.net:          ssh:melancholia:

   上記のリストからホストを選択し、 そのホスト上のファイル名の補完へと進
めます。

   構成(*note Customizing Completion::)にユーザー名が含まれている場合、
補完リストはユーザー名も考慮します。

   ‘auth-sources’ 検索(*note Using an authentication file::)の結果が補完
候補に追加されます。 この検索は、 たとえば ‘~/.authinfo.gpg’ 認証ファイ
ルのパスフレーズ要求が原因で煩わしい場合があります。 ユーザー・オプショ
ン ‘tramp-completion-use-auth-sources’ は、 補完時にそのような検索を実行
するかどうかを制御します。

   以前にアクセスしたリモート・ホストまたは、 接続が永続的に保持されてい
るホスト(*note Connection caching::)は、 補完リストに含まれます。

   リモート・ホスト名の補完後、 リモート・ホスト上のファイル名を補完しま
す。 二重スラッシュ ‘//’ による抑制(kill)が TRAMP ファイル名構文のファイ
ル名部分のみを抑制(kill)することを除いて、 ローカル・ホスト・ファイル補
完と同じように機能します。 トリプル・スラッシュは、 デフォルトの動作を表
します。 *Note (emacs)Minibuffer File::.

例:

     C-x C-f /ssh:melancholia:/usr/local/bin//etc <TAB>
          ⊣ /ssh:melancholia:/etc

     C-x C-f /ssh:melancholia://etc <TAB>
          ⊣ /ssh:melancholia:/etc

     C-x C-f /ssh:melancholia:/usr/local/bin///etc <TAB>
          ⊣ /etc

   ---------- Footnotes ----------

   (1) ‘substring’ や ‘flex’ などの一部の補完スタイルでは、 末尾の ‘:’ の
後に少なくとも 1 文字を入力する必要があります。


File: tramp,  Node: Ad-hoc multi-hops,  Next: Home directories,  Prev: File name completion,  Up: Usage

6.4 Declaring multiple hops in the file name
============================================

TRAMP ファイル名構文は、 ‘tramp-default-proxies-alist’ 構成セットアップ
を使用せずに、 複数のプロキシによるその場限りの(ad-hoc)指定に対応できま
す(*note Multi-hops::)。

   各プロキシは、 リモート・ホストの指定からファイル名の部分を除いたもの
と同じ構文を使用して指定されます。 各ホップは ‘|’ で区切られています。 プ
ロキシを開始ホストから宛先のリモート・ホスト名とファイル名へと連鎖
(chain)させます。 たとえば、 単一のプロキシ ‘bird@bastion’ を
‘you@remotehost’ 上のリモート・ファイルにホップするには以下のようにしま
す:

     C-x C-f /ssh:bird@bastion|ssh:you@remotehost:/path <RET>

   関連する各方式(method)は、 インライン方式(inline method)である必要が
あります(*note Inline methods::)。

   TRAMP はその場限りの定義(ad-hoc definitions on the fly)を
‘tramp-default-proxies-alist’ に追加し、 その Emacs セッション中に再利用
できるようにします。 以後、 TRAMP での同一のリモート・ホストへの後続は、
ショートカット形式 ‘/ssh:you@remotehost:/path’ を使用できます。 その場限
りの定義は、 コマンド ‘M-xtramp-cleanup-all-connections <RET>’ によって
‘tramp-default-proxies-alist’ から削除されます(*note Cleanup remote
connections::)。

 -- User Option: tramp-save-ad-hoc-proxies
     今後の Emacs セッションのためにその場限りの定義(ad-hoc
     definitions)を ‘tramp-default-proxies-alist’ に自動的に保存するには
     、 ‘tramp-save-ad-hoc-proxies’ を 非 ‘nil’ に設定します。

          (customize-set-variable 'tramp-save-ad-hoc-proxies t)

   その場限りのプロキシ(ad-hoc proxies)は ‘tramp-default-proxies-alist’
のように ‘%h’ または ‘%u’ のパターンを取ることができます。 ファイル名は
‘/ssh:%h|su:remotehost:’ は、 ホスト ‘remotehost’ 上の ‘ssh’ セッション
から始まる、 ホスト ‘remotehost’ 上のユーザー ‘root’ に展開されます。

   一方、 後続のホップでホスト名が指定されていない場合は、それより前のホ
ップのホスト名が再利用されます。 したがって、 ‘/ssh:remotehost|su::’ は
先程の例と同じです。


File: tramp,  Node: Home directories,  Next: Remote processes,  Prev: Ad-hoc multi-hops,  Up: Usage

6.5 Expanding ‘~’ to home directory
===================================

リモート・ホストのホーム・ディレクトリは、 チルダ ‘~’ として入力できます
。 可能であれば、 リモート・ホスト上のリモート・ユーザーのホーム・ディレ
クトリに展開されます。 例:

     /ssh:user@host:~
     ⇒ /ssh:user@host:/home/user

   これは一般に、 ‘ssh’ のような方式(methods)と ‘sudoedit’ で機能します
。 これらの方式では、 以下のように別のユーザーのホーム・ディレクトリを展
開することもできます

     /sudoedit::~otheruser
     ⇒ /sudoedit:root@localhost:/home/otheruser

   その他の方式(method)では、 サポートされている場合にのみホーム・ディレ
クトリを展開できます。 これは、 たとえば ‘sftp’ 方式で発生します。 リモ
ート・ファイル名に共有ディレクトリ(share directory)を必要とする方式
(‘afp’, ‘smb’)は、 この共有ディレクトリの値をホーム・ディレクトリとして
使用します:

     /smb:user@host:~
     ⇒ /smb:user@host:/share

   TRAMP は、 どの共有ディレクトリを使用する予定かを事前に知ることはでき
ないため、 この展開は共有ディレクトリが既に使用されている場合にのみ適用
できます。

   ‘adb’ 方式と ‘rclone’ 方式と ‘sshfs’ 方式は、 ホーム・ディレクトリの
展開をまったくサポートしていません。 ただし、 TRAMP はホーム・ディレクト
リをキャッシュに保持します。 したがって、 これらの方式は、 接続プロパテ
ィ(connection property)を介してホーム・ディレクトリを展開するように構成
できます(*Note Predefined connection information::)。 例:

     (add-to-list 'tramp-connection-properties
                  (list (regexp-quote "/sshfs:user@randomhost.your.domain:")
                        "~user" "/home/user"))

   リモート・ファイル名に ‘user’ 部分が含まれていない場合は、 代わりに接
続プロパティ "~" を使用する必要があります。


File: tramp,  Node: Remote processes,  Next: Cleanup remote connections,  Prev: Home directories,  Up: Usage

6.6 Integration with other Emacs packages
=========================================

TRAMP は、リモート・ファイル名を見つけるために、 リモート・ホスト上での
新しい実行プロセスの開始をサポートします。 リモート・ホストの Emacs パッ
ケージでは TRAMP を使用するために特に何か変更する必要はありません。

   このタイプの統合は ‘ftp’ 方式(method)では機能せず、 また、
‘start-file-process’ で指定されている pty 関連付けもサポートしていません
。

   ‘process-file’ と ‘start-file-process’ は、変数 ‘default-directory’ が
下記のようにリモートの場合、 リモート・ホストで動作します:

     (let ((default-directory "/ssh:remote.host:"))
       (start-file-process "grep" (get-buffer-create "*grep*")
                           "/bin/sh" "-c" "grep -e tramp *"))

   ローカル・プロセスの場合、 ‘process-file’ は、 プロセスが中断されたと
きに、 プロセスの終了コード、またはシグナルを説明する文字列を返します。
リモート・プロセスが中断されたかどうかを確実に判断することはできないため
、 ‘process-file’ は常にその終了コードを返します。 ユーザー・オプション
‘process-file-return-signal-string’ が非 ‘nil’ の場合、 ‘process-file’ は
128 より大きいすべての終了コードをプロセスが中断されたことを示すものとし
て扱い、 対応する文字列を返します。

   リモート・ファイルシステムはローカル・ホストにマウントされており、
TRAMP は ‘default-directory’ を変更してそれにアクセスするため、 このリモ
ート・プロセス処理は GVFS (*note GVFS-based methods::) には適用されませ
ん。

   TRAMP は、 コマンドがリモート・ファイルまたはディレクトリ・バッファで
実行されると、 リモート・プロセスを開始します。 現在、 パッケージ
‘shell.el’ と ‘eshell.el’ と ‘compile.el’ (‘compile’ や ‘grep’ のような
コマンド) と ‘gud.el’ (‘gdb’ または ‘perldb’) は TRAMP で動作するように
統合(integrate)されています。

   TRAMP は、 常にリモート・プロセスの ‘INSIDE_EMACS’ 環境変数を変更しま
す。 デフォルトでは、 この環境変数は Emacs のバージョンを示します。
TRAMP は独自のバージョン文字列を追加するため、 ‘27.2,tramp:2.4.5.1’ のよ
うになります。 ただし、 ‘27.2,comint,tramp:2.4.5.1’ のように、 他のパッ
ケージもこの環境変数に名前を追加する場合があります。

   TRAMP がリモートでコマンドを見つける(find)には、 最初の接続時に TRAMP
によって設定されたデフォルトの検索パス(search path)を介してアクセスでき
る必要があります。 または、 絶対パスを使用するか、 ‘tramp-remote-path’
(*note Remote programs::) を拡張します:

     (add-to-list 'tramp-remote-path "~/bin")
     (add-to-list 'tramp-remote-path "/appli/pub/bin")

   リモート・ホストのリモート・プログラムの環境に合わせて、 ユーザー・オ
プション ‘tramp-remote-process-environment’ をカスタマイズします。
‘tramp-remote-process-environment’ は ‘process-environment’ と同様に構造
化された文字列のリストで、 各要素は ‘ENVVARNAME=VALUE’ の形式の文字列で
す。

   ‘~/.profile’ などのローカル構成ファイルを介して設定されたローカル・ホ
ストの環境変数との競合を回避するには、 ‘ENVVARNAME=’ を使用してリモート
環境の設定を解除(unset)します。

エントリを追加するには、‘add-to-list’ を使用します:

     (add-to-list 'tramp-remote-process-environment "JAVA_HOME=/opt/java")

   ‘tramp-remote-process-environment’ リストの既存の値を変更または削除す
ることは、 制限されたリモート・ホストでは実行できない場合があります。 た
とえば、 一部のシステム管理者は ‘HISTORY’ 環境変数の変更を許可していませ
ん。 TRAMP を使用するときにこのような制限に対応するには、ローカルの
‘.emacs’ ファイルで以下のコードを使用して
‘tramp-remote-process-environment’ を修正します:

     (let ((process-environment tramp-remote-process-environment))
       (setenv "HISTORY" nil)
       (setq tramp-remote-process-environment process-environment))

   ‘ENV’ 環境変数を設定すると、 一部のシェルでは初期化ファイルの読み込み
を命じます。 デフォルトでは TRAMP はこれを無効にします。 あなたが以下の
Lisp式をevalすることで、 この動作をオーバーライドできます

     (let ((process-environment tramp-remote-process-environment))
       (setenv "ENV" "$HOME/.profile")
       (setq tramp-remote-process-environment process-environment))

   ‘tramp-remote-process-environment’ に加えて、 あなたは
‘process-environment’ を let バインドすることで、 個々のリモート・プロセ
ス呼び出しの環境変数を設定できます。 TRAMP は ‘process-environment’ のグ
ローバル・デフォルト値に存在しないすべてのエントリを適用します(競合する
場合は ‘tramp-remote-process-environment’ 設定をオーバーライドします)。
例:

     (let ((process-environment (cons "HGPLAIN=1" process-environment)))
       (process-file ...))

   この方法での let バインディングは、 呼び出されるプロセスがローカルで
あるかリモートであるかに関係なく機能します。 これは、 TRAMP が ‘HGPLAIN’
設定のみを追加し、 ローカル・プロセスが ‘process-environment’ の値全体を
‘HGPLAIN’ の新しい値と共に取得するためです。

   TRAMP がリモートで実行できるように他の Emacs パッケージを統合するには
、 バグレポートを提出してください(*Note Bug Reports::)。

6.6.1 Running remote programs that create local X11 windows
-----------------------------------------------------------

リモート・プログラムがローカル・ホストで X11 ウィンドウを作成できるよう
にするには、 リモート・ホストの ‘DISPLAY’ 環境変数をローカルの ‘.emacs’
ファイルで以下のように設定します:

     (add-to-list 'tramp-remote-process-environment
                  (format "DISPLAY=%s" (getenv "DISPLAY")))

‘(getenv "DISPLAY")’ は、リモート・ホストが X11 ウィンドウのインタラクシ
ョンをリダイレクトできるローカル・ホストの認識可能な名前を返す必要があり
ます。 何らかの理由で認識可能な名前を照会できない場合は、 ‘(getenv
"DISPLAY")’ をハードコードされた固定名に置き換えます。 注意: ここで X11
表示名に ‘:0’ を使用すると、期待どおりに動作しないことに注意してください
。

   別の方法として、 ローカル・ホストの ‘~/.ssh/config’ で ‘ForwardX11
yes’ または ‘ForwardX11Trusted yes’ を指定します。

6.6.2 Running ‘shell’ on a remote host
--------------------------------------

‘windows-nt’ と ‘gnu/linux’ など、 オペレーティング・システムが異なる 2
つのホスト間で TRAMP を使用する場合は、 ‘explicit-shell-file-name’ を適
切なシェル名に設定します。 このオプションにより、 リモート・シェル・プロ
グラムの正しい名前(correct name)が保証されます。

   ‘explicit-shell-file-name’ が ‘nil’ と等しい場合、 ‘shell’ を対話的に
呼び出すと、 シェル名の入力を促されます。

   接続ローカル変数(connection-local variables)を使用して、 異なるリモー
ト・ホストに対して ‘explicit-shell-file-name’ の異なる値を設定できます。
*Note (emacs)Connection Variables::.

     (connection-local-set-profile-variables
       'remote-bash
       '((explicit-shell-file-name . "/bin/bash")
         (explicit-bash-args . ("-i"))))

     (connection-local-set-profile-variables
       'remote-ksh
       '((explicit-shell-file-name . "/bin/ksh")
         (explicit-ksh-args . ("-i"))))

     (connection-local-set-profiles
       '(:application tramp :protocol "ssh" :machine "localhost")
       'remote-bash)

     (connection-local-set-profiles
       `(:application tramp :protocol "sudo"
         :user "root" :machine ,(system-name))
       'remote-ksh)

6.6.3 Running ‘shell-command’ on a remote host
----------------------------------------------

‘shell-command’ は、 リモート・ホストでコマンドを同期的または非同期的に
実行し、 出力をローカル・ホストのバッファーに表示します。 例:

     C-x C-f /sudo:: <RET>
     M-& tail -f /var/log/syslog.log <RET>

   ‘tail’ コマンドは、 バッファ名が変数
‘shell-command-buffer-name-async’ の値であるローカル・バッファに、継続的
に出力します。

   ‘M-x auto-revert-tail-mode <RET>’ も同様に実行され、 継続的な出力が示
されます。

   ‘shell-command’ は、 実行するシェルを決定するために、 ユーザー・オプ
ション ‘shell-file-name’ と変数 ‘shell-command-switch’ を使用します。 リ
モート・ホストの場合、 デフォルト値はそれぞれ ‘/bin/sh’ と ‘-c’ です
(‘/system/bin/sh’ を使用する ‘adb’ メソッドを除く)。 前のセクションの変
数と同様に、 これらの変数は接続ローカル変数(connection-local variables)を
介して変更できます。

   Emacs がユーザー・オプション ‘async-shell-command-width’ をサポートし
ている場合 (Emacs 27 以降)、 TRAMP は非同期シェルコマンドのこのユーザー
・オプションの値を考慮します。 それはコマンド出力の表示列数を指定します
。 同期シェル・コマンドの場合、 環境変数 ‘COLUMNS’ を
‘tramp-remote-process-environment’ に追加することで、 同様の効果を得るこ
とができます。

6.6.4 Running ‘eshell’ on a remote host
---------------------------------------

TRAMP は ‘eshell.el’ に統合されていて、 これはコマンド・プロンプトにで、
リモート・ホスト上の対話型の eshell セッションを有効にします。 あなたは
モジュール ‘eshell-tramp’ を ‘eshell-modules-list’ に追加する必要があり
ます。 以下は、 リモートホストで ‘M-x eshell <RET>’ を開いた後のやり取り
の例です:

     ~ $ cd /sudo::/etc <RET>
     /sudo:root@host:/etc $ hostname <RET>
     host
     /sudo:root@host:/etc $ id <RET>
     uid=0(root) gid=0(root) groups=0(root)
     /sudo:root@host:/etc $ find-file shadow <RET>
     #<buffer shadow>
     /sudo:root@host:/etc $

   ‘eshell’ には、 ‘*eshell*’ バッファのデフォルト・ディレクトリを正しく
設定するカスタム ‘su’ および ‘sudo’ コマンドが追加されました。 TRAMP は
、 このディレクトリのエントリで ‘tramp-default-proxies-alist’ を黙って更
新します(*note Multi-hops::):

     ~ $ cd /ssh:user@remotehost:/etc <RET>
     /ssh:user@remotehost:/etc $ find-file shadow <RET>
     File is not readable: /ssh:user@remotehost:/etc/shadow
     /ssh:user@remotehost:/etc $ sudo find-file shadow <RET>
     #<buffer shadow>

     /ssh:user@remotehost:/etc $ su - <RET>
     /su:root@remotehost:/root $ id <RET>
     uid=0(root) gid=0(root) groups=0(root)
     /su:root@remotehost:/root $

6.6.5 Running a debugger on a remote host
-----------------------------------------

‘gud.el’ は、シンボリック・デバッガーへの統一されたインターフェイスを提
供します (*note (emacs)Debuggers::)。 TRAMP は、 リモート・ファイル名を
伴って ‘gdb’ を呼び出すことにより、 リモート・ホストでデバッグを実行でき
ます:

     M-x gdb <RET>
     Run gdb (like this): gdb -i=mi /ssh:host:~/myprog <RET>

   リモートの ‘gdb’ プロセスと ‘gdb-inferior’ プロセスはリモート・ホスト
上の同一プロセス・グループに属していないため、 警告が表示されますが、 無
視して続行できます:

     &"warning: GDB: Failed to set controlling terminal: Operation not permitted\n"

但し、そのために、 デバッグ対象プロセスの I/O に制限があります。

   相対ファイル名は、 リモートのデフォルト・ディレクトリに基づいています
。 ‘myprog.pl’ が ‘/ssh:host:/home/user’ に存在する場合、 有効な呼び出し
方法は以下のとおりです:

     M-x perldb <RET>
     Run perldb (like this): perl -d myprog.pl <RET>

   ‘perl -d /home/user/myprog.pl’ のように、 リモート・ファイル名のロー
カル部分だけを指定することはできません。

   デバッグするプログラムの引数はリテラルである必要があり、 相対パスまた
は絶対パスを使用できますが、リモート・パスは使用できません。

6.6.6 Running remote processes on MS Windows hosts
--------------------------------------------------

‘winexe’ はリモートの MS Windows ホストでプロセスを実行し、 TRAMP は
‘process-file’ と ‘start-file-process’ にそれを使用できます。

   ‘tramp-smb-winexe-program’ は、 ローカルの ‘winexe’ コマンドを指定し
ます。 TRAMP からトリガーされたプロセスを実行するには、 リモート・ホスト
上の Powershell V2.0 が必要です。

   ‘explicit-shell-file-name’ と ‘explicit-*-args’ は、 ‘M-x shell
<RET>’ によって MS Windows ホストで適切なリモート・シェルを開くことがで
きるように、 適切に設定する必要があります。 ‘cmd’ を開くには、 以下のよ
うに設定します:

     (setq explicit-shell-file-name "cmd"
           explicit-cmd-args '("/q"))

‘powershell’ をリモート シェルとして開くには、 以下を使います:

     (setq explicit-shell-file-name "powershell"
           explicit-powershell-args '("-file" "-"))

6.6.7 Remote process connection type
------------------------------------

非同期プロセスは、 疑似 tty (pseudo tty)を使用するかどうかで動作が異なり
ます。 変数 ‘process-connection-type’ によって制御され、 その値は ‘t’ や
‘pty’ (疑似 tty 使用) 、または ‘nil’ や ‘pipe’ (疑似 tty 使用しない) で
す。 TRAMP はリモート・ホストでシェルを実行することを前提としており、疑
似ttyが必要です。 したがって、 変数 ‘tramp-process-connection-type’ を宣
言し、 この情報をリモート・プロセスに伝達します。 デフォルト値は ‘t’ で
、変更する必要はありません。 リモート疑似 tty の名前は、 関数
‘process-tty-name’ によって返されます。

   ‘start-file-process’ によって開始されたリモートプロセスが疑似 tty を
使用してはいけない場合、 これは ‘process-connection-type’ を ‘nil’ また
は ‘pipe’ に設定することによって要求できます。 開始されたプロセスにはま
だ疑似 tty がありますが、 キャリッジ・リターン文字列(carriage return
characters)の改行(newline)への変換を抑制するなど、 いくつかの端末プロパ
ティが変更されています。

   関数 ‘make-process’ を使用すると、 ‘:connection-type’ キーワードを使
用して明示的にこれを制御できます。 このキーワードを使用しない場合、 代わ
りに ‘process-connection-type’ の値が適用されます。

6.6.8 Process properties of asynchronous remote processes
---------------------------------------------------------

利用可能な場合、 TRAMP はプロセス・プロパティを非同期プロパティのプロセ
ス・オブジェクトに追加します。 ただし、 これらすべてのプロパティが設定さ
れているとは限りません。

   • ‘remote-tty’

     これは PROCESS がリモート・ホストで使用する端末の名前です。 つまり
     、読み書きOKです。

   • ‘remote-pid’

     リモート・ホストで実行されたコマンドのプロセス ID。 これはシグナル
     をリモートで送信するときに使用されます。

   • ‘remote-command’

     ‘make-process’ または ‘start-file-process’ によって呼び出されたリモ
     ート・コマンドで文字列のリストです(プログラムとその引数)。 これには
     、 TRAMP がコマンドの周りで行う追加のシェルへの糖衣(shell sugar)は
     含まれていません。 これを確認するには、TRAMP *note traces: Traces
     and Profiles. を調べる必要があります。

   関数 ‘list-system-processes’ および ‘process-attributes’ は、 それぞ
れのリモート・ホストのシステム・プロセスに関する情報を返します。 この情
報を取得するために、 以下の定数によって駆動されるコマンド ‘ps’ を使用し
ます:

 -- Constant: tramp-process-attributes-ps-args
     これは、 ‘ps’ が呼び出される時の引数(文字列)のリストです。 デフォル
     ト値は、 GNU/Linux リモート・ホストに適しています。

 -- Constant: tramp-process-attributes-ps-format
     これは ‘ps’ の出力を解釈(interpret)するためのコンスセル ‘(KEY .
     TYPE)’ のリストです。 KEY は ‘process-attributes’ の出力で使われる
     キーに ‘pid’ キーを加えたもので、 TYPE は ‘ps’ が返すそれぞれの値で
     す。 TYPE は以下のいずれかです

     • ‘numberp’   — 数値
     • ‘stringp’   — 空白(spaces)無しの文字列
     • NUMBER      — NUMBER 幅の文字列。 空白(spaces)を含むことがで
                   きます
     • ‘nil’       — 行末(end of line)までの文字列

     デフォルト値は、 GNU/Linux リモート・ホストに適しています。

   もし、 たとえば、 ‘tramp-process-attributes-ps-args’ が ‘("-eww" "-o"
"pid,euid,euser,egid,egroup,comm:40,state")’ として宣言されている場合、
‘ps’ コマンドの出力は以下のようになります

         PID  EUID EUSER     EGID EGROUP   COMMAND                                  S
           1     0 root         0 root     systemd                                  S
        1610     0 root         0 root     NFSv4 callback                           S
        ...

   対応する ‘tramp-process-attributes-ps-format’ の値は以下のようになり
ます

     ((pid . numberp) (euid . numberp) (user . stringp)
      (egid . numberp) (group . stringp) (comm . 40) (state . stringp))

   ‘tramp-process-attributes-ps-args’ と
‘tramp-process-attributes-ps-format’ のデフォルト値は、 接続ローカル変数
(connection-local variables)で上書きできます。 *Note (emacs)Connection
Variables::. これは、 TRAMP の ‘adb’ 方式(method)ではすでに行われていま
す。 ‘tramp-adb-connection-local-default-ps-profile’ および
‘tramp-adb-connection-local-default-ps-variables’ を参照してください。

   リモート BSD システム用と、リモート macOS システム用と、‘busybox’ で
実装されたリモート ‘ps’ コマンド用に、 さらに 3 つの事前定義された接続ロ
ーカル変数(connection-local variables)のセットがあります。 これらは
‘tramp-connection-local-*-ps-profile’ および
‘tramp-connection-local-*-ps-variables’ と呼ばれます。 これらは以下のよ
うに使用します

     (connection-local-set-profiles
      '(:application tramp :machine "mybsdhost")
      'tramp-connection-local-bsd-ps-profile)

   ‘proced’ を呼び出すときにリモート・システム・プロセスのリストを表示し
たい場合は、 ユーザー・オプション ‘proced-show-remote-processes’ を 非
‘nil’ に設定するか、 バッファにリモート ‘default-directory’ がある場合は
、 ‘C-u - M-x proced <RET>’ のような負の引数(negative argument)を指定し
てそのコマンドを呼び出します。

6.6.9 Improving performance of asynchronous remote processes
------------------------------------------------------------

TRAMP による ‘make-process’ および ‘start-file-process’ の実装は、 初期
化と、 プロセス呼び出し毎に、 深刻なオーバーヘッドがあります。 これは、
これは、 リモート・ホストに接続するときの対話型ダイアログ(パスワードの提
供など)の処理と、 初期環境セットアップに必要です。

   場合によっては、 これは必要ありません。 リモート・シェルの起動後にコ
マンドを実行する代わりに、 コマンドを直接実行するだけで十分です。 TRAMP
は、 ‘make-process’ と ‘start-file-process’ の代替実装によってこれをサポ
ートします。 これは、 ‘nil’ 以外の値に設定する必要がある接続プロパティ
"direct-async-process" によってトリガーされます(*Note Predefined
connection information::)。 例:

     (add-to-list 'tramp-connection-properties
                  (list (regexp-quote "/ssh:user@host:")
                        "direct-async-process" t))

   リモート・ホストが複数のホップ経由で接続されている場合(*note
Multi-hops::)、 TRAMP で直接非同期プロセスを使用することはできません。 こ
の場合、 TRAMP は従来の実装にフォールバックします。

   さらに、 このアプローチには以下の制限があります:

   • ‘tramp-adb.el’ と ‘tramp-sh.el’ と ‘tramp-sshfs.el’ で定義された接
     続方式(connection methods)に対してのみ機能します。

   • 対話的なユーザー認証はサポートしていません。 ‘ssh’ ベースの方法では
     、 ‘ssh-agent’ のようなパスワード・エージェントを使用するか、 また
     は公開鍵認証を使用するか、 または ‘ControlMaster’ オプションを使用
     することで、 これを回避できます。

   • ‘RemoteCommand’ オプションを使用する ‘ssh’ ベースの方式(methods)に
     は適用できません。

   • ‘interrupt-process’ で強制終了(kill)することはできません。

   • ‘process-tty-name’ 経由でリモート端末名を報告しません。

   • プロセス・プロパティ ‘remote-pid’ を設定しません。

   • ‘tramp-remote-path’ を使用しません。

   パフォーマンスをさらに向上させるために、‘make-process’ または
‘start-file-process’ を実行するときに ‘tramp-verbose’ を 0 にバインドす
ることをお勧めします。 さらに、 TRAMP による ‘ControlMaster’ オプション
の処理をバイパスするために、 ‘tramp-use-ssh-controlmaster-options’ を
‘nil’ に設定し、 ‘~/.ssh/config’ 内であなた独自の設定を使用することがで
きます。


File: tramp,  Node: Cleanup remote connections,  Next: Renaming remote files,  Prev: Remote processes,  Up: Usage

6.7 Cleanup remote connections
==============================

TRAMP は、 リモート接続をフラッシュするいくつかの方法を提供します。

 -- Command: tramp-cleanup-connection vec &optional keep-debug
          keep-password
     このコマンドは、 すべての接続関連オブジェクトをフラッシュします。
     VEC は、リモート接続の内部表現です。 このコマンドを対話的に呼び出す
     と、 アクティブなリモート接続がミニバッファーに一覧表示されます。 各
     接続の形式は ‘/method:user@host:’ です。

     リモート接続をフラッシュすると、 パスワード・キャッシュ(*note
     Password handling::)とファイル・キャッシュと接続キャッシュ(*note
     Connection caching::)と recentf キャッシュも消去されます (*note
     (emacs)File Conveniences::). また、 セッション・タイマー(*note
     Predefined connection information::)と接続バッファー(connection
     buffers)も削除します。

     KEEP-DEBUG が 非 ‘nil’ の場合、 デバッグバッファ(debug buffer)は保
     持(keep)されます。 KEEP-PASSWORD が 非 ‘nil’ の場合、 パスワード・
     キャッシュを保存(preserve)します。

 -- Command: tramp-cleanup-this-connection
     ‘tramp-cleanup-connection’ と同じく、 現在のバッファのリモート接続
     オブジェクトをフラッシュします。

 -- Command: tramp-cleanup-all-connections
     ‘tramp-cleanup-connection’ と同じく、 すべてのアクティブなリモート
     接続オブジェクトをフラッシュします。 このコマンドは、 アドホック・
     プロキシー(ad-hoc proxy)定義(*note Ad-hoc multi-hops::)も削除します
     。

 -- Command: tramp-cleanup-all-buffers
     ‘tramp-cleanup-all-connections’ と全く同様に、 リモート接続に関連す
     るすべてのバッファを強制終了(kill)するだけでなく、 すべてのリモート
     接続とアドホック・プロキシー(ad-hoc proxy)定義がクリーンアップされ
     ます。


File: tramp,  Node: Renaming remote files,  Next: Archive file names,  Prev: Cleanup remote connections,  Up: Usage

6.8 Renaming remote files
=========================

しばしば特定のリモート・ホストを訪問しているバッファのファイル内容を保存
することが望ましい場合があります。 これは、 たとえば、 ローカル・ホスト
がネットワーク統合を変更し、 リモート・ホストに到達できなくなった場合に
発生する事があります。

 -- Command: tramp-rename-files source target
     すべてのバッファで、 訪問ファイル名(visiting file name)を SOURCE か
     ら TARGET に置き換えます。 SOURCE はリモート・ディレクトリ名であり
     、 ローカル名の部分も含めることができます。 TARGET は SOURCE を置き
     換えるディレクトリ名です。 多くの場合、 TARGET は別のホストのリモー
     ト・ディレクトリ名ですが、 ローカル・ディレクトリ名の場合もあります
     。 TARGET にローカル部分がない場合、SOURCE のローカル部分が使用され
     ます。

     TARGET が ‘nil’ の場合、 ‘tramp-default-rename-alist’ の最初の一致
     に従って選択されます。 対話的に呼び出された場合、 この一致は選択の
     初期値として提供されます。

     SOURCE に一致する ‘buffer-file-name’ を持つすべてのバッファで、 こ
     の名前は SOURCE を TARGET に置き換えることによって変更されます。 こ
     れは、‘set-visited-file-name’ を呼び出すことによって適用されます。
     新しい ‘buffer-file-name’ は、 ミニバッファーで変更するように促され
     ます。 バッファーは変更済みとしてマークされ、 明示的に保存する必要
     があります。

     ユーザー・オプション ‘tramp-confirm-rename-file-names’ が ‘nil’ の
     場合、 ファイル名の変更は確認なしで行われます。 これには、
     ‘tramp-default-rename-alist’ に、一致するエントリが必要です。

     SOURCE で識別されるリモート接続に関連して、 ファイルを訪問していな
     い、 または SOURCE に一致しないファイルを訪問しているリモート・バッ
     ファは、 変更されません。

     TARGET は対話的に ‘tramp-default-rename-alist’ から選択され、 前置
     引数が 非 ‘nil’ の場合は確認(confirm)を行いません。

     SOURCE によって識別されるリモート接続は、
     ‘tramp-cleanup-connection’ によってフラッシュされます。

 -- Command: tramp-rename-these-files target
     訪問中のファイル名を TARGET に置き換えます。 現在のバッファは、 リ
     モート接続に関連付けられている必要があります。 同一ディレクトリ名で
     、ファイルを訪問しているすべてのバッファで、 バッファ・ファイル名が
     変更されます。

     TARGET は対話的に ‘tramp-default-rename-alist’ から選択され、 前置
     引数が 非 ‘nil’ の場合は確認(confirm)を行いません。

 -- User Option: tramp-default-rename-alist
     リモート・バッファ・ファイル名を変更するためのデフォルトのターゲッ
     ト。 これはコンスセル ‘(source . target)’ の alist です。 最初に一
     致した項目は、 ‘tramp-rename-files’ を介してソースからバッファ・フ
     ァイル名をリネームするために適用されるターゲットを指定します。
     ‘source’ は、リモート・ファイル名に一致する正規表現です。 ‘target’
     はディレクトリ名である必要があり、 リモートの場合もあります
     (‘/method:user@host:’ など、 デフォルトで TRAMP が推測するリモート
     ・ディレクトリを含む)。

     ‘target’ にはパターン ‘%m’ または ‘%u’ または ‘%h’ を含めることがで
     きます。 これらは ‘tramp-rename-files’ を呼び出す時に ‘source’ の方
     式(method)名またはユーザー名またはホスト名に置き換えられます。

     ‘source’ は、 評価される Lisp式 にすることもできます。 結果は、 常
     に一致する正規表現として解釈される文字列または ‘nil’ でなければなり
     ません。

     エントリ例:

          ("/ssh:badhost:/path/to/dir/"
           . "/ssh:goodhost:/path/to/another/dir/")

     これは、 ディレクトリ名の変更を含め、 ‘badhost’ のバッファ・ファイ
     ル名を ‘goodhost’ に名前変更します。

          ("/ssh:.+\\.company\\.org:" . "/ssh:multi.hop|ssh:%h:")

     上記は、 ‘/ssh:multi.hop:’ 経由で ‘company.org’ のホストにすべての
     接続をルーティングします。 これは、 会社のネットワークの外で Emacs
     を使用する場合に役立つ場合があります。

          (nil . "~/saved-files/%m:%u@%h/")

     これは、 リモート接続の方式(method)名とユーザー名とホスト名を含むデ
     ィレクトリ名で、 すべてのリモート・ファイルをローカルに保存します。

 -- User Option: tramp-confirm-rename-file-names
     ‘tramp-rename-files’ または ‘tramp-rename-these-files’ にて、バッフ
     ァ・ファイル名の名前変更の確認を行う必要があるかどうかを設定します
     。


File: tramp,  Node: Archive file names,  Prev: Renaming remote files,  Up: Usage

6.9 Archive file names
======================

TRAMP は、 ファイル・アーカイブ内のファイルへの透過的なアクセスも提供し
ます。 これは、 GVFS (the GNOME Virtual File System) をインストールした
ホストでのみ可能です(*note GVFS-based methods::)。 内部的には、 ファイル
・アーカイブは GVFS ‘archive’ 方式(method)を介してマウントされます。

   ファイル・アーカイブは、 ‘/path/to/dir/file.EXT’ の種類の通常のファイ
ルです。 拡張子 ‘.EXT’ は、 ファイル・アーカイブのタイプを識別します。
Dired でアーカイブの内容を調べるには、 ファイル名をディレクトリのように
開きます (つまり、 ‘/path/to/dir/file.EXT/’ を開きます)。 アーカイブ・フ
ァイル名(archive file name)と呼ばれるファイル・アーカイブ内のファイルの
名前は、 ‘/path/to/dir/file.EXT/dir/file’ です。

   ほとんどの *note magic file name operations: (elisp)Magic File Names.
は、 アーカイブ・ファイル名に対して実装されています。 例外は、 ファイル
・アーカイブに書き込む操作と、プロセスに関する操作のすべてです。 したが
って、以下のような関数

     (copy-file "/path/to/dir/file.tar/dir/file" "/somewhere/else")

は、 すぐに使用できます。 これは、 ファイル名の補完や、 アーカイブ・ファ
イル名も受け入れる ‘dired’ や、 ‘ediff’ などのライブラリにも当てはまりま
す。

   ファイル・アーカイブは、 ファイル名拡張子 ‘.EXT’ で識別されます。
GVFS は内部でライブラリ ‘libarchive(3)’ を使用するため、 このライブラリ
で受け入れられるすべての接尾辞は、 アーカイブ・ファイル名にも機能します
。 受け入れられる接尾辞は定数 ‘tramp-archive-suffixes’ にリストされてい
ます。 以下にリストします

   • ‘.7z’ — 7-Zip archives

   • ‘.apk’ — Android package kits

   • ‘.ar’ — UNIX archiver formats

   • ‘.cab’, ‘.CAB’ — Microsoft Windows cabinets

   • ‘.cpio’ — CPIO archives

   • ‘.crate’ — Cargo (Rust) packages

   • ‘.deb’ — Debian packages

   • ‘.depot’ — HP-UX SD depots

   • ‘.epub’ — Electronic publications

   • ‘.exe’ — Self extracting Microsoft Windows EXE files

   • ‘.iso’ — ISO 9660 images

   • ‘.jar’ — Java archives

   • ‘.lzh’, ‘.LZH’ — Microsoft Windows compressed LHA archives

   • ‘.msu’, ‘.MSU’ — Microsoft Windows Update packages

   • ‘.mtree’ — BSD mtree format

   • ‘.odb’, ‘.odf’, ‘.odg’, ‘.odp’, ‘.ods’, ‘.odt’ — OpenDocument
     formats

   • ‘.pax’ — Posix archives

   • ‘.rar’ — RAR archives

   • ‘.rpm’ — Red Hat packages

   • ‘.shar’ — Shell archives

   • ‘.tar’, ‘.tbz’, ‘.tgz’, ‘.tlz’, ‘.txz’, ‘.tzst’ — (Compressed) tape
     archives

   • ‘.warc’ — Web archives

   • ‘.xar’ — macOS XAR archives

   • ‘.xpi’ — XPInstall Mozilla addons

   • ‘.xps’ — Open XML Paper Specification (OpenXPS) documents

   • ‘.zip’, ‘.ZIP’ — ZIP archives

   ファイル・アーカイブは、 追加の圧縮接尾辞によって識別される圧縮も可能
です。 有効な圧縮接尾辞は、定数 ‘tramp-archive-compression-suffixes’ に
リストされていて、それらは ‘.bz2’, ‘.gz’, ‘.lrz’, ‘.lz’, ‘.lz4’,
‘.lzma’, ‘.lzo’, ‘.uu’, ‘.xz’, ‘.Z’, and ‘.zst’ です。 有効なアーカイブ
・ファイル名(archive file name)は、 ‘/path/to/dir/file.tar.gz/dir/file’
です。 ‘/path/to/dir/file.tar.gz.uu/dir/file’ のように、 複数の接尾辞を
続けて使用することもできます。

   アーカイブ・ファイル名(archive file name)は、
‘/ftp:anonymous@ftp.gnu.org:/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL’ のよ
うに、 リモート・ファイル名にすることができます。 すべてのファイル操作は
GVFS 操作に内部的にマップされることで、 ファイル・アーカイブのローカル・
コピーを最初にダウンロードする必要がないため、 ‘tramp-gvfs’ によってサポ
ートされるリモート・ファイル名のパフォーマンスが向上します。 たとえば、
‘/sftp:user@host:...’ は、 同様の ‘/scp:user@host:...’ よりも優れたパフ
ォーマンスを発揮します。 ‘tramp-gvfs’ がサポートする方式名(method
names)の完全なリストについては、 定数 ‘tramp-archive-all-gvfs-methods’ を
参照してください。

   ‘url-handler-mode’ が有効になっている場合、
‘https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL’ のような URL
を介してアーカイブにアクセスできます。 これにより、 以下のような複雑なフ
ァイル操作が可能になります

     (progn
       (url-handler-mode 1)
       (ediff-directories
        "https://ftp.gnu.org/gnu/tramp/tramp-2.4.4.tar.gz/tramp-2.4.4"
        "https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/tramp-2.4.5" ""))

   以下のように、 ファイル・アーカイブ内のファイル・アーカイブにアクセス
することも可能です

     (progn
       (url-handler-mode 1)
       (find-file
        "https://ftp.debian.org/debian/pool/main/c/coreutils/\
     coreutils_8.28-1_amd64.deb/control.tar.gz/control"))

   ファイル・アーカイブを無効にするには、 以下のLisp式を init ファイルに
追加します:

     (customize-set-variable 'tramp-archive-enabled nil)


File: tramp,  Node: Bug Reports,  Next: Frequently Asked Questions,  Prev: Usage,  Up: Top

7 Reporting Bugs and Problems
*****************************

TRAMP の開発チームは、 バグや問題の解決に積極的に取り組んでおり、 機能の
リクエストや提案をお待ちしています。

   TRAMP のメーリング・リストは、TRAMP を使用した作業、 問題の解決、 議
論、 TRAMP に関する一般的な議論に関するアドバイスや情報を提供する場所で
す。

   TRAMP のメーリング・リストはモデレートされていますが、 サブスクライバ
ーでなくてもモデレーターの承認を得て投稿できます。 祝祭日を挟むと、 この
承認手順に 48 時間かかる場合があります。

   <tramp-devel@gnu.org> はメーリング・リストです。 このアドレスに送信さ
れたメッセージは、 すべてのサブスクライバーに送信されます。 これは、 購
読リクエストを送信するアドレスではありません。

   メーリング・リストを購読するには、 the TRAMP Mail Subscription Page
(https://lists.gnu.org/mailman/listinfo/tramp-devel/) にアクセスしてくだ
さい。

   バグ・レポートを送信する前に、 まず、 テスト・スイートを実行してくだ
さい(*note Testing::)。

   バグまたは問題が *Note Frequently Asked Questions:: で、すでに対処さ
れているかどうかを確認してください。

   ‘M-x Tramp-bug <RET>’ を実行して、 システムの詳細と TRAMP インストー
ルの詳細を含むバッファを生成します。 これらの詳細をバグ・レポートに含め
てください。

   バグ・レポートには、 問題を再現するために必要な手順をできるだけ詳細に
説明する必要があります。 これらの詳細には、 リモート・ホストの設定と、 存
在する特別または固有の条件を含める必要があります。

   問題を再現する最小限のテスト・ケースを含めます。 これにより、 開発チ
ームは最適な解決策を見つけ、 関係のない回り道を避けることができます。

   キャッシュ関連の問題を除外するには、 テストを実行する前にすべてのキャ
ッシュをフラッシュしてください(*note Cleanup remote connections::)。 あ
るいは、 ‘emacs -Q’ で開始されたクリーンな Emacs セッションで問題を再現
することも、分析には良い場合があります。 その場合、 TRAMP は持続性ファイ
ル(persistency file)をロードせず(*note Connection caching::)、 また、
‘auth-source.el’ からのパスワードを使用しません(*note Password
handling::)。 後者は ‘sudoedit’ 方式(method)では発生しませんが、 そうで
なければ使い物になりません。

   あなたが TRAMP の GNU ELPA バージョンを使用している場合、 ‘emacs -Q’
はインストール済みの ELPA パッケージを無視するため、 明示的にロードする
必要があります。 以下のように(バージョン番号を付加して)呼び出します

     $ emacs -Q -l ~/.emacs.d/elpa/tramp-2.4.5.1/tramp-autoloads

   バグ・レポートに TRAMP のメッセージを含める場合は、 ‘~/.emacs’ ファイ
ルでおしゃべり(verbosity)レベルを 6 (*note Traces: Traces and Profiles.)
に上げてから、 バグへの手順を繰り返します。 ‘*tramp/foo*’ および ‘*debug
Tramp/foo*’ バッファの内容をバグ・レポートに含めます。 両方のバッファに
は、 分析に関連する ASCII 以外の文字が含まれる可能性があり、 バグ・レポ
ートに添付ファイルとしてバッファを追加します。 これは、 メール転送中の改
行を避けるためにも必要です。

   あなたが Emacs からメッセージを送信すると、 これらのバッファをバグ・
レポートに追加するか問われます。 外部メール・プログラムを使用する場合は
、 これらのバッファをファイルに保存し、 そのメール・プログラムで追加する
必要があります。

   *注意* この段階では、 おしゃべり(verbosity)レベルを 6 を超えて大きく
する必要はありません。 また、 おしゃべりレベルが 6 以上の場合、 ファイル
とディレクトリの内容がデバッグ・バッファに含まれることにも注意してくださ
い。 TRAMP に入力されたパスワードがそこに含まれることは決してありません
。


File: tramp,  Node: Frequently Asked Questions,  Next: Files directories and localnames,  Prev: Bug Reports,  Up: Top

8 Frequently Asked Questions
****************************

   • 正式名称は「Tramp」ですか、それとも「TRAMP」ですか？

     正式名称は “Tramp” です。 これは、コメントや、 docstringや、 TRAMP
     に関するあらゆる場所で使用されます。

     けれども、 歴史的な理由から、 この TRAMP マニュアルでは
     “@sc{Tramp}” としてフォーマットされています。 (*note
     (texinfo)Smallcaps::) だからその部分が違って見えるんです。

   • 最新版の TRAMP はどこにありますか？

     TRAMP は以下で入手できます:

     <https://ftp.gnu.org/gnu/tramp/>

     TRAMP の GNU プロジェクト・ページ はここです:

     <https://savannah.gnu.org/projects/tramp/>

   • どのシステムで動作しますか？

     このパッケージは、 Emacs 26 と Emacs 27 と Emacs 28 と Emacs 29 で
     正常に動作します。

     Unix および Unix 系のシステムが主要なリモート・ターゲットですが、
     TRAMP は、 MS Windows 7/8/10 などの他のプラットフォームへの接続にも
     同等の成功を収めています。

   • TRAMP をスピードアップさせるにはどうすればいいですか？

     TRAMP はバックグラウンドで多くのことを行いますが、 その一部はネット
     ワーク速度や、リモート・ホストの応答速度や、認証の遅延に依存します
     。 これらの操作中は TRAMP の応答性が低下します。 TRAMP の設定の範囲
     内で可能ないくつかの提案は以下のとおりです:

     内部方式(internal methods)よりも、 高速な ‘scp’ などの外部方式
     (external method)を使用してください。

     TRAMP は、 ホストとファイルに関するリモート情報をキャッシュする場所
     である、 ファイル ‘tramp-persistency-file-name’ を保持します。 キャ
     ッシングはデフォルトで有効になっています。 無効にしないでください。

     TRAMP の制御外でリモート・ファイルが個別に更新される事が無い場合、
     ‘remote-file-name-inhibit-cache’ (訳注:リモート・ファイル名のキャッ
     シュ禁止)を ‘nil’ に設定します。 リモート・ディレクトリまたはファイ
     ルが TRAMP とは無関係に更新される場合、 そのキャッシュ(cache)のクリ
     ーンアップが必要になります。

     遅延を避けるためにバージョン管理を無効にします:

          (setq vc-ignore-dir-regexp
                (format "\\(%s\\)\\|\\(%s\\)"
                        vc-ignore-dir-regexp
                        tramp-file-name-regexp))

     バージョン管理をリモートで使用したいために、 バージョン管理の無効が
     極端すぎる場合は、 ‘vc-handled-backends’ を必要なものだけに削ってく
     ださい。 たとえば、 以下のようにします:

          (setq vc-handled-backends '(SVN Git))

     過剰なトレースを無効にします。 ‘tramp-verbose’ を 3 以下に設定しま
     す。 デフォルトは 3 です。 バグを探すときに一時的にトレース・レベル
     を上げます。

   • TRAMP がリモート・ホストに接続しません

     TRAMP がリモート・ホストに接続しない主な理由は 3 つ:

        − プロンプトの不明なキャラクターコード

          TRAMP は、 正確なパースのために、 リモート・ホスト上で明確に認
          識できるプロンプトを必要とします。 色付けのためのエスケープ・
          シーケンスを含むシェル・プロンプトは、 パースの問題を引き起こ
          します。 正規表現を使用してプロンプト検出をカスタマイズするた
          めには *note Remote shell setup:: を参照してください。

          リモート・ホストのプロンプトが認識されているかどうかを確認する
          には、 TRAMP connection buffer ‘*tramp/foo*’ に切り替え、 カー
          ソルをバッファーの先頭に置き、 以下の式を適用します:

               M-: (re-search-forward (concat tramp-shell-prompt-pattern "$")) <RET>

          カーソルがバッファの一番下にあるプロンプトに移動していない場合
          、 TRAMP はプロンプトを認識できていません。

          zsh は左側プロンプト(left-hand side prompt)と右側プロンプト
          (right-hand side prompt)を並行して使用するため、 リモート・ホ
          ストで zsh を使用する場合は、 zsh ライン・エディタを無効にしま
          す。 以下の行を ‘~/.zshrc’ に追加します:

               [[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

          これは、 ‘TERM’ 環境変数の値として、‘tramp-terminal-type’ のデ
          フォルト値、 "dumb" (訳注:ダム端末)を使用します。 ‘TERM’ に別
          の値を使用したい場合は、 ‘tramp-terminal-type’ と、 この行を、
          適宜変更してください。

          代わりに、 リモート・ログイン・シェルを明示的に設定することも
          できます。 このテクニックの議論については、*note Remote shell
          setup:: を参照してください。

          リモート・ホストで fish shell を使用する場合、
          ‘~/.config/fish/config.fish’ に以下を追加して凝ったフォーマッ
          ト(fancy formatting)を無効にします:

               function fish_prompt
                 if test $TERM = "dumb"
                    echo "\$ "
                 else
                    ...
                 end
               end

          リモート・ホストで WinSSHD を使用している場合、 TRAMP は奇妙な
          プロンプト設定(strange prompt settings)を認識しません。

          同様の問題は、 シェルの起動時に独自のエスケープ・コードを送信
          する iTerm2 シェル統合にも存在します。 これは、 あなたの
          ‘~/.profile’ のそれぞれの統合コード断片(snippet)を以下のように
          変更することで抑制できます:

               [ $TERM = "dumb" ] || \
               test -e "${HOME}/.iterm2_shell_integration.bash" && \
               source "${HOME}/.iterm2_shell_integration.bash"

          そして最後に、 bash の readline はコマンドに対して ‘C-j’ のよ
          うなキー・バインディングを使用すべきではありません。
          ‘~/.inputrc’ でこれを無効にします:

               $if term=dumb
               # Don't bind Control-J or it messes up TRAMP.
               $else
               "\C-j": next-history
               $endif

        − ログイン後のキャラクター・エコー

          TRAMP は、 ‘stty -echo’ コマンドでリモート・ホストからのエコー
          を抑制します。 しかし、 有害な制御文字を含むリモート・ホストか
          らのウェルカム・メッセージを抑制するのには遅すぎる場合がありま
          す。 ‘sshx’ または ‘scpx’ 方式(method)を使用すると、 疑似 tty
          が割り当てられるため、この問題を回避できます(*Note Inline
          methods::)。

        − TRAMP が 500 文字を超える文字列の転送を中断する

          ‘tramp-chunksize’ を 500 に設定して、この問題を回避します。 こ
          れは、 HP-UX と FreeBSD と Tru64 Unix システムでの
          ‘process-send-string’ の実装の誤りに関連しています。
          ‘tramp-chunksize’ のドキュメントを参照して、 これが必要な場合
          を確認してください。

          TRAMP によってアクセスされるファイルの ‘file-precious-flag’ を
          ‘t’ に設定して、 最初に一時ファイルに保存することにより、 チェ
          ックサムを使用してファイルの内容をチェックします。 *note
          (elisp)Saving Buffers::.

               (add-hook
                'find-file-hook
                (lambda ()
                  (when (file-remote-p default-directory)
                    (set (make-local-variable 'file-precious-flag) t))))

   • chroot 環境で TRAMP が失敗(fail)する

     ローカル・ホストに接続するとき、 TRAMP はいくつかの内部最適化を使用
     するため、 chroot 環境で Emacs を実行すると失敗します。 これらの最
     適化を無効にするには、 ユーザー・オプション
     ‘tramp-local-host-regexp’ を ‘nil’ に設定します。

   • TRAMP は SSH セキュリティ・キーをサポートしていますか？

     はい。 ‘OpenSSH’ は、 特殊なキー・タイプ ‘*-sk’ を介して FIDO ハー
     ドウェア・デバイスのサポートを追加しました。 TRAMP は、 それらに対
     する追加のハンドシェイク・メッセージをサポートします。 これには、少
     なくとも ‘OpenSSH’ 8.2 と、 FIDO U2F と互換性のあるセキュリティ・キ
     ー (yubikey または solokey または nitrokey など) が必要です。

   • TRAMP が、 SMB1 接続プロトコルを実行している Samba または MS
     Windows ホストに接続しません

     ‘smbclient’ の最近のバージョンは、 デフォルトで古い接続プロトコルを
     サポートしていません。 そのようなホストに接続するには、 それぞれの
     オプションを追加します:

          (add-to-list 'tramp-smb-options "client min protocol=NT1")

     *注意* 非推奨の接続プロトコルを使用するとセキュリティ上の問題が発生
     するため、 絶対に必要な場合にのみ使用するようにしてください。

   • TRAMP でファイル名の補完が機能しません

     リモート・シェルからの ANSI エスケープ・シーケンスは、TRAMP による
     リモート・バッファの解析でエラーを引き起こす可能性があります。

     これが当てはまるかどうかをテストするには、 リモート・シェルを開き、
     ‘ls’ の出力がカラーかどうかを確認します。

     リモート・ホストからの ANSI エスケープ・シーケンスを無効にするには
     、 リモート・ホストの ‘.bashrc’ または ‘.profile’ で ‘--color=yes’
     または ‘--color=auto’ を無効にします。 このエイリアスをオンまたはオ
     フにして、 ファイル名の補完が機能するかどうかを確認します。

   • ファイル名の補完が、 非常にたくさんのファイルがあるディレクトリでは
     機能しません

     これは、 ‘*.c’ などのワイルド・カード指定を展開するシェルの機能を使
     用するグロブ(globbing)に関連している可能性があります。 多数のファイ
     ルを含むディレクトリの場合、 グロブした結果がシェルのコマンド・ライ
     ンの長さの制限を超えてハングする可能性があります。 TRAMP はグロブを
     使用します。

     グロブがハングするかどうかをテストするには、 リモート・ホストでシェ
     ルを開き、 ‘ls -d * ..?* > /dev/null’ を実行します。

     テストするリモート・シェルが、 そのホストに接続するときに TRAMP が
     使用するのと同一のシェル(‘/bin/sh’ または ‘ksh’ または ‘bash’)であ
     ることを確認してください。

   • TRAMP がファイル転送を完了した後に通知を受け取る方法は？

     ‘~/.emacs’ に以下のコードを記述して、 リモート・ホストから読み書き
     した後に Emacs のビープ音を鳴らします。

          (defadvice tramp-handle-write-region
            (after tramp-write-beep-advice activate)
            "Make TRAMP beep after writing a file."
            (interactive)
            (beep))

          (defadvice tramp-handle-do-copy-or-rename-file
            (after tramp-copy-beep-advice activate)
            "Make TRAMP beep after copying a file."
            (interactive)
            (beep))

          (defadvice tramp-handle-insert-file-contents
            (after tramp-insert-beep-advice activate)
            "Make TRAMP beep after inserting a file."
            (interactive)
            (beep))

   • ‘root’ 権限で作業しているときに視覚的な警告を表示するにはどうすれば
     よいですか？ モードラインでホストを表示するには？

     Emacs の パッケージ・マネージャー を介して GNU ELPA から
     ‘tramp-theme’ をインストールします。 ‘M-x load-theme <RET> Tramp
     <RET>’ で有効にします。 さらなるカスタマイズは、 ユーザー・オプショ
     ン ‘tramp-theme-face-remapping-alist’ で説明されています。

   • リモート・ホストがディレクトリ・リストのデフォルト・オプションを認
     識しない

     Emacsはローカル・ホストに基づいて ‘dired’ オプションを計算しますが
     、 リモート・ホストが同じ ‘ls’ コマンドを理解できない場合は、 以下
     のようにフックで設定します:

          (add-hook
           'dired-before-readin-hook
           (lambda ()
             (when (file-remote-p default-directory)
               (setq dired-actual-switches "-al"))))

   • リモート・ホストの ‘~/.sh_history’ が成長しまくるのはなぜですか？

     リモート・シェルが TRAMP によってトリガーされたチルダ展開(tilde
     expansions)を保存しているため、 ヒストリー・ファイルはおそらく急速
     に成長しています。 TRAMP は、 ユーザー・オプション
     ‘tramp-histfile-override’ でこの動作を抑制することができます。 ‘t’
     に設定すると、 環境変数 ‘HISTFILE’ が設定解除され、環境変数
     ‘HISTFILESIZE’ および ‘HISTSIZE’ が 0 に設定されます。 これを
     ‘bash’ 5.0.0 と一緒に使用しないでください。 この ‘bash’ にはバグが
     あり、 ‘bash’ を終了(die)させてしまいます。

     代わりに ‘tramp-histfile-override’ を文字列にすることもできます。 こ
     のとき、 環境変数 ‘HISTFILE’ がそのファイル名に設定されます。
     ‘/dev/null’ に設定するときは注意してください。 これにより、 ‘bash’
     をリモート・シェルとして使用すると、 望ましくない結果が生じる可能性
     があります。

     別のアプローチとして、 ‘tramp-histfile-override’ を ‘nil’ に設定し
     て、 TRAMP による ‘HISTFILE’ の処理をまったく無効にすることです。 こ
     の場合、 以下のシェル・コードを ‘.bashrc’ または ‘.kshrc’ に配置す
     ることで、 履歴の保存を無効にすることができます:

          if [ -f $HOME/.sh_history ] ; then
             /bin/rm $HOME/.sh_history
          fi
          if [ "${HISTFILE-unset}" != "unset" ] ; then
             unset HISTFILE
          fi
          if [ "${HISTSIZE-unset}" != "unset" ] ; then
             unset HISTSIZE
          fi

     ‘ssh’ ベースの方式(method)では、 以下の行を ‘~/.ssh/environment’ に
     追加します:

          HISTFILE=/dev/null

   • リモート・ファイルはどこに捨てられますか？

     Emacsはファイルを削除する代わりにゴミ箱(trash)に入れる事ができます
     (*note Trashing: (emacs)Misc File Ops.). リモート・ファイルは常にロ
     ーカルのごみ箱に移動されますが(trashed to the local trash)、 リモー
     トの暗号化ファイル(*note Keeping files encrypted::)は例外であり、い
     ずれにせよ削除されます。

     Emacs がごみ箱ディレクトリ(trash directory)に XDG 規則を使用するよ
     うに構成されている場合、 これらの規則ではリモート・パスが指定されて
     いないため、 それぞれのツールを使用してリモート・ファイルを復元する
     ことはできません。 そのようなファイルは、 必要に応じて
     ‘${XDG_DATA_HOME}/Trash/files/’ から手動で移動して復元する必要があ
     ります。

   • TRAMP によって生成された一時ファイルを識別する方法は？

     一時ファイルは ‘temporary-file-directory’ ディレクトリに保持されま
     す。 これは多くの場合 ‘/tmp/’ です。 デフォルトでは、 ファイル名の
     接頭辞は "tramp." です。 この接頭辞を変更したい場合、 たとえばパッ
     ケージ内で ‘file-local-copy’ によって生成された一時ファイルを識別し
     たい場合、 以下のように、 変数 ‘tramp-temp-name-prefix’ に一時的に
     バインドできます:

          (let ((tramp-temp-name-prefix "my-prefix."))
            (file-local-copy "/ssh::.emacs"))
          ⇒ "/tmp/my-prefix.HDfgDZ"

   • TRAMP で、 長いファイル名を短いキー入力で済ませるにはどうすればよい
     ですか？

     以下のアプローチのいくつかを適用してタイピングを減らします。 ここで
     、 フルネームが ‘/ssh:news@news.my.domain:/opt/news/etc’ であるとし
     て:

       1. 簡略化構文を使用:

          デフォルトの方式(method)(*note Default Method::)を常に適用する
          場合は、 簡素化された TRAMP 構文 (*note Change file name
          syntax::) を使用できます:

               (customize-set-variable 'tramp-default-method "ssh")
               (tramp-change-syntax 'simplified)

          これで削減されたタイプ入力: ‘C-x C-f
          /news@news.my.domain:/opt/news/etc <RET>’

       2. 方式(method)名とユーザー名にデフォルト値を使用:

          あなたは、ホスト達のためにデフォルトの方式(method)とユーザー名
          を定義できます(*note Default Method::, *note Default User::):

               (custom-set-variables
                '(tramp-default-method "ssh")
                '(tramp-default-user "news"))

          これで削減されたタイプ入力: ‘C-x C-f
          /-:news.my.domain:/opt/news/etc <RET>’

          *注意* 便利なショートカットがすでにいくつかあることに注意して
          ください。 ‘root’ ユーザーとしてローカルホストにアクセスするに
          は、 ‘C-x C-f /su:: <RET>’ だけでOKです。

       3. アクセス方式(method)の構成(configuration)オプションを使用:

          アクセス方式(method)に使用されるプログラムは、 すでに強力な構
          成を提供しています (*note Customizing Completion::)。 ‘ssh’ に
          ついては、 ファイル ‘~/.ssh/config’ を構成します:

               Host xy
                    HostName news.my.domain
                    User news

          これで削減されたタイプ入力: ‘C-x C-f /ssh:xy:/opt/news/etc
          <RET>’

          ディレクトリ内のファイルの数に応じて、 ホスト名の補完により、
          キー・ストロークをさらに減らすことができます: ‘C-x C-f /ssh:x
          <TAB>’

       4. 環境変数を使用して長い文字列を展開:

          長いファイル名の場合、 ミニ・バッファーで展開される環境変数を
          セットアップします。 環境変数は、Emacs の外部、 または Lisp を
          使用した Emacs の内部で設定されます。

               (setenv "xy" "/ssh:news@news.my.domain:/opt/news/etc/")

          これで削減されたタイプ入力: ‘C-x C-f $xy <RET>’

          *注意* ミニ・バッファーの編集中には環境変数が展開されないため
          、 ここでファイル名を編集することはできません。

       5. あなた独自のキー・バインドを定義:

          Emacs の ‘C-x C-f’ で別のキー・シーケンスを再定義します:

               (global-set-key
                [(control x) (control y)]
                (lambda ()
                  (interactive)
                  (find-file
                   (read-file-name
                    "Find TRAMP file: "
                    "/ssh:news@news.my.domain:/opt/news/etc/"))))

          これで、 ‘C-x C-y’ と入力するだけで、 ミニ・バッファでファイル
          名を編集する準備が整います。

          より包括的な例については、 the Emacs Wiki
          (https://www.emacswiki.org/emacs/TrampMode) を参照してください
          。

       6. あなた独自の略語(abbreviation)を定義(その1):

          略語リスト展開(abbreviation list expansion)を使用して、 長いフ
          ァイル名の入力を減らすことができます:

               (add-to-list 'directory-abbrev-alist
                            '("^/xy" . "/ssh:news@news.my.domain:/opt/news/etc/"))

          これで削減されたタイプ入力: ‘C-x C-f /xy <RET>’

          *注意* ミニ・バッファーの編集中には略語が展開されないため、 こ
          こでファイル名を編集することはできません。 さらに、<TAB> 補完
          では省略形は展開されません。

       7. あなた独自の略語を定義(その2):

          ‘abbrev-mode’ は、 ミニ・バッファーでの編集にさらなる柔軟性を
          与えます:

               (define-abbrev-table 'my-tramp-abbrev-table
                 '(("xy" "/ssh:news@news.my.domain:/opt/news/etc/")))

               (add-hook
                'minibuffer-setup-hook
                (lambda ()
                  (abbrev-mode 1)
                  (setq local-abbrev-table my-tramp-abbrev-table)))

               (defadvice minibuffer-complete
                 (before my-minibuffer-complete activate)
                 (expand-abbrev))

          これで削減されたタイプ入力: ‘C-x C-f xy <TAB>’

          ここで、 ミニ・バッファーは、さらに編集できるように展開が行わ
          れます。

       8. ブックマークの利用:

          ブックマークを使用して TRAMP ファイル名を保存します。 (*note
          (emacs)Bookmarks::)

          TRAMP で場所にアクセスしたら、 ‘<menu-bar> <edit> <bookmarks>
          <set>’ でブックマークとして保存します。

          そのブックマークに再度アクセスするには: ‘<menu-bar> <edit>
          <bookmarks> <jump>’

       9. 「最近使用したファイル」(recent files)の利用:

          ‘recentf’ は訪れた場所を覚えています。 (*note (emacs)File
          Conveniences::)

          リモート・アクセスによるアクセス可能性をチェックすることなく、
          リモート・ファイル名を最近のリストに保持します:

               (recentf-mode 1)

          最近開いたファイルへのアクセス: ‘<menu-bar> <file> <Open
          Recent>’

       10. ファイルキャッシュ(filecache)の利用:

          ‘filecache’ は訪問した場所を記憶するため、 リモート・ディレク
          トリをキャッシュに追加します:

               (with-eval-after-load 'filecache
                 (file-cache-add-directory
                   "/ssh:news@news.my.domain:/opt/news/etc/"))

          次に、 ‘C-x C-f C-<TAB>’ を使用して、 ミニ・バッファーでディレ
          クトリ補完を使用します。

       11. bbdb の利用:

          ‘bbdb’ には、 Ange FTP ファイル用の組み込み機能があり、 TRAMP
          ファイル名でも機能します。 (*note Storing FTP sites in the
          BBDB: (bbdb)bbdb-ftp.)

          ‘bbdb’ を Emacs にロードします:

               (require 'bbdb)
               (bbdb-initialize)

          ‘M-x bbdb-create-ftp-site <RET>’ で BBDB エントリを作成します
          。 次に、 必要に応じて方式(method)とユーザー名を指定します。 例
          :

               M-x bbdb-create-ftp-site <RET>
               Ftp Site: news.my.domain <RET>
               Ftp Directory: /opt/news/etc/ <RET>
               Ftp Username: ssh:news <RET>
               Company: <RET>
               Additional Comments: <RET>

          BBDB バッファで、 キー ‘F’ を押してエントリにアクセスします。

     これらのレシピに貢献してくれた TRAMP ユーザーに感謝します。

   • 保存されたマルチ・ホップ・ファイル名が新しい Emacs セッションで機能
     しないのはなぜですか？

     その場限りのマルチ・ホップ TRAMP ファイル名達(ad-hoc multi-hop
     TRAMP file names)(*note Ad-hoc multi-hops::) を、 ブックマークを介
     して、または最近のファイルを介して、 またはfilecacheを介して、 また
     はbbdbを介して、 または別のパッケージを介して、 保存する場合は、
     ‘/ssh:bird@bastion|ssh:news.my.domain:/opt/news/etc’ のように、 全
     てのホップを含む完全なその場限りのファイル名(ad-hoc file name)を使
     用します。

     代わりに、 短縮されたマルチ・ホップ・ファイル名
     ‘/ssh:news@news.my.domain:/opt/news/etc’ を保存する場合、 ユーザー
     ・オプション ‘tramp-save-ad-hoc-proxies’ は 非 ‘nil’ に設定する必要
     があります。

   • TRAMP を使用してリモート Emacs セッションに接続するには？

     Emacs Client を構成します (*note (emacs)Emacs Server::)。

     それから、 リモート・ホスト上で Emacs Server を開始します:

          (require 'server)
          (setq server-host (system-name)
                server-use-tcp t)
          (server-start)

     リモート・ホストの ‘(system-name)’ がローカル・ホストで解決できない
     場合は、 代わりに IP アドレスを使用します。

     結果のファイル ‘~/.emacs.d/server/server’ をリモート・ホストからロ
     ーカル・ホストの同一の場所にコピーします。

     次に、 コマンド・ラインから Emacs Client を起動します:

          $ emacsclient /ssh:user@host:/file/to/edit

     ‘user’ と ‘host’ は、 ローカル・ホストを参照します。

     Emacs Client を他のプログラムのエディターにするには、 ラッパー・ス
     クリプト ‘emacsclient.sh’ を使用します:

          #!/bin/sh
          emacsclient /ssh:$(whoami)@$(hostname --fqdn):$1

     次に、 環境変数 ‘EDITOR’ を変更して、 ラッパー・スクリプトを指すよ
     うにします:

          $ export EDITOR=/path/to/emacsclient.sh

   • バッファがリモートかどうかを判断する方法は？

     バッファ・ローカル変数 ‘default-directory’ がこれについて教えてくれ
     ます。 Lisp式 ‘(file-remote-p default-directory)’ が 非 ‘nil’ を返
     す場合、 バッファはリモートです。 リモート接続の詳細については、
     ‘file-remote-p’ のオプションの引数を参照してください。

   • リモート・ホストに到達できなくなったときにファイルを保存する方法は
     ？

     Emacs が実行されているローカル・マシンがネットワーク統合(network
     integration)を変更すると、 リモート・ストに到達できなくなる可能性が
     あります。 これは、例えば、 Emacs を再起動せずにオフィスと自宅の間
     でローカル・マシンを移動した場合に発生します。

     そのような場合、 コマンド ‘tramp-rename-files’ を使用して、リモート
     ・バッファの方式(method)やホストやディレクトリ名を変更できます。 こ
     れにより、コンテンツを別のネットワーク・パス経由で同じ場所に保存す
     ることも、 (ローカルを含む)完全に別の場所に保存することもできます
     (*note Renaming remote files::)。

   • TRAMP が ‘recentf-list’ をクリアしないようにするにはどうすればよい
     ですか？

     TRAMP が接続を消去すると、 それぞれのリモート・ファイル名達(remote
     file name(s))が ‘recentf-list’ から削除されます。 これが必要なのは
     、 応答しないリモート・ホストに対して ‘recentf’ をトリガーして、 応
     答しないリモート・ホストに何度も何度も接続しようとする可能性がある
     ためです。

     あなたにとって ‘recentf-list’ 内のファイル名達がとても大事
     (precious)なため、 クリーンアップが煩わしい場合は、 ‘tramp’ パッケ
     ージと ‘recentf’ パッケージのロード後、 以下の2つのLisp式を
     ‘~/.emacs’ に追加できます:

          (remove-hook
           'tramp-cleanup-connection-hook
           #'tramp-recentf-cleanup)
          (remove-hook
           'tramp-cleanup-all-connections-hook
           #'tramp-recentf-cleanup-all)

   • ‘Tramp has been compiled with Emacs a.b, this is Emacs c.d’ という
     警告が表示されます
   • エラー ‘tramp-file-name-handler: Invalid
     function:tramp-compat-with-mutex’ が表示されます

     TRAMP には、 異なる Emacs バージョンの互換性コードが付属しています
     。 このようなメッセージ (テキストは異なる場合があります) が表示され
     た場合は、 Emacs 組み込みバージョンの TRAMP を使用せず、 再コンパイ
     ルする必要があります。 GNU ELPA から TRAMP をインストールした場合、
     *Note ELPA Installation:: を参照し、 そうじゃない場合は *Note
     Recompilation:: を参照してください。

   • エラー ‘Remote file error: Forbidden reentrant call of Tramp’(訳注
     :リエントラント呼び出しの禁止)が表示されます

     タイマー(timers)や、プロセス・フィルター(process filters)や、センチ
     ネル(sentinels)や、その他の、 イベント・ベースの関数は、 リモート・
     ファイル操作がまだ実行されているときにいつでも実行できます。 これに
     より、 TRAMP がブロックされる可能性があります。 このような状況が検
     出されると、このエラーがトリガーされます。 それぞれの関数で修正を行
     う必要があります(エラー・レポートの送信が役立ちます)が、 当面は
     ‘~/.emacs’ 内の以下のコードでこのエラーを抑制することができます:

          (setq debug-ignored-errors
                (cons 'remote-file-error debug-ignored-errors))

   • エラー ‘Remote file error: Not a valid Tramp file name function
     `tramp-FOO-file-name-p'’ が表示されます

     TRAMP が内部関数の識別子(signature)を変更しました。 独自の TRAMP バ
     ックエンドを実装する外部パッケージは、 この変更に従う必要があります
     。 この問題をそのパッケージの作者に報告してください。

     実行中のセッションでは、 TRAMP によって外部パッケージを無効にし、 作
     業を続行できます。 TRAMP の有効化中にこのエラーを表示したくない場合
     は、 あなたの ‘~/.emacs’ で上記と同一のコードを使用して抑制できます
     :

          (setq debug-ignored-errors
                (cons 'remote-file-error debug-ignored-errors))

   • 他のパッケージから TRAMP を呼び出せないようにする方法は？

     ユーザーがリモート・ファイル名を入力することなく TRAMP を呼び出すパ
     ッケージがあります。 リモート・ファイル構文を適用しなくても、 一部
     のパッケージは TRAMP を独自に有効にします。 ユーザーがそのような機
     能を無効にするにはどうすればよいでしょうか。

        − ‘ido.el’

          TRAMP ファイル名補完を無効にする:

               (customize-set-variable 'ido-enable-tramp-completion nil)

        − ‘rlogin.el’

          リモート・ディレクトリ追跡モード(remote directory tracking
          mode)を無効にする:

               (rlogin-directory-tracking-mode -1)

   • TRAMP を無効にする方法は？

        − Ange FTP をデフォルトのリモート・ファイル・アクセス・パッケー
          ジとして保持するには、 以下を ‘.emacs’ に設定します:

               (customize-set-variable 'tramp-default-method "ftp")

          Ange FTP の構文を有効にする場合は、 以下のLisp式を追加します:

               (tramp-change-syntax 'simplified)

        − TRAMP も無効にする(Ange FTP も無効にする)には、 ‘.emacs’ で
          ‘tramp-mode’ を ‘nil’ に設定します。 *注意* TRAMP のロードを避
          けるために、 ‘customize-set-variable’ は使用しないことに注意し
          てください。

               (setq tramp-mode nil)

        − 類似したリモート・ファイル名に対して TRAMP を無効にするには、
          ‘.emacs’ で ‘tramp-ignored-file-name-regexp’ を適切な正規表現
          に設定します。 *注意* TRAMP のロードを避けるために、
          ‘customize-set-variable’ は使用しないことに注意してください。

               (setq tramp-ignored-file-name-regexp "\\`/ssh:example\\.com:")

          これが必要なのは、 たとえばローカル・ホストのルート・ディレク
          トリに ‘/ssh:example.com:’ として仮想ファイル・システムをマウ
          ントする場合です。

        − TRAMP をアンロードするには、 ‘M-x tramp-unload-tramp <RET>’ と
          入力します。 TRAMP をアンロードすると、Ange FTP プラグインもリ
          セットされます。

   • Ange FTP と TRAMP の違いは何ですか？

     その違いは、 Ange FTP は ‘ftp’ を使用してローカル・ホストとリモート
     ・ホストの間でファイルを転送するのに対し、 TRAMP は ‘ssh’ と ‘scp’
     または他の同様のプログラムの組み合わせを使用することです。


File: tramp,  Node: Files directories and localnames,  Next: Traces and Profiles,  Prev: Frequently Asked Questions,  Up: Top

9 How file names, directories and localnames are mangled and managed
********************************************************************

* Menu:

* Localname deconstruction::  Splitting a localname into its component
                                parts.
* External packages::        Integrating with external Lisp packages.


File: tramp,  Node: Localname deconstruction,  Next: External packages,  Up: Files directories and localnames

9.1 Splitting a localname into its component parts
==================================================

TRAMP package redefines lisp functions ‘file-name-directory’ and
‘file-name-nondirectory’ to accommodate the unique file naming syntax
that TRAMP requires.

   The replacements dissect the file name, use the original handler for
the localname, take that result, and then re-build the TRAMP file name.
By relying on the original handlers for localnames, TRAMP benefits from
platform specific hacks to the original handlers.


File: tramp,  Node: External packages,  Prev: Localname deconstruction,  Up: Files directories and localnames

9.2 Integrating with external Lisp packages
===========================================

In general, it is not recommended to use TRAMP functions and variables
not described in this manual.  They might change their signature and/or
semantics without any announcement.

9.2.1 File name completion
--------------------------

Sometimes, it is not convenient to open a new connection to a remote
host, including entering the password and alike.  For example, this is
nasty for packages providing file name completion.  Such a package could
signal to TRAMP, that they don’t want it to establish a new connection.
Use the variable ‘non-essential’ temporarily and bind it to non-‘nil’
value.

     (let ((non-essential t))
       ...)

9.2.2 File attributes cache
---------------------------

Keeping a local cache of remote file attributes in sync with the remote
host is a time-consuming operation.  Flushing and re-querying these
attributes can tax TRAMP to a grinding halt on busy remote hosts.

   To get around these types of slow-downs in TRAMP’s responsiveness,
set the ‘process-file-side-effects’ to ‘nil’ to stop TRAMP from flushing
the cache.  This is helpful in situations where callers to
‘process-file’ know there are no file attribute changes.  The let-bind
form to accomplish this:

     (let (process-file-side-effects)
       ...)

   For asynchronous processes, TRAMP uses a process sentinel to flush
file attributes cache.  When callers to ‘start-file-process’ know
beforehand no file attribute changes are expected, then the process
sentinel should be set to the default state.  In cases where the caller
defines its own process sentinel, TRAMP’s process sentinel is
overwritten.  The caller can still flush the file attributes cache in
its process sentinel with this code:

     (unless (memq (process-status proc) '(run open))
       (dired-uncache remote-directory))

   Since TRAMP traverses subdirectories starting with the root
directory, it is most likely sufficient to make the ‘default-directory’
of the process buffer as the root directory.

9.2.3 Timers
------------

Timers run asynchronously at any time when Emacs is waiting for sending
a string to a process, or waiting for process output.  They can run any
remote file operation, which would conflict with the already running
remote file operation, if the same connection is affected.  TRAMP
detects this situation, and raises the ‘remote-file-error’ error.  A
timer function should avoid this situation.  As a minimum, it should
protect itself against this error, by wrapping the timer function body
as follows:

     (ignore-error 'remote-file-error
       ...)


File: tramp,  Node: Traces and Profiles,  Next: GNU Free Documentation License,  Prev: Files directories and localnames,  Up: Top

10 How to Customize Traces
**************************

TRAMP messages are raised with verbosity levels ranging from 0 to 10.
TRAMP does not display all messages; only those with a verbosity level
less than or equal to ‘tramp-verbose’.

   The verbosity levels are

    0 silent (no TRAMP messages at all)
 1 errors
 2 warnings
 3 connection to remote hosts (default verbosity)
 4 activities
 5 internal
 6 sent and received strings
 7 connection properties
 8 file caching
 9 test commands
10 traces (huge)
11 call traces (maintainer only)

   With ‘tramp-verbose’ greater than or equal to 4, messages are also
written to a TRAMP debug buffer.  Such debug buffers are essential to
bug and problem analyzes.  For TRAMP bug reports, set the
‘tramp-verbose’ level to 6 (*note Bug Reports::).

   The debug buffer is in *note (emacs)Outline Mode::.  In this buffer,
messages can be filtered by their level.  To see messages up to
verbosity level 5, enter ‘C-u 6 C-c C-q’.  Other navigation keys are
described in *note (emacs)Outline Visibility::.

   TRAMP handles errors internally.  Hence, to get a Lisp backtrace, the
following settings are required:

     (setq debug-on-error t
           debug-on-signal t)

   If ‘tramp-verbose’ is greater than or equal to 10, Lisp backtraces
are also added to the TRAMP debug buffer in case of errors.

   In very rare cases it could happen, that TRAMP blocks Emacs.  Killing
Emacs does not allow inspecting the debug buffer.  In that case, you can
instruct TRAMP to mirror the debug buffer to a file:

     (customize-set-variable 'tramp-debug-to-file t)

   The debug buffer is written as a file in your
‘temporary-file-directory’, which is usually ‘/tmp/’.  Use this option
with care, because it could decrease the performance of TRAMP actions.

   If ‘tramp-verbose’ is greater than or equal to 11, TRAMP function
call traces are written to the buffer ‘*trace-output*’.


File: tramp,  Node: GNU Free Documentation License,  Next: Function Index,  Prev: Traces and Profiles,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008, 2009 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: tramp,  Node: Function Index,  Next: Variable Index,  Prev: GNU Free Documentation License,  Up: Top

Function Index
**************

 [index ]
* Menu:

* list-system-processes:                 Remote processes.    (line 327)
* make-process:                          Remote processes.    (line 392)
* my-tramp-parse:                        Customizing Completion.
                                                              (line  89)
* process-attributes:                    Remote processes.    (line 327)
* start-file-process:                    Remote processes.    (line 392)
* tramp-bug:                             Bug Reports.         (line  28)
* tramp-change-syntax:                   Change file name syntax.
                                                              (line  10)
* tramp-cleanup-all-buffers:             Cleanup remote connections.
                                                              (line  36)
* tramp-cleanup-all-connections:         Cleanup remote connections.
                                                              (line  30)
* tramp-cleanup-connection:              Cleanup remote connections.
                                                              (line   8)
* tramp-cleanup-this-connection:         Cleanup remote connections.
                                                              (line  26)
* tramp-crypt-add-directory:             Keeping files encrypted.
                                                              (line  25)
* tramp-crypt-remove-directory:          Keeping files encrypted.
                                                              (line  93)
* tramp-get-completion-function:         Customizing Completion.
                                                              (line  16)
* tramp-get-completion-function <1>:     Ssh setup.           (line  13)
* tramp-parse-etc-group:                 Customizing Completion.
                                                              (line  77)
* tramp-parse-hosts:                     Customizing Completion.
                                                              (line  69)
* tramp-parse-netrc:                     Customizing Completion.
                                                              (line  81)
* tramp-parse-passwd:                    Customizing Completion.
                                                              (line  73)
* tramp-parse-rhosts:                    Customizing Completion.
                                                              (line  40)
* tramp-parse-sconfig:                   Customizing Completion.
                                                              (line  51)
* tramp-parse-shostkeys:                 Customizing Completion.
                                                              (line  56)
* tramp-parse-shosts:                    Customizing Completion.
                                                              (line  45)
* tramp-parse-sknownhosts:               Customizing Completion.
                                                              (line  62)
* tramp-recompile-elpa:                  Recompilation.       (line  24)
* tramp-rename-files:                    Renaming remote files.
                                                              (line  11)
* tramp-rename-these-files:              Renaming remote files.
                                                              (line  45)
* tramp-set-completion-function:         Customizing Completion.
                                                              (line  26)
* tramp-set-completion-function <1>:     Ssh setup.           (line  13)


File: tramp,  Node: Variable Index,  Next: Concept Index,  Prev: Function Index,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* ange-ftp-netrc-filename:               Password handling.   (line  53)
* async-shell-command-width:             Remote processes.    (line 182)
* auth-source-debug:                     Password handling.   (line  50)
* auth-source-save-behavior:             Password handling.   (line  44)
* auth-sources:                          Password handling.   (line  16)
* auto-save-file-name-transforms:        Auto-save File Lock and Backup.
                                                              (line  60)
* backup-directory-alist:                Auto-save File Lock and Backup.
                                                              (line   6)
* COLUMNS, environment variable:         Remote processes.    (line 182)
* ControlPath, ssh option:               Ssh setup.           (line  54)
* ControlPersist, ssh option:            Ssh setup.           (line  54)
* customize-package-emacs-version-alist: TRAMP の取得.        (line  24)
* debug-ignored-errors:                  Frequently Asked Questions.
                                                              (line 626)
* DESTDIR, environment variable:         Installation parameters.
                                                              (line  42)
* DISPLAY, environment variable:         Remote processes.    (line 108)
* EDITOR, environment variable:          Frequently Asked Questions.
                                                              (line 564)
* enable-remote-dir-locals:              Configuration.       (line  30)
* ENV, environment variable:             Remote processes.    (line  79)
* ESHELL, environment variable:          Remote shell setup.  (line 208)
* ForwardX11, ssh option:                Remote processes.    (line 122)
* ForwardX11Trusted, ssh option:         Remote processes.    (line 122)
* HGPLAIN, environment variable:         Remote processes.    (line  97)
* HISTFILE, environment variable:        Frequently Asked Questions.
                                                              (line 272)
* HISTFILESIZE, environment variable:    Frequently Asked Questions.
                                                              (line 272)
* HISTORY, environment variable:         Remote processes.    (line  68)
* HISTSIZE, environment variable:        Frequently Asked Questions.
                                                              (line 272)
* Include, ssh option:                   Ssh setup.           (line  13)
* INFOPATH, environment variable:        Load paths.          (line  12)
* INSIDE_EMACS, environment variable:    Remote shell setup.  (line 121)
* INSIDE_EMACS, environment variable <1>: Remote shell setup. (line 208)
* INSIDE_EMACS, environment variable <2>: Remote processes.   (line  40)
* lock-file-name-transforms:             Auto-save File Lock and Backup.
                                                              (line  80)
* non-essential:                         External packages.   (line  13)
* password-cache:                        Password handling.   (line  81)
* password-cache-expiry:                 Password handling.   (line  76)
* password-word-equivalents:             Remote shell setup.  (line  97)
* PATH, environment variable:            External methods.    (line 190)
* proced-show-remote-processes:          Remote processes.    (line 383)
* process-connection-type:               Remote processes.    (line 282)
* process-file-return-signal-string:     Remote processes.    (line  21)
* process-file-side-effects:             External packages.   (line  26)
* ProxyCommand, ssh option:              Firewalls.           (line  18)
* ProxyCommand, ssh option <1>:          Ssh setup.           (line  79)
* ProxyJump, ssh option:                 Ssh setup.           (line  79)
* remote-file-error:                     Frequently Asked Questions.
                                                              (line 626)
* remote-file-error <1>:                 External packages.   (line  57)
* remote-file-name-inhibit-auto-save-visited: Auto-save File Lock and Backup.
                                                              (line  74)
* remote-file-name-inhibit-cache:        Frequently Asked Questions.
                                                              (line  48)
* remote-file-name-inhibit-locks:        Auto-save File Lock and Backup.
                                                              (line  91)
* RemoteCommand, ssh option:             Remote shell setup.  (line  38)
* REMOTE_TEMPORARY_FILE_DIRECTORY, environment variable: Testing.
                                                              (line  11)
* ServerAliveCountMax, ssh option:       Ssh setup.           (line  38)
* ServerAliveInterval, ssh option:       Ssh setup.           (line  38)
* shell-command-switch:                  Remote processes.    (line 175)
* shell-file-name:                       Remote processes.    (line 175)
* SHELLNAME, environment variable:       Remote shell setup.  (line 208)
* SSH_AUTH_SOCK, environment variable:   Ssh setup.           (line 167)
* TERM, environment variable:            Remote shell setup.  (line 107)
* TERM, environment variable <1>:        Remote shell setup.  (line 121)
* tramp-actions-before-shell:            Remote shell setup.  (line 152)
* tramp-adb-connect-if-not-connected:    External methods.    (line 199)
* tramp-adb-connection-local-default-ps-profile: Remote processes.
                                                              (line 365)
* tramp-adb-connection-local-default-ps-variables: Remote processes.
                                                              (line 365)
* tramp-adb-program:                     External methods.    (line 190)
* tramp-allow-unsafe-temporary-files:    Auto-save File Lock and Backup.
                                                              (line  94)
* tramp-archive-all-gvfs-methods:        Archive file names.  (line  97)
* tramp-archive-compression-suffixes:    Archive file names.  (line  89)
* tramp-archive-enabled:                 Archive file names.  (line 128)
* tramp-archive-suffixes:                Archive file names.  (line  29)
* tramp-auto-save-directory:             Auto-save File Lock and Backup.
                                                              (line  71)
* tramp-backup-directory-alist:          Auto-save File Lock and Backup.
                                                              (line  38)
* tramp-completion-function-alist:       Customizing Completion.
                                                              (line   6)
* tramp-completion-use-auth-sources:     File name completion.
                                                              (line  36)
* tramp-confirm-rename-file-names:       Renaming remote files.
                                                              (line  91)
* tramp-connection-local-bsd-ps-profile: Remote processes.    (line 365)
* tramp-connection-local-bsd-ps-variables: Remote processes.  (line 365)
* tramp-connection-local-busybox-ps-profile: Remote processes.
                                                              (line 365)
* tramp-connection-local-busybox-ps-variables: Remote processes.
                                                              (line 365)
* tramp-connection-local-darwin-ps-profile: Remote processes. (line 365)
* tramp-connection-local-darwin-ps-variables: Remote processes.
                                                              (line 365)
* tramp-connection-properties:           Predefined connection information.
                                                              (line   9)
* tramp-crypt-encfs-option:              Keeping files encrypted.
                                                              (line  31)
* tramp-crypt-save-encfs-config-remote:  Keeping files encrypted.
                                                              (line  54)
* tramp-debug-to-file:                   Traces and Profiles. (line   6)
* tramp-default-host:                    Default Host.        (line   6)
* tramp-default-host-alist:              Default Host.        (line  21)
* tramp-default-method:                  Default Method.      (line   9)
* tramp-default-method-alist:            Default Method.      (line  17)
* tramp-default-proxies-alist:           Multi-hops.          (line  13)
* tramp-default-remote-path:             Remote programs.     (line  20)
* tramp-default-rename-alist:            Renaming remote files.
                                                              (line  54)
* tramp-default-user:                    Default User.        (line   6)
* tramp-default-user-alist:              Default User.        (line  13)
* tramp-encoding-shell:                  Remote shell setup.  (line  34)
* tramp-file-name-regexp:                Change file name syntax.
                                                              (line  28)
* tramp-fuse-unmount-on-cleanup:         FUSE setup.          (line  20)
* tramp-gvfs-methods:                    GVFS-based methods.  (line  82)
* tramp-histfile-override:               Frequently Asked Questions.
                                                              (line 272)
* tramp-ignored-file-name-regexp:        Frequently Asked Questions.
                                                              (line 690)
* tramp-inline-compress-commands:        Inline methods.      (line  26)
* tramp-inline-compress-start-size:      Inline methods.      (line  26)
* tramp-local-host-regexp:               Frequently Asked Questions.
                                                              (line 172)
* tramp-methods:                         Customizing Methods. (line   6)
* tramp-mode:                            Frequently Asked Questions.
                                                              (line 683)
* tramp-own-remote-path:                 Remote programs.     (line  34)
* tramp-password-prompt-regexp:          Remote shell setup.  (line  75)
* tramp-persistency-file-name:           Connection caching.  (line   6)
* tramp-process-attributes-ps-args:      Remote processes.    (line 332)
* tramp-process-attributes-ps-format:    Remote processes.    (line 336)
* tramp-rclone-program:                  FUSE-based methods.  (line  16)
* tramp-remote-coding-commands:          Inline methods.      (line  17)
* tramp-remote-path:                     Remote programs.     (line  16)
* tramp-remote-process-environment:      Remote processes.    (line  54)
* tramp-restricted-shell-hosts-alist:    Multi-hops.          (line  88)
* tramp-save-ad-hoc-proxies:             Ad-hoc multi-hops.   (line  30)
* tramp-sh-extra-args:                   Remote shell setup.  (line  24)
* tramp-shell-prompt-pattern:            Remote shell setup.  (line  66)
* tramp-smb-options:                     Frequently Asked Questions.
                                                              (line 188)
* tramp-ssh-controlmaster-options:       Ssh setup.           (line  61)
* tramp-sshfs-program:                   FUSE-based methods.  (line  49)
* tramp-temp-name-prefix:                Frequently Asked Questions.
                                                              (line 324)
* tramp-terminal-type:                   Remote shell setup.  (line 107)
* tramp-theme-face-remapping-alist:      Frequently Asked Questions.
                                                              (line 252)
* tramp-use-scp-direct-remote-copying:   Ssh setup.           (line 109)
* tramp-use-ssh-controlmaster-options:   Ssh setup.           (line  74)
* tramp-verbose:                         Traces and Profiles. (line   6)
* tramp-version:                         TRAMP の取得.        (line   6)
* tramp-wrong-passwd-regexp:             Remote shell setup.  (line  75)


File: tramp,  Node: Concept Index,  Prev: Variable Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* .login file:                           Remote shell setup.  (line  46)
* .profile file:                         Remote shell setup.  (line  46)
* 7z file archive suffix:                Archive file names.  (line  35)
* adb method:                            Quick Start Guide.   (line 143)
* adb method <1>:                        External methods.    (line 189)
* afp method:                            Quick Start Guide.   (line 101)
* afp method <1>:                        GVFS-based methods.  (line  16)
* alternative file name syntax:          Change file name syntax.
                                                              (line   6)
* android:                               Quick Start Guide.   (line 143)
* android (with adb method):             External methods.    (line 189)
* android shell setup for ssh:           Android shell setup. (line   6)
* apk file archive suffix:               Archive file names.  (line  37)
* ar file archive suffix:                Archive file names.  (line  39)
* archive file names:                    Archive file names.  (line   6)
* archive method:                        Archive file names.  (line   6)
* Asynchronous remote processes:         Remote processes.    (line 305)
* Asynchronous remote processes <1>:     Remote processes.    (line 392)
* auto-save:                             Auto-save File Lock and Backup.
                                                              (line   6)
* backup:                                Auto-save File Lock and Backup.
                                                              (line   6)
* base-64 encoding:                      Inline methods.      (line  17)
* base-64 encoding <1>:                  Inline methods.      (line  17)
* behind the scenes:                     Overview.            (line  47)
* bug reports:                           Bug Reports.         (line   6)
* cab file archive suffix:               Archive file names.  (line  41)
* CAB file archive suffix:               Archive file names.  (line  41)
* caching:                               Connection caching.  (line   6)
* change file name syntax:               Change file name syntax.
                                                              (line   6)
* choosing the right method:             Default Method.      (line  44)
* cleanup:                               Cleanup remote connections.
                                                              (line   6)
* compile:                               Remote processes.    (line   6)
* configuration:                         Configuration.       (line   6)
* connection types, overview:            Connection types.    (line   6)
* cpio file archive suffix:              Archive file names.  (line  43)
* crate file archive suffix:             Archive file names.  (line  45)
* create your own methods:               Customizing Methods. (line   6)
* customizing completion:                Customizing Completion.
                                                              (line   6)
* customizing methods:                   Customizing Methods. (line   6)
* cygwin and fakecygpty:                 Ssh setup.           (line 155)
* cygwin and ssh-agent:                  Ssh setup.           (line 167)
* cygwin, issues:                        Ssh setup.           (line 143)
* dav method:                            Quick Start Guide.   (line 101)
* dav method <1>:                        GVFS-based methods.  (line  24)
* davs method:                           Quick Start Guide.   (line 101)
* davs method <1>:                       GVFS-based methods.  (line  24)
* dbus:                                  GVFS-based methods.  (line   6)
* deb file archive suffix:               Archive file names.  (line  47)
* default configuration:                 Configuration.       (line   6)
* default host:                          Default Host.        (line   6)
* default method:                        Default Method.      (line   6)
* default user:                          Default User.        (line   6)
* depot file archive suffix:             Archive file names.  (line  49)
* details of operation:                  Overview.            (line  47)
* doas method:                           Quick Start Guide.   (line  58)
* doas method <1>:                       Quick Start Guide.   (line  72)
* doas method <2>:                       Inline methods.      (line  70)
* docker method:                         Customizing Methods. (line  16)
* encfs:                                 Keeping files encrypted.
                                                              (line  19)
* encfsctl:                              Keeping files encrypted.
                                                              (line  19)
* Encrypt remote directories:            Keeping files encrypted.
                                                              (line   6)
* epub file archive suffix:              Archive file names.  (line  51)
* eshell:                                Remote processes.    (line 193)
* exe file archive suffix:               Archive file names.  (line  53)
* external methods:                      External methods.    (line   6)
* fakecygpty and cygwin:                 Ssh setup.           (line 155)
* FAQ:                                   Frequently Asked Questions.
                                                              (line   6)
* fcp method:                            External methods.    (line  77)
* file archive suffix 7z:                Archive file names.  (line  35)
* file archive suffix apk:               Archive file names.  (line  37)
* file archive suffix ar:                Archive file names.  (line  39)
* file archive suffix cab:               Archive file names.  (line  41)
* file archive suffix CAB:               Archive file names.  (line  41)
* file archive suffix cpio:              Archive file names.  (line  43)
* file archive suffix crate:             Archive file names.  (line  45)
* file archive suffix deb:               Archive file names.  (line  47)
* file archive suffix depot:             Archive file names.  (line  49)
* file archive suffix epub:              Archive file names.  (line  51)
* file archive suffix exe:               Archive file names.  (line  53)
* file archive suffix iso:               Archive file names.  (line  55)
* file archive suffix jar:               Archive file names.  (line  57)
* file archive suffix lzh:               Archive file names.  (line  59)
* file archive suffix LZH:               Archive file names.  (line  59)
* file archive suffix msu:               Archive file names.  (line  61)
* file archive suffix MSU:               Archive file names.  (line  61)
* file archive suffix mtree:             Archive file names.  (line  63)
* file archive suffix odb:               Archive file names.  (line  66)
* file archive suffix odf:               Archive file names.  (line  66)
* file archive suffix odg:               Archive file names.  (line  66)
* file archive suffix odp:               Archive file names.  (line  66)
* file archive suffix ods:               Archive file names.  (line  66)
* file archive suffix odt:               Archive file names.  (line  66)
* file archive suffix pax:               Archive file names.  (line  68)
* file archive suffix rar:               Archive file names.  (line  70)
* file archive suffix rpm:               Archive file names.  (line  72)
* file archive suffix shar:              Archive file names.  (line  74)
* file archive suffix tar:               Archive file names.  (line  77)
* file archive suffix tbz:               Archive file names.  (line  77)
* file archive suffix tgz:               Archive file names.  (line  77)
* file archive suffix tlz:               Archive file names.  (line  77)
* file archive suffix txz:               Archive file names.  (line  77)
* file archive suffix tzst:              Archive file names.  (line  77)
* file archive suffix warc:              Archive file names.  (line  79)
* file archive suffix xar:               Archive file names.  (line  81)
* file archive suffix xpi:               Archive file names.  (line  83)
* file archive suffix xps:               Archive file names.  (line  85)
* file archive suffix zip:               Archive file names.  (line  87)
* file archive suffix ZIP:               Archive file names.  (line  87)
* file archives:                         Archive file names.  (line   6)
* file name completion:                  File name completion.
                                                              (line   6)
* file name examples:                    File name syntax.    (line   6)
* file name syntax:                      Quick Start Guide.   (line  21)
* file name syntax <1>:                  File name syntax.    (line   6)
* file-lock:                             Auto-save File Lock and Backup.
                                                              (line   6)
* frequently asked questions:            Frequently Asked Questions.
                                                              (line   6)
* fsh (with fcp method):                 External methods.    (line  77)
* fsh method:                            External methods.    (line  87)
* ftp method:                            External methods.    (line 123)
* fuse-based methods:                    Quick Start Guide.   (line 124)
* fuse-based methods <1>:                FUSE-based methods.  (line   6)
* gdb:                                   Remote processes.    (line 227)
* gdrive method:                         Quick Start Guide.   (line 112)
* gdrive method <1>:                     GVFS-based methods.  (line  36)
* git method:                            Customizing Methods. (line  38)
* GNOME Online Accounts:                 Quick Start Guide.   (line 112)
* GNOME Online Accounts <1>:             GVFS-based methods.  (line  36)
* GNU ELPA:                              TRAMP の取得.        (line   6)
* GNU ELPA <1>:                          ELPA Installation.   (line   6)
* google drive:                          Quick Start Guide.   (line 112)
* google drive <1>:                      GVFS-based methods.  (line  36)
* gud.el:                                Remote processes.    (line 227)
* gvfs-based methods:                    Quick Start Guide.   (line 101)
* gvfs-based methods <1>:                GVFS-based methods.  (line   6)
* hdfs method:                           Customizing Methods. (line  45)
* how it works:                          Overview.            (line  47)
* http tunnel:                           Firewalls.           (line   6)
* inline methods:                        Inline methods.      (line   6)
* installation:                          Installation.        (line   6)
* installation <1>:                      Installation parameters.
                                                              (line   6)
* installation <2>:                      Testing.             (line   6)
* installation <3>:                      Load paths.          (line   6)
* installation <4>:                      ELPA Installation.   (line   6)
* iso file archive suffix:               Archive file names.  (line  55)
* jar file archive suffix:               Archive file names.  (line  57)
* kerberos (with krlogin method):        Inline methods.      (line 105)
* kerberos (with ksu method):            Inline methods.      (line 110)
* krlogin method:                        Inline methods.      (line 105)
* ksu method:                            Inline methods.      (line 110)
* kubectl method:                        Customizing Methods. (line  22)
* lxc method:                            Customizing Methods. (line  28)
* lxd method:                            Customizing Methods. (line  33)
* lzh file archive suffix:               Archive file names.  (line  59)
* LZH file archive suffix:               Archive file names.  (line  59)
* media:                                 GVFS-based methods.  (line  50)
* method adb:                            Quick Start Guide.   (line 143)
* method adb <1>:                        External methods.    (line 189)
* method afp:                            Quick Start Guide.   (line 101)
* method afp <1>:                        GVFS-based methods.  (line  16)
* method archive:                        Archive file names.  (line   6)
* method dav:                            Quick Start Guide.   (line 101)
* method dav <1>:                        GVFS-based methods.  (line  24)
* method davs:                           Quick Start Guide.   (line 101)
* method davs <1>:                       GVFS-based methods.  (line  24)
* method doas:                           Quick Start Guide.   (line  58)
* method doas <1>:                       Quick Start Guide.   (line  72)
* method doas <2>:                       Inline methods.      (line  70)
* method docker:                         Customizing Methods. (line  16)
* method fcp:                            External methods.    (line  77)
* method fsh:                            External methods.    (line  87)
* method ftp:                            External methods.    (line 123)
* method gdrive:                         Quick Start Guide.   (line 112)
* method gdrive <1>:                     GVFS-based methods.  (line  36)
* method git:                            Customizing Methods. (line  38)
* method hdfs:                           Customizing Methods. (line  45)
* method krlogin:                        Inline methods.      (line 105)
* method ksu:                            Inline methods.      (line 110)
* method kubectl:                        Customizing Methods. (line  22)
* method lxc:                            Customizing Methods. (line  28)
* method lxd:                            Customizing Methods. (line  33)
* method mtp:                            Quick Start Guide.   (line 101)
* method mtp <1>:                        GVFS-based methods.  (line  50)
* method nc:                             External methods.    (line  93)
* method nextcloud:                      Quick Start Guide.   (line 112)
* method nextcloud <1>:                  GVFS-based methods.  (line  66)
* method nspawn:                         Customizing Methods. (line  51)
* method plink:                          Quick Start Guide.   (line  45)
* method plink <1>:                      Quick Start Guide.   (line  72)
* method plink <2>:                      Inline methods.      (line 115)
* method plinkx:                         Inline methods.      (line 126)
* method pscp:                           External methods.    (line  63)
* method psftp:                          External methods.    (line  63)
* method rclone:                         Quick Start Guide.   (line 124)
* method rclone <1>:                     FUSE-based methods.  (line  15)
* method rcp:                            External methods.    (line  18)
* method rsh:                            Inline methods.      (line  33)
* method rsync:                          External methods.    (line  38)
* method scp:                            External methods.    (line  26)
* method scpx:                           External methods.    (line  49)
* method scpx with cygwin:               Ssh setup.           (line 159)
* method sftp:                           Quick Start Guide.   (line 101)
* method sftp <1>:                       GVFS-based methods.  (line  74)
* method sg:                             Quick Start Guide.   (line  58)
* method sg <1>:                         Inline methods.      (line  76)
* method smb:                            Quick Start Guide.   (line  92)
* method smb <1>:                        External methods.    (line 129)
* method ssh:                            Quick Start Guide.   (line  45)
* method ssh <1>:                        Quick Start Guide.   (line  72)
* method ssh <2>:                        Inline methods.      (line  39)
* method sshfs:                          Quick Start Guide.   (line 124)
* method sshfs <1>:                      FUSE-based methods.  (line  48)
* method sshx:                           Inline methods.      (line  84)
* method sshx with cygwin:               Ssh setup.           (line 145)
* method su:                             Quick Start Guide.   (line  58)
* method su <1>:                         Quick Start Guide.   (line  72)
* method su <2>:                         Inline methods.      (line  54)
* method sudo:                           Quick Start Guide.   (line  58)
* method sudo <1>:                       Quick Start Guide.   (line  72)
* method sudo <2>:                       Inline methods.      (line  61)
* method sudoedit:                       Quick Start Guide.   (line  83)
* method sudoedit <1>:                   External methods.    (line 101)
* method telnet:                         Inline methods.      (line  49)
* method vagrant:                        Customizing Methods. (line  60)
* methods, external:                     External methods.    (line   6)
* methods, fuse:                         Quick Start Guide.   (line 124)
* methods, fuse <1>:                     FUSE-based methods.  (line   6)
* methods, gvfs:                         Quick Start Guide.   (line 101)
* methods, gvfs <1>:                     GVFS-based methods.  (line   6)
* methods, inline:                       Inline methods.      (line   6)
* ms windows (with smb method):          Quick Start Guide.   (line  92)
* ms windows (with smb method) <1>:      External methods.    (line 129)
* msu file archive suffix:               Archive file names.  (line  61)
* MSU file archive suffix:               Archive file names.  (line  61)
* mtp method:                            Quick Start Guide.   (line 101)
* mtp method <1>:                        GVFS-based methods.  (line  50)
* mtree file archive suffix:             Archive file names.  (line  63)
* multi-hop:                             Multi-hops.          (line   6)
* multi-hop, ad-hoc:                     Ad-hoc multi-hops.   (line   6)
* nc method:                             External methods.    (line  93)
* nc unix command:                       Remote shell setup.  (line 233)
* nextcloud:                             Quick Start Guide.   (line 112)
* nextcloud <1>:                         GVFS-based methods.  (line  66)
* nextcloud method:                      Quick Start Guide.   (line 112)
* nextcloud method <1>:                  GVFS-based methods.  (line  66)
* nspawn method:                         Customizing Methods. (line  51)
* obtaining TRAMP:                       TRAMP の取得.        (line   6)
* odb file archive suffix:               Archive file names.  (line  66)
* odf file archive suffix:               Archive file names.  (line  66)
* odg file archive suffix:               Archive file names.  (line  66)
* odp file archive suffix:               Archive file names.  (line  66)
* ods file archive suffix:               Archive file names.  (line  66)
* odt file archive suffix:               Archive file names.  (line  66)
* overview:                              Overview.            (line   6)
* passwords:                             Password handling.   (line   6)
* pax file archive suffix:               Archive file names.  (line  68)
* perldb:                                Remote processes.    (line 227)
* plink (with pscp method):              External methods.    (line  63)
* plink (with psftp method):             External methods.    (line  63)
* plink method:                          Quick Start Guide.   (line  45)
* plink method <1>:                      Quick Start Guide.   (line  72)
* plink method <2>:                      Inline methods.      (line 115)
* plinkx method:                         Inline methods.      (line 126)
* powershell:                            Remote processes.    (line 259)
* proced:                                Remote processes.    (line 383)
* proxy hosts:                           Multi-hops.          (line   6)
* proxy hosts, ad-hoc:                   Ad-hoc multi-hops.   (line   6)
* proxy hosts, http tunnel:              Firewalls.           (line   6)
* pscp method:                           External methods.    (line  63)
* psftp method:                          External methods.    (line  63)
* putty (with pscp method):              External methods.    (line  63)
* putty (with psftp method):             External methods.    (line  63)
* quick start guide:                     Quick Start Guide.   (line   6)
* rar file archive suffix:               Archive file names.  (line  70)
* rclone method:                         Quick Start Guide.   (line 124)
* rclone method <1>:                     FUSE-based methods.  (line  15)
* rclone setup:                          FUSE setup.          (line  27)
* rcp method:                            External methods.    (line  18)
* recompilation:                         Recompilation.       (line   6)
* recompile:                             Remote processes.    (line   6)
* remote shell setup:                    Remote shell setup.  (line  46)
* rpm file archive suffix:               Archive file names.  (line  72)
* rsh (with rcp method):                 External methods.    (line  18)
* rsh method:                            Inline methods.      (line  33)
* rsync method:                          External methods.    (line  38)
* save remote files:                     Renaming remote files.
                                                              (line   6)
* scp method:                            External methods.    (line  26)
* scpx method:                           External methods.    (line  49)
* scpx method with cygwin:               Ssh setup.           (line 159)
* selecting config files:                Customizing Completion.
                                                              (line   6)
* separate syntax:                       Change file name syntax.
                                                              (line  21)
* sftp method:                           Quick Start Guide.   (line 101)
* sftp method <1>:                       GVFS-based methods.  (line  74)
* sg method:                             Quick Start Guide.   (line  58)
* sg method <1>:                         Inline methods.      (line  76)
* shar file archive suffix:              Archive file names.  (line  74)
* shell:                                 Remote processes.    (line 128)
* shell init files:                      Remote shell setup.  (line  46)
* shell-command:                         Remote processes.    (line 162)
* simplified syntax:                     Change file name syntax.
                                                              (line  14)
* smb method:                            Quick Start Guide.   (line  92)
* smb method <1>:                        External methods.    (line 129)
* smbclient:                             Quick Start Guide.   (line  92)
* smbclient <1>:                         External methods.    (line 129)
* ssh (with rsync method):               External methods.    (line  38)
* ssh (with scp method):                 External methods.    (line  26)
* ssh (with scpx method):                External methods.    (line  49)
* ssh method:                            Quick Start Guide.   (line  45)
* ssh method <1>:                        Quick Start Guide.   (line  72)
* ssh method <2>:                        Inline methods.      (line  39)
* sshfs method:                          Quick Start Guide.   (line 124)
* sshfs method <1>:                      FUSE-based methods.  (line  48)
* sshfs setup:                           FUSE setup.          (line  42)
* sshx method:                           Inline methods.      (line  84)
* sshx method with cygwin:               Ssh setup.           (line 145)
* SSH_AUTH_SOCK and emacs on ms windows: Ssh setup.           (line 167)
* su method:                             Quick Start Guide.   (line  58)
* su method <1>:                         Quick Start Guide.   (line  72)
* su method <2>:                         Inline methods.      (line  54)
* sudo method:                           Quick Start Guide.   (line  58)
* sudo method <1>:                       Quick Start Guide.   (line  72)
* sudo method <2>:                       Inline methods.      (line  61)
* sudoedit method:                       Quick Start Guide.   (line  83)
* sudoedit method <1>:                   External methods.    (line 101)
* tar file archive suffix:               Archive file names.  (line  77)
* tbz file archive suffix:               Archive file names.  (line  77)
* telnet (with nc method):               External methods.    (line  93)
* telnet method:                         Inline methods.      (line  49)
* testing:                               Testing.             (line   6)
* tgz file archive suffix:               Archive file names.  (line  77)
* tlz file archive suffix:               Archive file names.  (line  77)
* TRAMP theme:                           Frequently Asked Questions.
                                                              (line 252)
* tramp-process-connection-type:         Remote processes.    (line 282)
* tset unix command:                     Remote shell setup.  (line 140)
* txz file archive suffix:               Archive file names.  (line  77)
* type-ahead:                            Usage.               (line  12)
* tzst file archive suffix:              Archive file names.  (line  77)
* unix command nc:                       Remote shell setup.  (line 233)
* unix command tset:                     Remote shell setup.  (line 140)
* using non-standard methods:            Customizing Methods. (line   6)
* using TRAMP:                           Usage.               (line   6)
* uu encoding:                           Inline methods.      (line  17)
* vagrant method:                        Customizing Methods. (line  60)
* warc file archive suffix:              Archive file names.  (line  79)
* winexe:                                Remote processes.    (line 259)
* xar file archive suffix:               Archive file names.  (line  81)
* xpi file archive suffix:               Archive file names.  (line  83)
* xps file archive suffix:               Archive file names.  (line  85)
* zip file archive suffix:               Archive file names.  (line  87)
* ZIP file archive suffix:               Archive file names.  (line  87)
* zsh setup:                             Remote shell setup.  (line   9)



Tag Table:
Node: Top922
Node: Overview6258
Node: TRAMP の取得14203
Node: Installation17357
Node: System Requirements17901
Node: Basic Installation18727
Node: Installation parameters21872
Node: Recompilation25455
Node: Testing26614
Node: Load paths27871
Node: ELPA Installation28669
Node: Quick Start Guide29755
Ref: Quick Start Guide File name syntax30860
Ref: Quick Start Guide ssh and plink methods32436
Ref: Quick Start Guide su, sudo, doas and sg methods33217
Ref: Quick Start Guide Combining ssh, plink, su, sudo and doas methods34134
Ref: Quick Start Guide sudoedit method34937
Ref: Quick Start Guide smb method35458
Ref: Quick Start Guide GVFS-based methods35922
Ref: Quick Start Guide GNOME Online Accounts based methods36477
Ref: Quick Start Guide FUSE-based methods37176
Ref: Quick Start Guide Android38473
Node: Configuration38792
Node: Connection types42159
Node: Inline methods44199
Node: External methods51544
Node: GVFS-based methods64363
Node: FUSE-based methods70205
Node: Default Method74394
Node: Default User78825
Node: Default Host80730
Node: Multi-hops82219
Node: Firewalls87864
Node: Customizing Methods89808
Node: Customizing Completion93420
Node: Password handling97630
Ref: Using an authentication file98219
Ref: Caching passwords101372
Node: Connection caching102129
Node: Predefined connection information103346
Node: Remote programs110190
Node: Remote shell setup113929
Node: Ssh setup127407
Node: FUSE setup136947
Ref: Setup of rclone method138169
Ref: Setup of sshfs method138936
Node: Android shell setup139479
Node: Auto-save File Lock and Backup143547
Node: Keeping files encrypted149635
Node: Usage156271
Node: File name syntax158021
Node: Change file name syntax160622
Node: File name completion162437
Ref: File name completion-Footnote-1165682
Node: Ad-hoc multi-hops165859
Node: Home directories168538
Node: Remote processes170883
Ref: Running a debugger on a remote host183161
Ref: Improving performance of asynchronous remote processes192210
Node: Cleanup remote connections195210
Node: Renaming remote files197529
Node: Archive file names203276
Node: Bug Reports209274
Node: Frequently Asked Questions214012
Node: Files directories and localnames250173
Node: Localname deconstruction250631
Node: External packages251279
Node: Traces and Profiles254076
Node: GNU Free Documentation License256158
Node: Function Index281526
Node: Variable Index285188
Node: Concept Index297156

End Tag Table


Local Variables:
coding: utf-8
End:
