\input texinfo   @c -*- mode: texinfo; coding: utf-8 -*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@setfilename ../info/tramp
@c %**start of header
@include docstyle.texi
@c In the Tramp GIT, the version number is auto-frobbed from tramp.el,
@c and the bug report address is auto-frobbed from configure.ac.
@include trampver.texi
@settitle @value{tramp} @value{trampver} User Manual
@c %**end of header

@c This is *so* much nicer :)
@footnotestyle end

@copying
Copyright @copyright{} 1999--2022 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with the Front-Cover Texts being ``A GNU Manual'', and with the
Back-Cover Texts as in (a) below.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify
this GNU manual.''
@end quotation
@end copying

@c Entries for @command{install-info} to use.  We cannot use @value{tramp}.
@dircategory Emacs network features
@direntry
* Tramp: (tramp).            Transparent Remote Access, Multiple Protocol 
                               Emacs remote file access via ssh and scp.
@end direntry

@titlepage
@title @value{tramp} @value{trampver} User Manual
@author by Daniel Pittman
@author based on documentation by Kai Großjohann
@end titlepage

@contents


@node Top, Overview, (dir), (dir)
@top @value{tramp} @value{trampver} User Manual

このファイルは、Emacs 用のリモートファイル編集パッケージである @w{@value{tramp} @value{trampver}}
について説明しています。

@value{tramp} は、 ``Transparent Remote (file) Access, Multiple Protocol''
の略です。
このパッケージは、あたかもローカルファイルであるかのように、リモートファイルを透過的に編集するための簡単で便利な一貫したインターフェイスを提供します。
これは、編集、バージョン管理、 @code{dired} などにまで及びます。

このドキュメントの最新バージョンは、ウェブ上の @uref{@value{trampurl}} で見つけることができます。

@ifhtml
@value{tramp} の最新リリースは @uref{https://ftp.gnu.org/gnu/tramp/, download}
で入手できます。詳細については @ref{@value{tramp} の取得} を参照してください。これには Git サーバーの詳細を含みます。

@value{tramp} は @uref{https://savannah.gnu.org/projects/tramp/, Savannah
Project Page} にもあります。
@end ifhtml

@value{tramp} のメーリングリストは、 @email{@value{tramp-bug-report-address}} で利用でき、
@uref{https://lists.gnu.org/r/tramp-devel/, the @value{tramp} Mail Archive}
でアーカイブされています。 

@page
@insertcopying

@menu
* Overview::                 @value{tramp} が出来る事と 
                               出来無い事。

エンドユーザー向け:



* @value{tramp} の取得::  @value{tramp} の取得方法。
@ifset installchapter
* Installation:: Installing @value{tramp} with your Emacs.
@end ifset
* Quick Start Guide::        Short introduction how to use @value{tramp}.
* Configuration::            Configuring @value{tramp} for use.
* Usage::                    An overview of the operation of @value{tramp}.
* Bug Reports::              Reporting Bugs and Problems.
* Frequently Asked Questions::  Questions and answers from the mailing list.

開発者向け:



* Files directories and localnames::  How file names, directories and 
                                        localnames are mangled and managed.
* Traces and Profiles::      How to Customize Traces.

* GNU Free Documentation License::  The license for this documentation.
* Function Index::           @value{tramp} functions.
* Variable Index::           User options and variables.
* Concept Index::            An item for each concept.

@detailmenu
@c
 --- The Detailed Node Listing ---

@ifset installchapter

Installing @value{tramp} with your Emacs

@end ifset
@ifset installchapter
* System Requirements:: @value{tramp} インストールの前提条件。
@end ifset
@ifset installchapter
* Basic Installation:: Installation steps.
@end ifset
@ifset installchapter
* Installation parameters:: インストールを制御するためのパラメータ。
@end ifset
@ifset installchapter
* Testing:: A test suite for @value{tramp}.
@end ifset
@ifset installchapter
* Load paths:: How to plug-in @value{tramp} into your environment.
@end ifset


Configuring @value{tramp} for use



* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       @acronym{GVFS}-based external methods.
* FUSE-based methods::       @acronym{FUSE}-based external methods.
* Default Method::           Selecting a default method.
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple 
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name 
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related 
                                         information.
* Remote programs::          How @value{tramp} finds and uses programs on 
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               @acronym{FUSE} setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.

Using @value{tramp}



* File name syntax::         @value{tramp} file name conventions.
@ifset unified
* Change file name syntax:: Alternative file name syntax.
@end ifset
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding @file{~} to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.

How file names, directories and localnames are mangled and managed



* Localname deconstruction::  Breaking a localname into its components.
* External packages::        Integration with external Lisp packages.

@end detailmenu
@end menu


@node Overview
@chapter An overview of @value{tramp}
@cindex overview

@value{tramp} は、Emacs内からリモートファイルに透過的にアクセスするためのものです。 @value{tramp}
は、あたかもローカルファイルであるかのように、リモートファイルへの簡単で便利な一貫したインターフェイスを有効にします。 @value{tramp}
の透過性は、編集やバージョン管理や @code{dired} にまで及びます。

@value{tramp} は、@command{ssh} や @command{scp} や @command{telnet} や
それらの関連プログラムなどのような、 あまたのアクセス方式(access method)を使用してリモート・ホストにアクセスできます。
これらのプログラムに @acronym{ASCII} 文字を正常に渡すことができる場合、 @value{tramp} はそれらを使用できます。
@value{tramp} は、 8ビット・クリーンな接続を必要とせず、強制しません。

@value{tramp} の最も一般的なアクセス方式(access method)は、 @command{ssh} によるものです。これは、
@command{ftp} やその他の古いアクセス方式に代わる、より安全な方式です。

MS Windows オペレーティングシステムの @value{tramp} は PuTTY パッケージと統合され、@command{plink}
プログラムを使用します。

@value{tramp} は、ほとんどの場合、接続プログラムを使用してバックグラウンドで透過的に動作します。
これらのプログラムがリモートログインを有効にし、ターミナルを使用できる限り、@value{tramp}
はそれらをシームレスで透過的なアクセスに適応させることができます。

@value{tramp} は、リモートファイルの内容をローカルホストの編集および関連操作のために一時的に転送します。 @value{tramp}
は、標準の Emacsインターフェイスを使用してホスト間でファイルを転送することもできます。これは、Emacs に @value{tramp}
を直接統合する利点です。

@value{tramp} は、 @command{rcp} または @command{scp} または @command{rsync} または (MS
Windows では) @command{pscp} など、リモートファイル用に利用可能な、あまたのホストプログラムを使用してファイルを転送できます。
@value{tramp} は、これらのプログラムを指定し、特定のファイル、ホスト、またはアクセス方式(access
method)に合わせてカスタマイズする簡単な方法を提供します。

小さいサイズのファイル転送を高速化するために、@value{tramp} は @command{mimencode} または
@command{uuencode} を使用して、シェルを介して直接エンコードされた転送をサポートします
(そのようなツールがリモートホストで利用可能である場合)。


@subsubheading @value{tramp} behind the scenes
@cindex behind the scenes
@cindex details of operation
@cindex how it works

@value{tramp} を介してリモートファイルにアクセスするには、一連のアクションが必要であり、その多くはユーザーに対して透過的です。
ただし、一部のアクションではユーザーの応答が必要になる場合があります(パスワードの入力やファイル名の入力など)。
ここでは、関連する手順を説明するために、リモートホストでファイルを開く、ある典型的なシナリオを示します。

@kbd{C-x C-f} でファイル検索を開始し、 @value{tramp} ファイル名の一部を入力してから、 @kbd{@key{TAB}}
を押して完了します。 そのホストに初めて接続する場合は、以下のようになります:

@itemize
@item
@value{tramp} は @samp{telnet @var{host}} または @samp{ssh -l @var{user}
@var{host}} を呼び出し、外部プロセスを確立してリモートホストに接続します。 @value{tramp}
は、リモートホストからの出力も表示する Emacs バッファーを介してプロセスと通信します。

@item
リモートホストは、バッファ内でログイン名((たとえば、 @command{telnet} のために)を要求する場合があります。
一方、ログイン名がファイル名部分に含まれていた場合、@value{tramp} はログイン名に続いて改行(newline)を送信します。

@item
次に、リモートホストはパスワードまたはパスフレーズ (@command{ssh} または @command{telnet} の場合)
を要求する場合があります。 @value{tramp} は、ミニバッファーにパスワードプロンプトを表示しユーザーに入力を促します。 そして
@value{tramp} は、ユーザーから入力された内容をリモートホストに送信し、その後に改行(newline)を続けます。

@item
@value{tramp} は、今や、シェルプロンプト または 失敗したログインメッセージのいずれかを待機しています。

@value{tramp} がタイムアウト期間(たとえば 1 分)以内にメッセージを受信しない場合、@value{tramp}
はリモートシェルプロンプトが見つからないというエラーメッセージで応答します。 リモートホストからのメッセージがある場合、@value{tramp}
はそれらをバッファに表示します。

リモートホストからの @samp{login failed} メッセージに対して、@value{tramp}
はログイン試行を中止(abort)し、ログイン手順を再度開始します。

@item
ログインの成功時、@value{tramp} がリモートホストからのシェルプロンプトを認識した場合、@value{tramp}
は、エコーをオフにし、シェルプロンプトを設定し、その他の雑事を行ってシェル環境を準備します。

@strong{注意} リモートシェルの場合、 @value{tramp} は @command{/bin/sh} を呼び出します。 リモートホストは
@samp{exec /bin/sh} を認識し、適切なシェルを実行する必要があります。 このシェルは、 Bourne
シェル構文をサポートする必要があります。

@item
@value{tramp} は @command{cd} と @command{ls} コマンドを実行して、
リモート・ホストに存在するファイルを見つけます。 @value{tramp} はしばしばグロブ(glob)するために @command{echo}
を使用します。 @value{tramp} は、 ファイルまたはディレクトリが @command{test}
コマンドで書き込み可能かどうかをチェックします。 各コマンド実行後、 @value{tramp}
は次の操作を完了させるためにリモート・ホストからの出力をパースします。

@item
リモート・ファイル名の補完後、 @value{tramp} はファイルの内容をリモート・ホストから転送します。

インライン転送(inline transfers)の場合、 @value{tramp} は @samp{mimencode -b
/path/to/remote/file} などのコマンドを送信し、 出力がバッファに蓄積されるまで待機してから、
その出力をデコードしてファイルの内容を生成します。

外部転送(external transfers)の場合、 @value{tramp} は以下のようにコマンドを送信します:
@example
$ rcp user@@host:/path/to/remote/file /tmp/tramp.4711
@end example
@value{tramp} は ローカルの一時ファイル(the local temporary file) @file{/tmp/tramp.4711}
をバッファに読み込み、 それから一時ファイル(the temporary file)を削除します。

@item
通常どおりバッファの内容を編集、変更、変更し、 @kbd{C-x C-s} でバッファを保存します。

@item
@value{tramp} は、 適切なインライン(inline)または外部(external)プログラムを使用して、
リモート・ホストからの読み込みとは逆のプロセスでバッファの内容をリモート・ホストに転送します。
@end itemize

これで、 @value{tramp} でファイルを開いたときに舞台裏で何が起こっているのか、 基本的な概要を理解していただけたかと思います。


@c For the end user.
@node @value{tramp} の取得
@chapter @value{tramp} の取得
@cindex obtaining @value{tramp}
@cindex GNU ELPA
@vindex tramp-version

@value{tramp} は (@w{Emacs 22.1} 以降) Emacs の一部として含まれています。

@value{tramp} は、 インターネット上の @uref{https://ftp.gnu.org/gnu/tramp/}
からダウンロードできるように自由にパッケージ化されています。 @value{tramp} のバージョン番号は、 変数
@code{tramp-version} で取得できます。 リリースされた @value{tramp} バージョンでは、 バージョン番号は
``2.4.5'' のような 3 つの数字の文字列です。

Emacs にパッケージ化された @value{tramp} リリースは、 対応するスタンドアローン・リリースとは若干異なる場合があります。 これは、
Emacs と @value{tramp} の間でリリース日を常に同期できるとは限らないためです。
そのようなバージョン番号には、``2.4.5.27.2'' のように Emacs のバージョン番号が接尾辞として付きます。 これは、
@w{@value{tramp} 2.4.5} が @w{Emacs 27.2} に統合されたことを意味します。 Emacs にパッケージ化された
@value{tramp} バージョンの完全なリストは以下で得られます。

@vindex customize-package-emacs-version-alist
@lisp
(assoc 'Tramp customize-package-emacs-version-alist)
@end lisp

@value{tramp} は @uref{https://elpa.gnu.org, GNU ELPA} パッケージとしても利用できます。
スタンドアロン・リリースに加えて、 @value{tramp} の次のリリースが現れるまで、 @value{tramp}
のさらなるマイナー・バージョンが GNU ELPA に現れるでしょう。 これらのマイナー・バージョンには、 ``2.4.5.1'' のような 4
つの数字の文字列があります。

@value{tramp} 開発バージョンは Git サーバーで利用できます。 開発バージョンには、 新しい機能や不完全な機能が含まれています。
@value{tramp} の開発バージョンは、 常に次回のリリースのバージョン番号に、 ``2.4.4-pre'' のように接尾辞 ``-pre''
を加えたものです。

Git サーバーから @value{tramp} を取得する 1 つの方法は、 以下の URL の Savannah プロジェクト・ページにアクセスし、
上部のナビゲーション・バーにある Git リンクをクリックすることです。

@noindent
@uref{https://savannah.gnu.org/projects/tramp/}

@noindent
別の方法として、以下のようにターミナルに打ち込みます:

@example
@group
$ cd ~/emacs
$ git clone git://git.savannah.gnu.org/tramp.git
@end group
@end example

@noindent
プロキシ経由で取得する:

@example
@group
$ git config --global http.proxy http://user:pwd@@proxy.server.com:8080
$ git clone https://git.savannah.gnu.org/r/tramp.git
@end group
@end example

@noindent
@value{tramp} 開発者の場合:

@example
$ git clone login@@git.sv.gnu.org:/srv/git/tramp.git
@end example

@noindent
上記のいずれかの実行後、 @file{~/emacs/tramp} には @value{tramp} の最新バージョンが含まれています。

@noindent
リポジトリから更新を取得するには、 @code{git pull} を使用します。

@example
@group
$ cd ~/emacs/tramp
$ git pull
@end group
@end example

@noindent
以下のように @command{autoconf} を実行して、 最新の @file{configure} スクリプトを生成します:

@example
@group
$ cd ~/emacs/tramp
$ autoconf
@end group
@end example

@ifset installchapter
@c Installation chapter is necessary only in case of standalone
@c installation.
@include trampinst.texi
@end ifset
@ifclear installchapter
@value{tramp} のインストール方法の詳細については、 そのディレクトリにあるファイル @file{INSTALL} を参照してください。
@end ifclear


@node Quick Start Guide
@chapter Short introduction how to use @value{tramp}
@cindex quick start guide

@value{tramp} は、 リモート・コンポーネントを追加することにより、 Emacs ファイル名の構文を拡張します。 リモート・ファイル名は常に
@file{@trampfn{method,user@@host,/path/to/file}} のようになります。

リモートファイルは、通常のファイルとまったく同じように使用できます。つまり、 @kbd{C-x C-f
@trampfn{method,user@@host,/path/to/file} @key{RET}}
でファイルまたはディレクトリを開き、ファイルを編集して保存することができます。 @code{copy-file} や
@code{rename-file} のように、 2 つの引数を使用してファイル操作でローカル・ファイルとリモート・ファイルを混在させることもできます。
最後に、 プロセスを呼び出すバッファにリモートの @code{default-directory} がある場合、
リモート・ホストでプロセスを実行することもできます。


@anchor{Quick Start Guide File name syntax}
@section File name syntax
@cindex file name syntax

リモート・ファイル名には、 @code{method} 部分と @code{user} 部分と @code{host} 部分が先頭に追加されます。
それらのすべてとローカル・ファイル名の部分はオプションです。 欠落している部分がある場合は、 デフォルト値が想定されます。
空のローカル・ファイル名部分のデフォルト値は、 リモート・ユーザーのホーム・ディレクトリです。 したがって、 最短のリモート・ファイル名は
@file{@trampfn{-,,}} です。 デフォルトの方式の @samp{-} 記法は、 構文上の理由により @ref{Default
Method} として使用されます。

@code{method} 部分は、リモート・ホストに到達するために使用される接続方式(connection method)を記述します。 後述します。

@code{user} の部分は、 リモート・ホストにアクセスするためのユーザー名です。 @option{smb} 方式の場合、
ドメイン名も必要になることがあり、 その際は @code{user%domain} と記述されます。

@code{host} の部分は、 あなたのローカル・ホストで解決できるホスト名でなければなりません。 短いホスト名、 完全修飾ドメイン名、 IPv4
または IPv6 アドレス、 @ref{File name syntax} のいずれかです。 一部の接続方式(connection method)では、
使用するポートの表記もサポートされており、 その場合は @code{host#port} と記述されます。


@anchor{Quick Start Guide ssh and plink methods}
@section Using @option{ssh} and @option{plink}
@cindex method @option{ssh}
@cindex @option{ssh} method
@cindex method @option{plink}
@cindex @option{plink} method

あなたのローカル・ホストが SSH クライアントを実行し、 リモート・ホストが SSH サーバーを実行している場合、 最も単純なリモート・ファイル名は
@file{@trampfn{ssh,user@@host,/path/to/file}} です。 リモート・ファイル名
@file{@trampfn{ssh,,}} は、 ローカル・ホスト上の自分自身へのリモート接続を開き、 @value{tramp}
のテストによく使用されます。

MS Windows では、 PuTTY が SSH クライアントとしてよく使用されます。 その @command{plink} 方式を使用して、
@command{ssh} サーバーを実行しているリモート・ホストへの接続を開くことができます:
@file{@trampfn{plink,user@@host,/path/to/file}}


@anchor{Quick Start Guide su, sudo, doas and sg methods}
@section Using @option{su}, @option{sudo}, @option{doas} and @option{sg}
@cindex method @option{su}
@cindex @option{su} method
@cindex method @option{sudo}
@cindex @option{sudo} method
@cindex method @option{doas}
@cindex @option{doas} method
@cindex method @option{sg}
@cindex @option{sg} method

しばしば異なる権限(different permissions)であなたのローカル・ホストを操作する必要があります。 これには、 @option{su}
または @option{sudo} 接続方式(connection method)を使用できます。 OpenBSD システムでは、
@option{doas} 接続方式が同じ機能を提供します。 これらの方式(method)は、 @samp{root}
をデフォルトのユーザー名として使用し、 @code{(system-name)} の戻り値をデフォルトのホスト名として使用します。 したがって、
@file{@trampfn{sudo,,/path/to/file}} としてファイルを開くと便利です。

@option{sg} 方式は ``switch group'' を意味します。 ここでは、 ユーザー名が変更先のグループとして使用されます。
デフォルトのホスト名は同一です。


@anchor{Quick Start Guide Combining ssh, plink, su, sudo and doas methods}
@section @option{ssh} または @option{plink} を、 @option{su} または @option{sudo} または @option{doas} と組み合わせる
@cindex method @option{ssh}
@cindex @option{ssh} method
@cindex method @option{plink}
@cindex @option{plink} method
@cindex method @option{su}
@cindex @option{su} method
@cindex method @option{sudo}
@cindex @option{sudo} method
@cindex method @option{doas}
@cindex @option{doas} method

@option{su} オプションまたは @option{sudo} オプションまたは @option{doas}
オプションを別のホストで実行する必要がある場合は、 先行する @option{ssh} オプションまたは @option{plink}
オプションと組み合わせることができます。 つまり、 @value{tramp}
は最初に管理者以外の資格情報(credentials)を使用して他のホストに接続し、 その後、そのホストの管理者資格情報に変更します。
単純なケースでは、 構文は
@file{@trampfn{ssh@value{postfixhop}user@@host|sudo,,/path/to/file}}
のようになります。 @xref{Ad-hoc multi-hops}


@anchor{Quick Start Guide sudoedit method}
@section Using @command{sudoedit}
@cindex method @option{sudoedit}
@cindex @option{sudoedit} method

@option{sudoedit} 方式は @option{sudo} 方式に似ています。 ただし、 実装が異なります。
バックグラウンドで開いているセッションを実行し続けるわけではありません。 これはセキュリティ上の理由によるもので、 裏側では、 この方式は
@option{sudo} 方式よりもパフォーマンスが悪く、@samp{localhost} のみに制限されており、
外部プロセスをサポートしていません。


@anchor{Quick Start Guide smb method}
@section Using @command{smbclient}
@cindex method @option{smb}
@cindex @option{smb} method
@cindex ms windows (with @option{smb} method)
@cindex @command{smbclient}

リモートの MS Windows ホストまたは Samba サーバーにアクセスするには、 @command{smbclient}
クライアントが使用されます。 リモート・ファイル名の構文は
@file{@trampfn{smb,user%domain@@host,/path/to/file}} です。 ローカル・ファイル名の最初の部分は、
リモート・ホストによってエクスポートされた共有 (この例では @samp{path}) です。


@anchor{Quick Start Guide GVFS-based methods}
@section Using @acronym{GVFS}-based methods
@cindex methods, gvfs
@cindex gvfs-based methods
@cindex method @option{sftp}
@cindex @option{sftp} method
@cindex method @option{afp}
@cindex @option{afp} method
@cindex method @option{dav}
@cindex method @option{davs}
@cindex @option{dav} method
@cindex @option{davs} method
@cindex method @option{mtp}
@cindex @option{mtp} method

@acronym{GVFS, the GNOME Virtual File System} がインストールされているシステムでは、
GVFSで提供されている方式を @value{tramp} で使用できます。 例えば、
@file{@trampfn{sftp,user@@host,/path/to/file}} や、
@file{@trampfn{afp,user@@host,/path/to/file}} (Apple の AFP ファイルシステムにアクセス)や、
@file{@trampfn{dav,user@@host,/path/to/file}} や、
@file{@trampfn{davs,user@@host,/path/to/file}} (WebDAV 共有用) や、
@file{@trampfn{mtp,device,/path/to/file}} (メディアデバイス用) です。


@anchor{Quick Start Guide GNOME Online Accounts based methods}
@section Using @acronym{GNOME} Online Accounts based methods
@cindex @acronym{GNOME} Online Accounts
@cindex method @option{gdrive}
@cindex @option{gdrive} method
@cindex google drive
@cindex method @option{nextcloud}
@cindex @option{nextcloud} method
@cindex nextcloud

@acronym{GVFS}ベースの方式には、 @option{Files} サービスをサポートする @acronym{GNOME}
オンライン・アカウントも含まれます。 これらは、 Google ドライブ・ファイル・システムと、OwnCloud/NextCloud ファイル
システムです。 ここでのファイル名の構文は、 OwnCloud/NextCloud ファイルの場合は常に
@file{@trampfn{gdrive,john.doe@@gmail.com,/path/to/file}}
(@samp{john.doe@@gmail.com} は Google ドライブ・アカウントを表します) または
@file{@trampfn{nextcloud,user@@host#8081,/path/to/file}} (@samp{8081}
はポート番号を表します) です。


@anchor{Quick Start Guide FUSE-based methods}
@section Using @acronym{FUSE}-based methods
@cindex methods, fuse
@cindex fuse-based methods
@cindex method @option{rclone}
@cindex @option{rclone} method
@cindex method @option{sshfs}
@cindex @option{sshfs} method

@acronym{FUSE, Filesystem in Userspace} は、 ユーザーが仮想ファイル・システムをマウントできるようにします。
@acronym{GVFS} によって内部的にも使用されますが、 ここでは @acronym{GVFS} API
を使用しない方式(method)について説明します。

システム・ストレージにアクセスする便利な方法は @command{rclone} プログラムです。 @command{rclone} で
@samp{storage} という名前でストレージを構成した場合、 (たとえば、) リモート・ファイル名の構文
@file{@trampfn{rclone,storage,/path/to/file}} を介してアクセスできます。 ユーザー名は必要ありません。

@command{sftp} に基づいてファイル・システムをマウントするための @command{sshfs}
クライアントをインストールしたローカル・ホストでは、 この方式(method)を使用できます。 すべてのリモート・ファイルは、
ローカル・マウント・ポイント経由で利用できます。 @value{tramp} は、 ファイル・システムがまだマウントされていない場合にマウントを支援し、
通常のファイル名構文 @file{@trampfn{sshfs,user@@host,/path/to/file}} によるアクセスをサポートします。


@anchor{Quick Start Guide Android}
@section Using Android
@cindex method @option{adb}
@cindex @option{adb} method
@cindex android

USB 経由でローカル ホストに接続されている Android デバイスには、 @command{adb} コマンド経由でアクセスできます。
ユーザー名またはホスト名は必要ありません。 ファイル名の構文は @file{@trampfn{adb,,/path/to/file}} です。


@node Configuration
@chapter Configuring @value{tramp}
@cindex configuration
@cindex default configuration

@value{tramp} は、 最初は @command{scp} プログラムを使用してリモート・ホストに接続するように設定されています。
@kbd{C-x C-f} と入力してから、 ファイル名 @file{@trampfn{scp,user@@host,/path/to/file}}
を入力します。 詳細については、 @xref{Default Method}, @xref{Default User}, @xref{Default
Host} を参照してください。

リモート・シェルの動作に関する問題については @xref{Remote shell setup} を参照してください。

接続タイプとファイル・アクセス方式(method)をデフォルトから他のいくつかのオプションのいずれかに変更する場合 @xref{Connection
types} を参照してください。

@strong{注意} これらの例で説明されている一部のユーザー・オプションは、 Emacs によって自動ロードされません。 すべての例は
@value{tramp} をインストールしてロードする必要があります:

@lisp
(customize-set-variable 'tramp-verbose 6 "Enable remote command traces")
@end lisp

@value{tramp} の設定に使用される関数については、 以下の句をあなたの init ファイルで使用できます:

@lisp
(with-eval-after-load 'tramp (tramp-change-syntax 'simplified))
@end lisp

@vindex enable-remote-dir-locals
@code{enable-remote-dir-locals} を non-@code{nil}に設定して、
リモート・ディレクトリのディレクトリ・ローカル変数を介して他の変数を変更できるようにする必要があります。 @xref{Directory
Variables, , , emacs} 参照。


@menu
* Connection types::         Types of connections to remote hosts.
* Inline methods::           Inline methods.
* External methods::         External methods.
* GVFS-based methods::       @acronym{GVFS}-based external methods.
* FUSE-based methods::       @acronym{FUSE}-based external methods.
* Default Method::           デフォルトの手段(method)を選択します。 
                               ここでは、 
                               どの手段が自分に適しているかあまり理解できていない人を支援しようとしています。
* Default User::             Selecting a default user.
* Default Host::             Selecting a default host.
* Multi-hops::               Connecting to a remote host using multiple 
                               hops.
* Firewalls::                Passing firewalls.
* Customizing Methods::      Using Non-Standard Methods.
* Customizing Completion::   Selecting config files for user/host name 
                               completion.
* Password handling::        Reusing passwords for several connections.
* Connection caching::       Reusing connection related information.
* Predefined connection information::  Setting own connection related 
                                         information.
* Remote programs::          How @value{tramp} finds and uses programs on 
                               the remote host.
* Remote shell setup::       Remote shell setup hints.
* Ssh setup::                Ssh setup hints.
* FUSE setup::               @acronym{FUSE} setup hints.
* Android shell setup::      Android shell setup hints.
* Auto-save File Lock and Backup::  Auto-save, File Lock and Backup.
* Keeping files encrypted::  Protect remote files by encryption.
@end menu


@node Connection types
@section Types of connections to remote hosts
@cindex connection types, overview

インライン方式(@dfn{Inline method}) と 外部方式(@dfn{external method}) はアクセス方式(method)の
2 つの基本的なタイプです。 どちらも @command{rsh} または @command{ssh} または @command{telnet}
などの同じリモート・シェル・アクセス・プログラムを使用しますが、 ファイル・アクセス方法が異なります。
ファイルの編集または、大きなファイルの転送または、多数のファイルの操作、 では、 適切な方法を選択することが重要になります。

一般に、 外部方式(the external methods)のパフォーマンスは、 少なくとも大きなファイルの場合、 インライン方式(the
inline methods)のパフォーマンスよりも優れています。 これは、
インライン転送時にはデータをエンコードおよびデコードする必要があるためです。

この規則の唯一の例外は、 @option{scp} ベースのアクセス方式(method)です。 これらの方式では、
実際にファイルを転送するときのパフォーマンスは向上しますが、起動時の暗号化ネゴシエーションのオーバーヘッドにより、ファイル転送時間の改善がかき消される可能性があります。

外部方式(external methods)は、 (@command{ssh-agent}
など、)パスワードを必要としない方法で構成する必要があります。 最新の @command{scp} 実装では、 既存の @command{ssh}
接続を再利用するオプションを提供します。 これは、 利用可能であれば @value{tramp} がデフォルトで有効にします。 それが不可能な場合は、
@ref{Password handling} を考慮する必要があり、 考慮しないと、
コピー操作ごとにパスワードの入力を求めるプロンプトが表示されます。


@node Inline methods
@section Inline methods
@cindex inline methods
@cindex methods, inline

インライン方式(inline methods)は、 同じログイン接続を使用してファイル・コンテンツを転送します。 インライン方式は、
小さなファイルに対してすばやく簡単に使用できます。
これらは、リモート・ホストで適切なエンコード・プログラムとデコード・プログラムが利用できるかどうかに依存します。 ローカルの送信元と送信先の場合、
@value{tramp} は、 そのようなプログラムと同等の Emacs の組み込みのプログラムを使用できます。

インライン方式(inline method)は、 外部転送プログラムが利用できない状況で機能します。 インライン方式は、 同じホスト上の異なる
@emph{ユーザーID} 間でファイルを転送する場合にも機能します。

@cindex base-64 encoding
@cindex base-64 encoding
@cindex uu encoding
@vindex tramp-remote-coding-commands
@value{tramp} は、 @code{tramp-remote-coding-commands} で定義されたコマンドの 1
つが使用可能であるか、 リモート・ホストをチェックします。 @value{tramp} は、
最初に見つけた信頼できる(reliable)コマンドを使用します。 @value{tramp} の検索パスはカスタマイズできます。
@ref{Remote programs} を参照してください。

どのコマンドも使用できない場合、 @value{tramp} は最初に小さな Perl プログラムをリモート ホストに転送し、
次にそのプログラムをエンコードとデコードに使用しようとします。

@vindex tramp-inline-compress-start-size
@vindex tramp-inline-compress-commands
大きなテキスト・ファイルの転送速度を上げるために、 @value{tramp} はエンコードの前に圧縮を使用できます。  ユーザー・オプション
@code{tramp-inline-compress-start-size} は、この最適化を使用するファイル・サイズを指定します。 この機能は、
@code{tramp-inline-compress-commands} で定義されたコマンドの 1 つの可用性と使いやすさに依存します。

@table @asis
@item @option{rsh}
@cindex method @option{rsh}
@cindex @option{rsh} method

@command{rsh} は他の方式ほど安全ではないため、 ローカル・ネットワーク内のホストに接続するためのオプションです。
@command{ssh} が完全な代替品であり、至るところで使えるので、 @command{rsh} を使用する理由はありません。

@item @option{ssh}
@cindex method @option{ssh}
@cindex @option{ssh} method

@command{ssh} は、リモート・ホストに接続するための他のオプションよりも安全なオプションです。

@command{ssh} は、 追加のパラメーターをポート番号として受け取ることもできます。 たとえば、 ポート番号 42 のホストは
@file{host#42} (実際のホスト名、ハッシュ記号、ポート番号) として指定されます。 これは @samp{-p 42} を
@command{ssh} コマンドに渡すのと同一です。

@item @option{telnet}
@cindex method @option{telnet}
@cindex @option{telnet} method

@command{telnet} によるリモート・ホストへの接続は、@option{rsh} 方式と同じくらい危なっかしい(insecure)です。

@item @option{su}
@cindex method @option{su}
@cindex @option{su} method

リモート・ホストに接続する代わりに、 @command{su} プログラムを使用すると、 別のユーザーとして編集できます。 ホストは、
@samp{localhost} または関数 @command{(system-name)} によって返されるホストのいずれかです。
この動作の例外については @ref{Multi-hops} を参照してください。

@item @option{sudo}
@cindex method @option{sudo}
@cindex @option{sudo} method

@option{su} 方式と同様に、 @option{sudo} は @command{sudo} を使用します。 @command{sudo}
には、シェルを開始するための十分な権限が必要です。

セキュリティ上の理由から、 @option{sudo} 接続は、 定義済みのタイムアウト (デフォルトでは 5 分) が経過すると無効になります。
これは変更できます。 @ref{Predefined connection information} を参照してください。

@item @option{doas}
@cindex method @option{doas}
@cindex @option{doas} method

この方式は、 @command{sudo} コマンドのように OpenBSD で使用されます。 @option{sudo}
方式と同様に、@option{doas} 接続は事前定義されたタイムアウト後に無効になります。

@item @option{sg}
@cindex method @option{sg}
@cindex @option{sg} method

@command{sg} プログラムは、 別のグループとして編集できます。 ホストは、@samp{localhost} または関数
@command{(system-name)} によって返されるホストのいずれかです。 ユーザー名を指定する必要がありますが、
これはグループ名を示しています。 この動作の例外については、 @ref{Multi-hops} を参照してください。

@item @option{sshx}
@cindex method @option{sshx}
@cindex @option{sshx} method

@option{ssh} のように動作しますが、 追加の認証プロンプトはありません。 @option{sshx} は @samp{ssh -t -t
-l @var{user} -o RemoteCommand='/bin/sh -i' @var{host}}
を使用して「標準のログイン・シェル」(``standard'' login shell)との接続を開きます。 リモート・ログイン・シェル
@command{/bin/sh} の変更をサポートしています。

@strong{注意} @option{sshx} は認証の質問をバイパスしないことに注意してください。
たとえば、リモート・ホストのホスト・キーが不明な場合でも、 @option{sshx} は引き続き ``Are you sure you want to
continue connecting?''(接続を続行しますか?)と尋ねます。 @value{tramp} はそのような質問を処理できません。
そのような質問なしでログインを続行できる接続をセットアップする必要があります。

@option{sshx} は、@command{ssh} が疑似 tty の割り当てに関するエラーを引き起こす場合に、 MS Windows
ユーザーにとって役立ちます。 これはシェル・プロンプトを見つけられないために @value{tramp} が混乱することで発生します。

@option{sshx} は @samp{-p} 引数をサポートします。

@item @option{krlogin}
@cindex method @option{krlogin}
@cindex @option{krlogin} method
@cindex kerberos (with @option{krlogin} method)

この方式は @option{ssh} にも似ています。 @command{krlogin -x} コマンドは、
リモート・ホスト・ログインにのみ使用されます。

@item @option{ksu}
@cindex method @option{ksu}
@cindex @option{ksu} method
@cindex kerberos (with @option{ksu} method)

これは、 Kerberos スイート用の別の方式です。 @option{su} のように振る舞います。

@item @option{plink}
@cindex method @option{plink}
@cindex @option{plink} method

@option{plink} 方式は、 SSH@ の PuTTY 実装を使用する MS Windows ユーザー向けです。 @samp{plink
-ssh} を使用してリモート・ホストにログインします。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

@option{plink} 方式は @samp{-P} 引数をサポートします。

@item @option{plinkx}
@cindex method @option{plinkx}
@cindex @option{plinkx} method

ホスト名の代わりにセッション名を使用して、 MS Windows で PuTTY を使用する別の方式。 @option{plinkx} は
@samp{plink -load @var{session} -t} を呼び出します。 ユーザー名とポート番号は、
セッションで定義する必要があります。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

@end table


@node External methods
@section External methods
@cindex methods, external
@cindex external methods

外部方式(external
methods)は、ファイル転送を外部転送プログラムに委譲しながら、一部のアクションにリモート・シェル接続を使用して、複数チャネルで動作します。

外部方式(external methods)は、 インライン方式(inline methods)でのエンコードとデコードのオーバーヘッドを節約します。

外部方式(external methods)には新しいチャンネルを開くオーバーヘッドがあるため、
@code{tramp-copy-size-limit} より小さいファイルは引き続きインライン方式(inline methods)を使用します。

@table @asis
@item @option{rcp}
@cindex method @option{rcp}
@cindex @option{rcp} method
@cindex @command{rsh} (with @option{rcp} method)

この方式は、 @command{rsh} および @command{rcp} コマンドを使用してリモート・ホストに接続し、 ファイルを転送します。
これは利用可能な最速のアクセス方法です。

代替方式の @option{remcp} は @command{remsh} と @command{rcp} コマンドを使用します。

@item @option{scp}
@cindex method @option{scp}
@cindex @option{scp} method
@cindex @command{ssh} (with @option{scp} method)

接続に @command{ssh} 、 転送に @command{scp} を組み合わせて使用するのが最も安全です。 パフォーマンスは良好ですが、
小さいファイルでのインライン方式よりも遅くなります。 インライン方式でのエンコードとデコードのオーバーヘッドはありませんが、 @command{scp}
の暗号化ハンドシェイクはこれらの速度向上を打ち消します。

@option{ssh} ベースの方式は、 ポート番号を指定するための @samp{-p} 機能をサポートしています。 たとえば、
@file{host#42} は、 引数 @samp{-p 42} を @command{ssh} に渡し、 かつ、 引数 @samp{-P 42} を
@command{scp} に渡します。

@item @option{rsync}
@cindex method @option{rsync}
@cindex @option{rsync} method
@cindex @command{ssh} (with @option{rsync} method)

接続のための @command{ssh} コマンドと、 転送のための @command{rsync} コマンドの組み合わせは、 @option{scp}
方式と似ています。

両方のホストに存在するファイル達を転送する場合、 @command{rsync} は @command{scp}
よりもはるかに優れたパフォーマンスを発揮します。 ただし、 ファイルが接続の片側にのみ存在する場合、 この利点は失われます。

この方式は @samp{-p} 引数をサポートしています。

@item @option{scpx}
@cindex method @option{scpx}
@cindex @option{scpx} method
@cindex @command{ssh} (with @option{scpx} method)

@option{scpx} は、 ログイン・シェルの質問を避けるのに役立ちます。 パフォーマンスは @option{scp} に似ています。
@option{scpx} は @samp{ssh -t -t -l @var{user} -o RemoteCommand='/bin/sh -i'
@var{host}} を使用して接続を開きます。 リモート・ログイン・シェル @command{/bin/sh} の変更をサポートしています。

@option{scpx} は、 @command{ssh} が疑似 tty の割り当てに関するエラーを引き起こす場合に、 MS Windows
ユーザーにとって役立ちます。 これはシェル・プロンプトを見つけられないために @value{tramp} が混乱することで発生します。

この方式は @samp{-p} 引数をサポートしています。

@item @option{pscp}
@item @option{psftp}
@cindex method @option{pscp}
@cindex @option{pscp} method
@cindex @command{plink} (with @option{pscp} method)
@cindex @command{putty} (with @option{pscp} method)
@cindex method @option{psftp}
@cindex @option{psftp} method
@cindex @command{plink} (with @option{psftp} method)
@cindex @command{putty} (with @option{psftp} method)

これらの方式は @option{scp} または @option{sftp} に似ていますが、 @command{plink}
コマンドを使用してリモート・ホストに接続し、 @command{pscp} または @command{psftp} を使用してファイル転送します。
これらのプログラムは、 MS Windows の SSH 実装である PuTTY の一部です。

リモート・グイン・シェル @command{/bin/sh} の変更をサポートしています。

当該セッションの @samp{Share SSH connections if possible}(可能であれば SSH 接続を共有する)
制御を確認します。

これらの方式は @samp{-P} 引数をサポートしています。

@item @option{fcp}
@cindex method @option{fcp}
@cindex @option{fcp} method
@cindex @command{fsh} (with @option{fcp} method)

この方式は @option{scp} に似ていますが、 @command{fsh} を使用して接続し、 @command{fcp}
を使用してファイルを転送します。 @command{ssh} のフロントエンドである @command{fsh/fcp} は、
いくつかのコマンドを送信して @command{ssh} セッションを再利用します。 これにより、@command{scp}
の安全な接続による起動時のオーバーヘッドが回避されます。 インライン方式(inline methods)でも同様の利点があります。

この接続に使用されるコマンドは  @samp{fsh @var{host} -l @var{user} /bin/sh -i} です。

@cindex method @option{fsh}
@cindex @option{fsh} method

@option{fsh} が提供する多重化(multiplexing)は @value{tramp} では役に立たないため、 @option{fsh}
にはインライン方式(inline method)はありません。 @command{fsh} はリモート・ホストに接続し、 @value{tramp}
はその 1 つの接続を開いたままにします。

@item @option{nc}
@cindex method @option{nc}
@cindex @option{nc} method
@cindex @command{telnet} (with @option{nc} method)

@command{telnet} を使用して接続し、 @command{nc} を使用してファイルを転送することは、 ルーターまたは NAS
ホストへのアクセスに適した唯一の組み合わせである場合があります。 @command{busybox} や、 @command{telnet}
以外のエンコード・プログラムやデコード・プログラムをホストしていないなど、これらのダム(dumb)・デバイスではローカル・シェルが厳しく制限されています。

@item @option{sudoedit}
@cindex method @option{sudoedit}
@cindex @option{sudoedit} method

@option{sudoedit} 方式を使用すると、 ローカル・ホストで別のユーザーとしてファイルを編集できます。 これは @value{tramp}
による @command{sudoedit} の実装と見なすことができます。  @option{sudo} 方式とは対照的に、
すべてのマジック・ファイル名関数(all magic file name functions)は、単一の @command{sudo @dots{}}
コマンドによって実装されます。 その目的は、 そのようなファイルの編集を可能な限り安全にすることです。 Emacs
のバックグラウンドで実行されているセッションが Emacs の内部から攻撃される可能性があってはなりません。

ゆえに、 外部プロセス(external processes)は実装されません。

このようなリモート・ファイル名のホスト名は、 ローカル・ホストを表す必要があります。 デフォルト値がすでに適切なので、
@file{@trampfn{sudoedit,,/path/to/file}} や
@file{@trampfn{sudoedit,user@@,/path/to/file}} のように、
リモート・ファイル名にホスト名を使用しないことをお勧めします。

@option{sudo} 方式と同様に、 @option{sudoedit} パスワードは事前定義されたタイムアウト後に期限切れになります。

@item @option{ftp}
@cindex method @option{ftp}
@cindex @option{ftp} method

@value{tramp} が @option{ftp} を使用すると、 リクエストは Ange FTP@ で指定された任意の ftp
プログラムに転送されます。 この外部プログラムは、@value{tramp} からのリクエストを処理できる必要があります。

@item @option{smb}
@cindex method @option{smb}
@cindex @option{smb} method
@cindex ms windows (with @option{smb} method)
@cindex @command{smbclient}

この非ネイティブの @value{tramp} 方式は、 Server Message Block (SMB) ネットワーク・プロトコルを介して、
通常は @uref{https://www.samba.org/,,Samba} または MS Windows に基づく、
ファイル・サーバーを実行しているホストに接続します。

@command{smbclient} を使用するには、@value{tramp} を操作するときにいくつか調整(tweaks)が必要です:

ローカルネーム(localname) の最初のディレクトリ(first directory)は、 リモート・ホスト上の共有名である必要があります。

一部の SMB 共有名は @code{$} 文字で終わるため、 環境変数の置換を避けるために、 これらの共有を指定する際に @value{tramp}
は @code{$$} を使用する必要があります。

@value{tramp} が共有名を指定していないか、 または一般的なリモート・ディレクトリ @file{/} を使用している場合、
@command{smbclient} は利用可能なすべての共有を返します。

SMB 認証は 各 SMB 共有に基づいているため、 同じ SMB ホスト上の別の共有にアクセスする場合でも、 @value{tramp}
はパスワードの入力を求めます。 このプロンプトは、 @ref{Password handling} によって抑制できます。

MS Windows 認証で必要な ユーザー名/ドメイン名 構文に対応するために、 @value{tramp} は @code{user%domain}
形式の拡張構文を提供します (@code{user} はユーザー名、@code{%} はパーセント記号、@code{domain} は MS
Windows ドメイン名です)。 例:

@example
@trampfn{smb,daniel%BIZARRE@@melancholia,/daniel$$/.emacs}
@end example

ここで、 ユーザー @code{daniel} はドメイン・ユーザーとして MS Windows ドメイン @code{BIZARRE} の SMB
ホスト @code{melancholia} に接続し、 ホーム・ディレクトリ(共有 @code{daniel$})にある @file{.emacs}
を編集します。

または、(ドメイン・ユーザーではなく) ローカル WINS ユーザーの場合は、 逝かに示すように、
ドメイン名を大文字のローカル・ホストの名前に置き換えます:

@example
@trampfn{smb,daniel%MELANCHOLIA@@melancholia,/daniel$$/.emacs}
@end example

ここで、 ユーザー @code{daniel} はローカル・ユーザーとしてローカル・ドメイン @code{MELANCHOLIA} の SMB ホスト
@code{melancholia} に接続し、 ホーム・ディレクトリ(共有 @code{daniel$})にある @file{.emacs}
を編集します。

@command{smbclient} 認証では、 ドメイン名とユーザー名はオプションです。
ユーザー名が指定されていない場合、@command{smbclient}
は匿名(anonymous)ユーザーを使用します(パスワードのプロンプトは表示されません)。 この動作は、 ローカル・ユーザー名で代用される他の
@value{tramp} 方式とは異なります。

Emacs が MS Windows のローカル・ユーザー認証コンテキストで実行されている場合、 @option{smb} 方式は使用できません。
ただし、 そのようなユーザーは、 @value{tramp} の代わりに UNC ファイル名を使用してリモート・ファイルにアクセスできます。

@example
//melancholia/daniel$$/.emacs
@end example

UNC ファイル名の指定では、 @command{smbclient} のように認証用に別のユーザー名を指定することはできません。

@item @option{adb}
@cindex method @option{adb}
@cindex @option{adb} method
@cindex android (with @option{adb} method)

@vindex tramp-adb-program
@vindex PATH@r{, environment variable}
この方式では、 Android Debug Bridge プログラムを使用して Android デバイスにアクセスします。  @value{tramp}
を機能させるには、 Android Debug Bridge をローカルにインストールする必要があります。 一部の GNU/Linux
ディストリビューションでは、 インストール・パッケージとして Android Debug Bridge が提供されています。 または、プログラムは
Android SDK@ の一部としてインストールされます。 @value{tramp} は、 @env{PATH} 環境変数、またはユーザーオプション
@code{tramp-adb-program} で設定された絶対パスを介して、 @command{adb} プログラムを探します。

@vindex tramp-adb-connect-if-not-connected
@value{tramp} は、 ユーザー・オプション @code{tramp-adb-connect-if-not-connected} が
@code{nil} でない場合にのみ、@option{adb} を使用して Android デバイスに接続します。 それ以外の場合、 接続は
Emacs の外部で確立する必要があります。

@value{tramp} は、 単一の Android デバイスが @command{adb} に接続されている場合、
リモート・ファイル名のホスト名部分を必要としません。 @value{tramp} は、 代わりに @file{@trampfn{adb,,}}
をデフォルト名として使用します。 @command{adb devices} を Emacs 外のシェルで実行すると、
利用可能なホスト名が表示されます。

@option{adb} 方式は、 @command{adbd} プロセスで実行されるため、 通常、 Android
デバイスでの認証にユーザー名は必要ありません。 ただし、 ユーザー名が指定されている場合、 @value{tramp} は構文で
@command{su} を適用します。 特に root 化されていない Android デバイス(un-rooted Android
devices)で認証が成功しない場合、 @value{tramp} はログイン・エラーを表示します。

TCP/IP 経由で接続された Android デバイスの場合、 @file{device#42} ホスト名構文を使用してポート番号を指定するか、
@value{tramp} で @command{adb} コマンドで宣言されているデフォルト値を使用できます。 ポート番号は USB@
経由で接続された Android デバイスには適用されません。

@end table


@node GVFS-based methods
@section @acronym{GVFS}-based external methods
@cindex methods, gvfs
@cindex gvfs-based methods
@cindex dbus

@acronym{GVFS} は @acronym{GNOME}
デスクトップの仮想ファイル・システムです(@uref{https://en.wikipedia.org/wiki/GVFS})。
@acronym{GVFS} 上のリモート・ファイルは @acronym{FUSE} を介してローカルにマウントされ、 @value{tramp}
はこのローカルにマウントされたディレクトリを内部的に使用します。

Emacs は D-Bus メカニズムを使用して @acronym{GVFS}@ と通信します。 Emacs では、 メッセージ・バス・システム、
D-Bus 統合がアクティブになっている必要があります。 @pxref{Top, , D-Bus, dbus}

@table @asis
@item @option{afp}
@cindex method @option{afp}
@cindex @option{afp} method

この方式は、 Apple Filing Protocol を使用してリモート・ホストに接続し、 macOS
ボリューム上のファイルにアクセスするためのものです。 @value{tramp} アクセス構文では、 先頭のボリューム(共有)名が必要です。 例:
@file{@trampfn{afp,user@@host,/volume}}

@item @option{dav}
@item @option{davs}
@cindex method @option{dav}
@cindex method @option{davs}
@cindex @option{dav} method
@cindex @option{davs} method

@option{dav} 方式は、 HTTP@ などの標準プロトコルに基づいて、 WebDAV ファイルおよびディレクトリへのアクセスを提供します。
@option{davs} も同じことを行いますが、 SSL 暗号化を使用します。 どちらの方式もポート番号指定をサポートしています。

@acronym{GVFS} によってマウントされる WebDAV ボリュームの一部であるパスは、 OwnCloud や NextCloud
ファイル名の方が一般的であるため、 これらの方式ではサポートされていません。 それらの処理については @option{nextcloud}
方式を参照してください。

@item @option{gdrive}
@cindex @acronym{GNOME} Online Accounts
@cindex method @option{gdrive}
@cindex @option{gdrive} method
@cindex google drive

@option{gdrive} メソッドを介して、 Google ドライブのオンライン・ストレージにアクセスできます。
リモート・ファイル名のユーザー名とホスト名は、 @file{@trampfn{gdrive,john.doe@@gmail.com,/}} のような
Google ドライブ資格情報のメール・アドレスです。 これらの資格情報は、 Emacs 外の @command{Online Accounts}
アプリケーションで入力する必要があります。

Google ドライブは暗号化されたブロブ・ファイル名を内部的に使用するため、 @value{tramp} はファイルの
@code{display-name} で機能します。 これは、同じディレクトリ内の 2 つのファイルが同じ @code{display-name}
を持つ場合に予期しない動作を引き起こす可能性があり、 そのような状況は回避しなければなりません。

@item @option{mtp}
@cindex method @option{mtp}
@cindex @option{mtp} method
@cindex media

携帯電話、タブレット、カメラなどのメディア・バイスには、 @option{mtp} 方式を介してアクセスできます。 ファイル名でホストを指定するには、
デバイス名だけが必要です。 ただし、 アクセスする前に、 デバイスが USB 経由で接続されている必要があります。 可能なデバイス名は、
ホスト名補完によって表示されます。 @ref{File name completion}

デバイスの種類によっては、 アクセスが読み取り専用になる場合があります。 一部のデバイスは、 異なる名前で並行してアクセスでき、
ファイル・システムの異なる部分を提供します。

@value{tramp} は、単一のメディア・デバイスが接続されている場合、 リモート・ファイル名の一部としてホスト名を必要としません。
@value{tramp} は、 代わりに @file{@trampfn{mtp,,}} をデフォルト名として使用します。

@item @option{nextcloud}
@cindex method @option{nextcloud}
@cindex @option{nextcloud} method
@cindex nextcloud

名前が示すように、 @option{nextcloud} 方式を使用すると、 OwnCloud や NextCloud
がホストするファイルとディレクトリにアクセスできます。  @option{gdrive} 方式と同様に、 資格情報は Emacs 外の
@command{Online Accounts} アプリケーションで入力する必要があります。  この方式はポート番号指定をサポートしています。

@item @option{sftp}
@cindex method @option{sftp}
@cindex @option{sftp} method

この方式は、 リモート・ホストに安全にアクセスするために @command{sftp} を使用します。 @command{sftp} は、
セキュリティ上の理由で @command{ssh} 接続を拒否するホストに接続するためのより安全なオプションです。

あなたの @command{ssh} 設定にそれぞれのエントリがある場合は、 @option{RemoteCommand}
オプションを「設定してないで」ください。

@end table

@defopt tramp-gvfs-methods
このユーザー・オプションは、@acronym{GVFS}@ の外部方式(external methods)のリストです。 デフォルトでは、
このリストには @option{afp} と @option{dav} と @option{davs} と @option{gdrive} と
@option{mtp} と @option{nextcloud} と @option{sftp} が含まれます。 含める事ができる他の方式は、
@option{ftp} と @option{http} と @option{https} と @option{smb} で、 これらの方式は、
@acronym{GVFS} ベースのメソッドとして直接使用するためのものではなく、 代わりに、 @ref{Archive file names}
のためにここに追加されています。

あなたが @acronym{GVFS} ベースの @option{ftp} または @option{smb} 方式を使用する場合は、 あなたはそれらを
@code{tramp-gvfs-methods} に追加する必要があり、そして、 あなたはそれぞれ @code{tramp-ftp-method}
または @code{tramp-smb-method} を @code{nil} に設定して、 対応する @value{tramp}
パッケージを無効にする必要があります。

@lisp
@group
(add-to-list 'tramp-gvfs-methods "ftp")
(customize-set-variable 'tramp-ftp-method nil)
@end group
@end lisp
@end defopt


@node FUSE-based methods
@section @acronym{FUSE}-based external methods
@cindex methods, fuse
@cindex fuse-based methods

@acronym{GVFS} 以外にも、 @acronym{FUSE} インターフェイスを使用する仮想ファイル・システムがあります。
リモート・ファイルは @acronym{FUSE} によってローカルにマウントされ、 @value{tramp}
はこのローカルにマウントされたディレクトリを内部的に使用します。 可能な場合、@value{tramp}
はリモート・ファイル名をそれぞれのローカル・ファイル名にマップし、 それらにファイル名操作を適用します。 一部のファイル名操作ではこれが不可能であり、
@value{tramp} はそれらの操作を別の方法でエミュレートします。

@table @asis
@item @option{rclone}
@cindex method @option{rclone}
@cindex @option{rclone} method

@vindex tramp-rclone-program
プログラム @command{rclone} を使用すると、クラウド内のさまざまなシステム・ストレージにアクセスできます。
サポートされているシステムのリストについては、 @uref{https://rclone.org/} を参照してください。
@command{rclone} プログラムが @env{PATH} 環境変数で見つからない場合、 ユーザーオプション
@code{tramp-rclone-program} を介して @value{tramp} にその絶対パスを伝えることができます。

システム・ストレージは、 Emacs の外部で @command{rclone config} コマンドを介して設定する必要があります。
@command{rclone} で たとえば、 @samp{storage} という名前でストレージを構成した場合、
以下のようにリモート・ファイル名を介してアクセスできます

@example
@trampfn{rclone,storage,/path/to/file}
@end example

ユーザー名は @command{rclone} 設定の一部であり、 リモート・ファイル名には必要ありません。
リモート・ファイル名にユーザー名が含まれている場合、無視されます。

内部的には、 @value{tramp} はリモート・システム・ストレージを @file{/tmp/tramp.rclone.storage}
にマウントします。 @file{storage} は構成されたシステム・ストレージの名前です。

さまざまな @option{rclone} 操作に対するマウント・ポイントとオプションのフラグは、 接続プロパティ(connection
properties)として渡すことができます。 @xref{Setup of rclone method}

@option{rclone} 経由のアクセスは遅いです。 システム・ストレージにアクセスする別の方法がある場合は、 それを使用するべきです。
それは例えば @ref{GVFS-based methods} の @option{gdrive} 方式や @option{nextcloud}
方式です。

@item @option{sshfs}
@cindex method @option{sshfs}
@cindex @option{sshfs} method

@vindex tramp-sshfs-program
@command{sftp} に基づいてファイル・システムをマウントするための @command{sshfs}
クライアントをインストールしたローカル・ホストでは、 この方式を使用できます。
@uref{https://github.com/libfuse/sshfs/blob/master/README.rst/} 参照。
@command{sshfs} プログラムが @env{PATH} 環境変数で見つからない場合、 ユーザー・オプション
@code{tramp-sshfs-program} を介して @value{tramp} にその絶対パスを伝えることができます。

すべてのリモート・ファイルがローカル・マウント・ポイント経由で利用できます。 @value{tramp} は、
ファイル・システムがまだマウントされていない場合にマウントするのを手助けします。 リモート・ファイル名の構文は以下のとおりです

@example
@trampfn{sshfs,user@@host#port,/path/to/file}
@end example

ユーザー名とポート番号はオプションです。 この方式はパスワード処理をサポートしていません。 ファイル・システムがすでにマウントされているか、 ssh
キーを介してパスワードなしで接続を確立する必要があります。

マウント・ポイントとマウント引数は、 接続プロパティ(connection properties)として渡すことができます。 @xref{Setup
of sshfs method}

@end table


@node Default Method
@section Selecting a default method
@cindex default method

リモート・ファイル名では、 デフォルト方式(default method)の使用は疑似方式(pseudo method) @option{-}
によって示されます。 @ref{File name syntax}

@defopt tramp-default-method
デフォルトの方式は、 ファイルを転送するためのものです。 ユーザー・オプション @code{tramp-default-method} で設定します。
@value{tramp} は、このユーザー ・オプションを使用して、 指定されていないリモート・ファイル名のデフォルトの方式を決定します。

@lisp
(customize-set-variable 'tramp-default-method "ssh")
@end lisp
@end defopt

@defopt tramp-default-method-alist
ファイル転送のデフォルトの方式は、 ユーザー・オプション @code{tramp-default-method-alist} を使用して、
特定のユーザーとホストの組み合わせに対してカスタマイズできます。

たとえば、 以下の 2 行では、 @samp{john} に一致するすべてのユーザー名に対して @option{ssh} メソッドを使用し、
@samp{lily} に一致するすべてのホスト名に対して @option{rsync} メソッドを使用するように指定しています。 3 行目は、ホスト
@samp{localhost} 上のユーザー @samp{root} に対して @option{su} メソッドを使用することを指定します。

@lisp
@group
(add-to-list 'tramp-default-method-alist '("" "john" "ssh"))
(add-to-list 'tramp-default-method-alist '("lily" "" "rsync"))
(add-to-list 'tramp-default-method-alist
             '("\\`localhost\\'" "\\`root\\'" "su"))
@end group
@end lisp
@end defopt

@noindent
大きなファイルの場合、 外部方式(external methods)のパフォーマンスが向上します。 @pxref{Inline methods}
@pxref{External methods}

アクセス方式の選択は、 セキュリティ環境にも依存します。 たとえば、 クリア・テキストのパスワード転送を使用する @option{rsh} および
@option{telnet} 方式は、 インターネット接続では不適切です。 安全なリモート接続には、 暗号化を提供する @option{ssh}
を使用する必要があります。


@subsection Which method to use?
@cindex choosing the right method

@value{tramp} は、 最大の柔軟性のために最大数の選択肢を提供します。
どの方式を選択するかは、ホストやクライアントやネットワーク速度やセキュリティ・コンテキストによって異なります。

インライン方式(inline method)を使用して開始します。

大きなファイルには外部方式(external methods)の方が効率的かもしれませんが、 ほとんどの @value{tramp}
ユーザーは大きなファイルよりも小さなファイルを頻繁に編集します。

インライン方式(inline methods)での大きなファイルのパフォーマンスを向上させるために、
@code{tramp-inline-compress-start-size} で圧縮を有効にします。

@command{ssh} はリモート・ホスト・アクセスの最も一般的な方法になり、 最も合理的なセキュリティ・プロトコルを備えているため、
@option{ssh} 方式を使用します。 他のホストで @file{/etc/motd} ファイルを編集するための一般的な @option{ssh}
の使用法は:

@example
@kbd{C-x C-f @trampfn{ssh,root@@otherhost,/etc/motd} @key{RET}}
@end example

何らかの理由で @option{ssh} が利用できない場合は、 他の明白な選択肢を探してください。 MS Windows では、
@option{plink} メソッドを試してください。 Kerberos の場合は、 @option{krlogin} を試してください。

@option{su} または @option{sudo} 方式としてローカル・ファイルを編集するには、 以下の @samp{root}
の短縮構文を試してください:

@example
@kbd{C-x C-f @trampfn{su,,/etc/motd} @key{RET}}
@end example

大きなファイルを編集する場合、 @option{scp} は @option{ssh} より高速です。 @option{pscp} は
@option{plink} より高速です。 しかし、この速度向上は常に真とは限りません。

@option{scp} を介して 2 つの異なるリモート・ホスト間で大きなファイルをコピーする場合、
@code{tramp-use-scp-direct-remote-copying} を 非 @code{nil} に設定します。


@node Default User
@section Selecting a default user
@cindex default user

@defopt tramp-default-user
@value{tramp} ファイル名は、 現在ログインしているユーザー名を @value{tramp} で置き換えるため、
ユーザー名の部分を省略できます。 ただし、 この置換は @code{tramp-default-user} でオーバーライドできます。 例えば:

@lisp
(customize-set-variable 'tramp-default-user "root")
@end lisp
@end defopt

@defopt tramp-default-user-alist
@code{tramp-default-user-alist} は、 単一のデフォルト・ユーザーの代わりに、
アクセス方式やホスト名の組み合わせに基づいて、 複数のデフォルト・ユーザー値を許可します。 連想リストは複数の値を保持できます。
たとえば、@samp{john} をドメイン @samp{somewhere.else}
のみのデフォルト・ユーザーとして使用するには、以下のようにします:

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '("ssh" ".*\\.somewhere\\.else\\'" "john"))
@end group
@end lisp

警告: @value{tramp} は、 @file{~/.ssh/config} などの Emacs
外部の構成ファイルで指定されたデフォルトのユーザーを上書きします。 @value{tramp} がデフォルト値を適用するのを止めるには、
対応する連想リストのエントリを @code{nil} に設定します:

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '("ssh" "\\`here\\.somewhere\\.else\\'" nil))
@end group
@end lisp

@code{tramp-default-user-alist} の最後のエントリは、
キャッチ・オールまたは最も頻繁に使用されるログイン用に予約する必要があります。

@lisp
@group
(add-to-list 'tramp-default-user-alist
             '(nil nil "jonas") t)
@end group
@end lisp
@end defopt


@node Default Host
@section Selecting a default host
@cindex default host

@defopt tramp-default-host
ホスト名が省略されている場合、 @value{tramp} は @code{tramp-default-host}
ユーザー・オプションの値に置き換えられます。 最初は、 Emacs が実行されているローカル・ホスト名が入力されています。
デフォルトの方式とデフォルトのユーザーとデフォルトのホストは、 以下のようにオーバーライドできます:

@lisp
@group
(custom-set-variables
 '(tramp-default-method "ssh")
 '(tramp-default-user "john")
 '(tramp-default-host "target"))
@end group
@end lisp

すべてのデフォルトを設定すると、 @samp{@trampfn{-,,}} は @value{tramp} を @code{target} 上の
John のホーム・ディレクトリに @code{ssh} 経由で接続します。
@end defopt

@defopt tramp-default-host-alist
@code{tramp-default-host-alist} は、 単一のデフォルト・ホストの代わりに、
アクセス方式やユーザー名の組み合わせに基づいて複数のデフォルト・ホスト値を許可します。  連想リストは複数の値を保持できます。 ほとんどの場合、
@code{tramp-default-host} で十分ですが、 @option{adb} などの一部のメソッドでは、
デフォルトを上書きする必要があります。
@end defopt


@node Multi-hops
@section Connecting to a remote host using multiple hops
@cindex multi-hop
@cindex proxy hosts

マルチ・ホップ(multi-hops)は、 ファイア・ウォールの背後にあるホストに到達する方式、
または要塞(bastion)ホスト内から外部の世界に到達する方式です。 マルチ・ホップを使用すると、 @value{tramp} は、
各ホップ(hop)で適切な ユーザー認証/ホスト認証 を使用してこれらのホップをネゴシエートできます。 これまでのすべての方式は、
接続の始点と終点の間にチェック・ポイント達がなかったシングル・ホップな種類(single hop kind)でした。

@defopt tramp-default-proxies-alist
@code{tramp-default-proxies-alist} は、 通過(パススルー;pass
through)するプロキシ・ホストを指定します。 このユーザー・オプションは、 @code{(@var{host} @var{user}
@var{proxy})} で構成される三つ組(triple)のリストです。

最初にマッチするのは、 ファイル名を渡すプロキシ・ホストと、 @var{user}@@@var{host} にマッチするターゲット・ホストです。
@var{host} と @var{user} は正規表現または @code{nil} で、 @code{nil}
の場合は常に一致する正規表現として解釈されます。

@var{proxy} は、 ローカル名の部分が無視されるリテラルの @value{tramp} ファイル名であり、
方式(method)とユーザー名の部分はオプションです。

方式(method)はインライン方式(inline method)(@pxref{Inline methods})である必要があります。
@var{proxy} が @code{nil} の場合、 @var{user}@@@var{host} に到達する追加のホップは必要ありません。

たとえば、 ホスト @samp{bastion.your.domain} をユーザー @samp{bird} として通過(pass
through)して、 ローカル・ドメイン外のリモート・ホストに到達するには:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\." nil "@trampfn{ssh,bird@@bastion.your.domain,}"))
(add-to-list 'tramp-default-proxies-alist
             '("\\.your\\.domain\\'" nil nil))
@end group
@end lisp

@strong{注意}: @code{add-to-list} はリストの先頭に要素を追加します。 したがって、 @code{add-to-list}
を使う場合、最も関連性の高いルールはソースリストの最後に来る必要があります。

プロキシ・ホストは、 alist でカスケードできます。 @samp{bastion.your.domain}
への接続を許可されている唯一のホストである @samp{jump.your.domain} という別のホストがある場合:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\`bastion\\.your\\.domain\\'"
               "\\`bird\\'"
               "@trampfn{ssh,jump.your.domain,}"))
@end group
@end lisp

@var{proxy} は、 @var{host} または @var{user} に対してそれぞれパターン @code{%h} または
@code{%u} を取ることができます。 ポートまたはドメインがホップ・ファイル名の一部である場合はこれらのパターンの展開は行われません。

ドメイン @samp{your.domain} のリモート・ホストで @samp{root} としてログインするが、 非ローカル・アクセスでは
@samp{root} としてログインを無効にするには、 以下の alist エントリを使用します:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '("\\.your\\.domain\\'" "\\`root\\'" "@trampfn{ssh,%h,}"))
@end group
@end lisp

@file{@trampfn{sudo,randomhost.your.domain,}} を開くと、 まずあなたのアカウント名で @code{ssh}
経由で @samp{randomhost.your.domain} に接続し、 それから、 そのホスト上で @code{sudo -u root}
を実行します。

上記の例の @option{sudo} 方式(method)は、 ローカル・ホストではなく、 到達後にホストに適用される事が鍵です。 したがって、
@value{tramp} は、 そのようなホップでのホスト名がその前のホップでのホスト名と一致することを確認します。

@var{host} と @var{user} と @var{proxy} も Lisp 式にすることができます。
これらの式は評価(eval)されたら文字列または @code{nil} を返さなければなりません。

(先程の例を)一般化するには: ローカル・ホストを除くすべてのホストに対して、 まず @command{ssh} 経由で接続し、 それから
@command{sudo -u root} を適用します:

@lisp
@group
(add-to-list 'tramp-default-proxies-alist
             '(nil "\\`root\\'" "@trampfn{ssh,%h,}"))
(add-to-list 'tramp-default-proxies-alist
             `(,(regexp-quote (system-name)) nil nil))
@end group
@end lisp
@end defopt

ホップ達を通過するには、 @command{bash} などの制限されたシェルを処理する必要があります。 制限されたシェルを @value{tramp}
に認識させると、 制限されたシェルはプロキシのみで使用されます。

@defopt tramp-restricted-shell-hosts-alist
@command{bash} などの制限付きシェルを実行しているホストの正規表現の連想リスト(alist)。 @value{tramp}
はそれらをプロキシとしてのみ使用します。

上記の要塞(bastion)ホストで制限付きシェルを実行するように指定するには、 以下のようにします:

@lisp
@group
(add-to-list 'tramp-restricted-shell-hosts-alist
             "\\`bastion\\.your\\.domain\\'")
@end group
@end lisp
@end defopt


@node Firewalls
@section Passing firewalls
@cindex http tunnel
@cindex proxy hosts, http tunnel

しばしばリモート・ホストに直接到達できないことがあります。
ファイアウォールが邪魔をしている可能性があり、プロキシ・サーバーを介して通過する可能性があります。

OpenSSH と PuTTY の両方で、 @command{CONNECT} コマンド(RFC 2616, 2817 仕様に準拠)を介して HTTP
トンネルを使用して、 このようなプロキシ設定をサポートします。 HTTP 1.1 以降のプロトコルを使用するプロキシ・サーバーは、
このコマンドをサポートします。


@subsection Tunneling with ssh

@vindex ProxyCommand@r{, ssh option}
@command{ssh} では、 @file{~/.ssh/config} で @option{ProxyCommand} エントリを使用できます:

@example
@group
Host host.other.domain
     ProxyCommand nc -X connect -x proxy.your.domain:3128 %h %p
@end group
@end example

@code{nc} は、 HTTP トンネルを確立する BSD の netcat プログラムです。
このような機能を備えた他のプログラムも同様に使用できます。

この例では、 @file{@trampfn{ssh,host.your.domain,}} を開くと、 ポート 3128 で HTTP
プロキシ・サーバー @samp{proxy.your.domain} が渡されます。


@subsection Tunneling with PuTTY

PuTTY では外部プログラムを必要とせず、 HTTP トンネルのサポートは組み込みです。 PuTTY 構成プログラムで、
@samp{host.your.domain} のセッションを作成します。 @option{Connection/Data} エントリで、
@option{HTTP} オプションを選択し、 @samp{proxy.your.domain} を @option{Proxy hostname}
として追加し、 3128 を @option{Port} として追加します。

@file{@trampfn{plinkx,host.your.domain,}} を開くと、 ポート 3128 で HTTP プロキシ・サーバー
@samp{proxy.your.domain} が渡されます。


@node Customizing Methods
@section Using Non-Standard Methods
@cindex customizing methods
@cindex using non-standard methods
@cindex create your own methods

@vindex tramp-methods
@code{tramp-methods} 変数には現在、 定義済み方式(method)の完全なリストがあります。 このリストのどの部分も、
より適切な設定で変更できます。 @kbd{C-h v trapp-methods @key{RET}} でアクセスできる、その変数の Lisp
ドキュメント (Lisp documentation)を参照してください。

ELPA アーカイブには、 そのような拡張機能の例がいくつかあります。 以下をご覧下さい。 これらは Emacs
のパッケージ・マネージャーでインストールできます

@table @samp
@c @item anything-tramp
@c @item counsel-tramp
@c @item helm-tramp
@c Contact Masashí Míyaura <masasam@users.noreply.github.com>

@c @item ibuffer-tramp.el
@c Contact Svend Sorensen <svend@@ciffer.net>

@item docker-tramp
@cindex method @option{docker}
@cindex @option{docker} method
Docker コンテナーとの統合。 コンテナーは、
@file{@trampfn{docker,user@@container,/path/to/file}} を介してアクセスされます。
ここで、@samp{user} は使用する (オプションの) ユーザーであり、 @samp{container} はコンテナーの ID または名前です。

@item kubernetes-tramp
@cindex method @option{kubectl}
@cindex @option{kubectl} method
Kubernetes クラスターにデプロイされた Docker コンテナーの統合。 @samp{docker-tramp} から派生しています。
コンテナーは @file{@trampfn{kubectl,user@@container,/path/to/file}} 経由でアクセスされます。
@samp{user} と @samp{container} は @samp{docker-tramp} と同じ意味です。

@item lxc-tramp
@cindex method @option{lxc}
@cindex @option{lxc} method
LXC コンテナーの統合。 コンテナーは @file{@trampfn{lxc,container,/path/to/file}}
経由でアクセスされます。 @samp{container} は @samp{docker-tramp} と同じ意味です。 @samp{user}
の指定は無視されます。

@item lxd-tramp
@cindex method @option{lxd}
@cindex @option{lxd} method
LXD コンテナーの統合。 コンテナーは @file{@trampfn{lxd,user@@container,/path/to/file}}
経由でアクセスされます。 @samp{user} と @samp{container} は @samp{docker-tramp} と同じ意味です。

@item magit-tramp
@cindex method @option{git}
@cindex @option{git} method
@code{magit} を使用して Git リポジトリをブラウズします。 バージョン管理されたファイルは、
@file{@trampfn{git,rev@@root-dir,/path/to/file}} 経由でアクセスされます。 @samp{rev} は
Git リビジョン、 @samp{root-dir} は @code{magit-tramp-hosts-alist}
で指定されたルート・ディレクトリの仮想ホスト名です。

@item tramp-hdfs
@cindex method @option{hdfs}
@cindex @option{hdfs} method
hadoop/hdfs ファイル・システムへのアクセス。 ファイルは
@file{@trampfn{hdfs,user@@node,/path/to/file}} 経由でアクセスされます。 ここで、 @samp{user}
は使用したいユーザーで、 @samp{node} は Hadoop サーバーの名前です。

@item tramp-nspawn
@cindex method @option{nspawn}
@cindex @option{nspawn} method
systemd-nspawn によって提供される環境へのアクセス。
@file{@trampfn{nspawn,user@@container,/path/to/file}} を介してファイルにアクセスします。 ここで、
@samp{user} は使用する (オプションの) ユーザーであり、 @samp{container} は接続先のコンテナーです。
systemd-nspawn とそのコンテナー・ユーティリティを実行するには、 多くの場合スーパー・ユーザー・アクセスが必要です。
マルチホップ・ファイル名と @option{doas} または @option{sudo} を使用して権限を上げてください。

@item vagrant-tramp
@cindex method @option{vagrant}
@cindex @option{vagrant} method
vagrant ボックスにアクセスするための便利な方式(method)。
@file{@trampfn{vagrant@value{postfixhop}box|sudo,box,/path/to/file}}
のようなマルチ・ホップ・ファイル名でよく使用されます。 ここで、 @samp{box} は vagrant ボックスの名前です。

@end table


@node Customizing Completion
@section Selecting config files for user/host name completion
@cindex customizing completion
@cindex selecting config files

@vindex tramp-completion-function-alist
@code{tramp-completion-function-alist} は、
ユーザー名とホスト名の補完に定義済みファイルを使用します(@pxref{File name completion})。 方式(method)ごとに、
一連の構成ファイルとそのファイルをパースできる関数を保持します。 @code{tramp-completion-function-alist}
の各エントリは、(@var{method} @var{pair1} @var{pair2} @dots{}) の形式です。

各 @var{pair} は (@var{function} @var{file}) で構成されます。 @var{function} は、補完のために
@var{file} からユーザー名とホスト名を抽出する役割を果たします。 この変数にアクセスする関数は 2 つあります:

@defun tramp-get-completion-function method
この関数は、 @var{method} 引数を取り、 @var{method} の補完関数のリストを返します。

例:
@example
@group
(tramp-get-completion-function "rsh")

     @result{} ((tramp-parse-rhosts "/etc/hosts.equiv")
         (tramp-parse-rhosts "~/.rhosts"))
@end group
@end example
@end defun

@defun tramp-set-completion-function method function-list
この関数は、 引数 @var{method} と @var{function-list} を取り、 @var{function-list} を
@var{method} の補完関数のリストとして設定します。

例:
@example
@group
(tramp-set-completion-function "ssh"
 '((tramp-parse-sconfig "/etc/ssh_config")
   (tramp-parse-sconfig "~/.ssh/config")))

     @result{} ((tramp-parse-sconfig "/etc/ssh_config")
         (tramp-parse-sconfig "~/.ssh/config"))
@end group
@end example
@end defun

構成ファイルをパースする以下の定義済み関数達があります:

@ftable @asis
@item @code{tramp-parse-rhosts}

この関数は、 構文的に @file{~/.rhosts} と同等のファイルをパースします。 指定されている場合、 ホスト名とユーザー名の両方を返します。

@item @code{tramp-parse-shosts}

この関数は、 構文的に @file{~/.ssh/known_hosts} と同等のファイルをパースします。
このようなファイルにはユーザー名が指定されていないため、 ホスト名のみを返すことができます。

@item @code{tramp-parse-sconfig}

この関数は、 @file{~/.ssh/config} スタイル・ファイルの @option{Host}
エントリで定義されたホスト・ニックネームを返します。

@item @code{tramp-parse-shostkeys}

ディレクトリ @file{/etc/ssh2/hostkeys/*} と @file{~/ssh2/hostkeys/*} の SSH2 パース。
ホストは、 ファイル名 @file{hostkey_@var{portnumber}_@var{host-name}.pub} でコーディングされます。
ユーザー名は常に @code{nil} です。

@item @code{tramp-parse-sknownhosts}

@file{/etc/ssh2/knownhosts/*} や @file{~/ssh2/knownhosts/*} などの別の SSH2
スタイルのディレクトリのパース。 この場合、 ホスト名はファイル名 @file{@var{host-name}.@var{algorithm}.pub}
でコーディングされます。 ユーザー名は常に @code{nil} です。

@item @code{tramp-parse-hosts}

ホスト名専用の @file{/etc/hosts} 関数。

@item @code{tramp-parse-passwd}

ユーザー名の @file{/etc/passwd} をパースする関数。

@item @code{tramp-parse-etc-group}

グループ名の @file{/etc/group} をパースする関数。

@item @code{tramp-parse-netrc}

@file{~/.netrc} や @file{~/.authinfo} スタイルのファイルをパースする関数。

@end ftable

カスタム・データを含むカスタム・ファイルをカスタム構造に保持するには、 カスタム関数を提供する必要があります。 カスタム関数は、
以下の規則を満たす必要があります:

@defun my-tramp-parse file
引数 @var{file} は、 ホスト上のファイルまたは @code{nil} でなければなりません。 この関数は、(@var{user}
@var{host}) のリストを返す必要があります。 これは、 ユーザー名とホスト名の補完の候補となります。

例:
@example
@group
(my-tramp-parse "~/.my-tramp-hosts")

     @result{} ((nil "toto") ("daniel" "melancholia"))
@end group
@end example
@end defun


@node Password handling
@section Reusing passwords for several connections
@cindex passwords

パスワード入力の繰り返しを回避するには、 @option{ssh} のような方式の @command{ssh-agent} や、
@option{plink} のような方式の @command{pageant} などのネイティブ・キャッシュ・メカニズムを検討してください。

@value{tramp} は、 ネイティブな解決方法で必要を満たせない場合に代替手段を提供します。


@anchor{Using an authentication file}
@subsection Using an authentication file

@vindex auth-sources
パッケージ @file{auth-source.el} は、 もともと No Gnus 用に開発されたもので、
さまざまなソースからパスワードを読み取ります(@xref{Help for users, , auth-source, auth})。
デフォルトの認証ファイルは @file{~/.authinfo.gpg} ですが、 これはユーザー・オプション @code{auth-sources}
で変更できます。

@noindent
認証ファイルの典型的なエントリ:

@example
machine melancholia port scp login daniel password geheim
@end example

port は任意の @value{tramp} 方式(method)(@pxref{Inline methods}, @pxref{External
methods})を取ることができます。 port の値を省略すると、 すべての @value{tramp} 方式(methods)に一致します。
@value{tramp} ファイル名構文で使用されるドメインとポートを machine と login 項目に追加する必要があります:

@example
machine melancholia#4711 port davs login daniel%BIZARRE password geheim
@end example

方式 @option{doas} と @option{sudo} と @option{sudoedit} では、
接続を要求しているユーザーのパスワードが必要であり、 ターゲット・ユーザーのパスワードは必要ありません。 これらの接続がローカル・ホストで発生する場合、
ローカル・ユーザーとローカル・ホストのエントリが使用されます。

@example
machine @var{HOST} port sudo login @var{USER} password secret
@end example

@var{USER} と @var{HOST} は、 @code{(user-login-name)} と @code{(system-name)}
によって返される文字列です。 これらの方法のいずれかがマルチ・ホップ
(@pxref{Multi-hops})経由で接続されている場合、その前のホップの資格情報が使用されます。

@vindex auth-source-save-behavior
適切なエントリが存在しない場合、 パスワードは対話的に読み取られます。 ログイン(パスワードの検証)に成功した後、 Emacs は、 これをサポートする
@code{auth-source} バックエンドでさらに使用するために、 対応するエントリを保存することを提案します。 これは、 ユーザー・オプション
@code{auth-source-save-behavior} を @code{nil} に設定することで変更できます。

@vindex auth-source-debug
デバッグ・メッセージを出すためには @code{auth-source-debug} を @code{t} に設定します。

@vindex ange-ftp-netrc-filename
@strong{注意} @file{auth-source.el} は @option{ftp} 接続には使用されません。 これは、
@value{tramp} が作業を Ange FTP@ に渡すためです。 たとえば、 @file{~/.authinfo.gpg}
認証ファイルを使用する場合は、 @code{ange-ftp-netrc-filename} をカスタマイズする必要があります。

@lisp
(customize-set-variable 'ange-ftp-netrc-filename "~/.authinfo.gpg")
@end lisp

@value{tramp} パスワードに認証ファイルを使用したくない場合は、 接続ローカル変数(connection-local
variables)を使用してください
@ifinfo
(@pxref{Connection Variables, , , emacs})
@end ifinfo
以下のようにします:

@lisp
@group
(connection-local-set-profile-variables
 'remote-without-auth-sources '((auth-sources . nil)))
@end group

@group
(connection-local-set-profiles
 '(:application tramp) 'remote-without-auth-sources)
@end group
@end lisp


@anchor{Caching passwords}
@subsection Caching passwords

@value{tramp} は、 入力されたパスワードをキャッシュし、 アクセス方式(method)に関係なく、
同じユーザーまたはホスト名に対して必要なときに再利用できます。

@vindex password-cache-expiry
@code{password-cache-expiry} は、 パスワードが記憶される期間(秒単位)を設定します。
パスワードは永久に保存されることはなく、 現在の Emacs セッションの存続期間を超えて延長されることもありません。 有効期限を無効にするには
@code{password-cache-expiry} を @code{nil} に設定します。

@vindex password-cache
パスワードのキャッシュを無効にするには @code{password-cache} を @code{nil} に設定します。


@node Connection caching
@section Reusing connection related information
@cindex caching

@vindex tramp-persistency-file-name
初期接続時間を短縮するために、 @value{tramp} は以前の接続プロパティ(connection properties)をユーザー・オプション
@code{tramp-persistency-file-name} で指定されたファイルに保存します。

@code{tramp-persistency-file-name} のデフォルトのファイル名は @file{~/.emacs.d/tramp} です。

@value{tramp} は、 Emacs の起動時にこのファイルを読み取り、 Emacs の終了時に書き込みます。 @value{tramp}
のこのファイルを削除すると、 次の Emacs 起動時に新しいファイルを再作成します。

接続の永続的な保存を無効にするには @code{tramp-persistency-file-name} を @code{nil} に設定します。

@value{tramp} が (コマンド @command{uname -sr} を介して)
リモート・ホストでオペレーティング・システムのバージョンの変更を検出すると、 そのホストのすべての接続関連情報をフラッシュし、
新しいエントリを作成します。


@node Predefined connection information
@section Setting own connection related information

より正確なカスタマイズのために、 @code{tramp-methods} で指定されたパラメーターを手動で上書きできます。

@vindex tramp-connection-properties
@code{tramp-connection-properties} を設定して、@code{tramp-methods} を手動で上書きします。
このリストのプロパティは、@code{(@var{regexp} @var{property} @var{value})} の形式になっています。
@var{regexp} は、リモート・ファイル名とマッチします。 @code{nil} を使用するとすべてにマッチさせます。
@var{property} はプロパティの名前で、 @var{value} はプロパティの値です。

@var{property} は、@code{tramp-methods} に含まれる方式(method)固有のパラメーターです。
@code{tramp-methods} のパラメーター key は、 シンボル名 @code{tramp-<foo>} です。
そのプロパティを上書きするには、 @var{property} に文字列 @t{"<foo>"} を使用します。 たとえば、
以下はリモート・シェルを変更します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@randomhost.your.domain,}")
                   "remote-shell" "/bin/ksh"))
@end group

@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@randomhost.your.domain,}")
                   "remote-shell-login" '("-")))
@end group
@end lisp

@code{tramp-methods} のパラメータ @code{tramp-remote-shell} と
@code{tramp-remote-shell-login} に、 リモート・ホスト用の新しい値を追加しました。

@var{property} は、 @code{tramp-persistency-file-name}
内で見つけられる任意のプロパティにすることもできます。


@subsection Relevant connection properties to override

すべての接続プロパティを変更する必要があるわけではありません。 最も関連性の高いプロパティを以下に示します:

@itemize
@item @t{"login-program"}

プロパティ @t{"login-program"} は、 リモート・ホストへの接続に使用されるプログラムを格納します。 場合によっては、
プログラムがホスト上で別の名前になっている場合や、 別のパスにある場合があります。 この場合、 接続方式(connection
method)ごとに特別なデフォルト値を上書きできます。 @file{tramp-sh.el} のすべての接続方式(connection
methods)で使用されます。

@item @t{"login-args"}

@t{"login-args"} は、 @t{"login-program"} に渡す引数リストのリストを指定します。 これらのリストを構築する方法は
@code{tramp-methods} の docstring を読んで確認してください。

@item @t{"remote-shell"}

このプロパティは、 リモート・ホストに適用するリモート・シェルを @value{tramp} に指示します。 @file{tramp-sh.el}
のすべての接続方式で使用されます。 デフォルト値は @t{"/bin/sh"} です。

@item @t{"remote-shell-login"}

@t{"remote-shell"} と組み合わせて使用するプロパティ。 これは、 どのシェル引数(shell
argument)がログイン・シェルをトリガーするかを指定します。 デフォルト値は @t{"-l"} ですが、 @command{ksh}
などの一部のシェルは @t{"-"} を好みます。

@item @t{"session-timeout"}

すべての @file{tramp-sh.el} ベースの方式(methods)は、 プロパティ @t{"session-timeout"}
を受け入れます。 これは、セキュリティ上の理由で接続が無効になってから再確立する必要があるまでの時間(秒単位)です。 @code{nil} 値は、
この機能を無効にします。 定義済みの値を使用する @option{sudo} 方式と @option{doas} 方式を除いて、
ほとんどの方式はこのプロパティを設定しません(not set)。

@item @t{"~"}@*
@t{"~user"}

これは、 リモート・ホストのホーム・ディレクトリです。 この接続プロパティを設定すると、 @option{adb} や @option{rclone}
や @option{sshfs} など、 リモートのホーム・ディレクトリを @t{"~"}, @t{"~user"}
などから展開できない方式(method)の場合に特に役立ちます。 例として @ref{Home directories} を参照してください。

@item @t{"tmpdir"}

リモート・ホスト上の一時(temporary)ディレクトリ。 指定されていない場合、 デフォルト値は @option{adb} 方式の場合は
@t{"/data/local/tmp"} で、 @option{smb} 方式の場合は @t{"/C$/Temp"} で、 それ以外は
@t{"/tmp"} です。

@item @t{"direct-async-process"}

このプロパティが @code{nil} 以外の場合、 二者択一として、 @code{make-process} と
@code{start-file-process} のうち、 よりパフォーマンスの高い方の実装が適用されます。 接続方式(method)も、
@code{tramp-methods} の @code{tramp-direct-async} パラメータを @code{nil}
以外でマークする必要があります。 制約の議論については、 @ref{Improving performance of asynchronous
remote processes} を参照してください。

@item @t{"posix"}

@option{smb} 方式を使用した接続は、 リモート・ホストが posix コマンドをサポートしているかどうかを確認します。 リモート・ホストが
Samba を実行している場合、 この機能を確認(confirm)します。 ただし、一部の非常に古い Samba バージョンでは、
実装にエラーがあります。 これらのホストの posix コマンドを抑制するには、 プロパティ @t{"posix"} を @code{nil}
に設定する必要があります。

このプロパティのデフォルト値は @code{t} (@code{tramp-methods} では指定されていません) です。
リモート・ホストがネイティブの MS Windows を実行している場合、 このプロパティは効果がありません。

@item @t{"mount-point"}

@acronym{FUSE} ベースのファイル・システムがマウントされているディレクトリ・ファイル名。 このプロパティのデフォルト値は
@t{"/tmp/tramp.method.user@@host#port"} です (@code{tramp-methods}
では指定されていません)。

@item @t{"mount-args"}@*
@t{"copyto-args"}@* @t{"moveto-args"}@* @t{"about-args"}

これらのプロパティは、 さまざまな @option{rclone} 操作に対するオプションのフラグを保持します。 値を変更したい場合は、
@code{tramp-methods} のデフォルト値を参照してください。
@end itemize


@node Remote programs
@section How @value{tramp} finds and uses programs on the remote host

@value{tramp} は、リモート・ホスト上のいくつかのコマンドへのアクセスと実行権限を要求します: @command{ls} と
@command{test} と @command{find} と @command{cat} です。

他にも  @ref{Inline methods} と @ref{External methods} の接続に必要なプログラムがあります。

リモート・ファイル・アクセスのパフォーマンスと精度を改善するために、 @value{tramp} は @command{perl} (または
@command{perl5}) と @command{grep} を、使用可能な場合、使用します。

@defopt tramp-remote-path
@code{tramp-remote-path} は、 @value{tramp} が @ref{Remote programs}
を検索できるリモート・ディレクトリ・パスを指定します。

@vindex tramp-default-remote-path
@value{tramp} は、@file{/bin} や @file{/usr/bin} などの標準的なデフォルトを使用しますが、
これはほとんどのホストにとって適切です。 ホストとパスの違いに対応するには、 たとえば、 Debian GNU/Linux の
@file{/bin:/usr/bin} または Solaris の
@file{/usr/xpg4/bin:/usr/ccs/bin:/usr/bin:/opt/developerstudio12.6/bin} では、
@value{tramp} はリモート・ホストで @command{getconf PATH} でクエリを実行し、 シンボル
@code{tramp-default-remote-path} を更新します。

ホストがセキュリティ上の理由でパスの場所を曖昧にしている場合は、 以下に示すように、 接続時に @value{tramp} を使用するために、
そのようなパスをローカルの @file{.emacs} に手動で追加します。

@lisp
(add-to-list 'tramp-remote-path "/usr/local/perl/bin")
@end lisp

@vindex tramp-own-remote-path
リモート・パスを見つけるもう 1 つの方法は、 リモート・ホストによってリモート・ユーザーに割り当てられたパスを使用することです。
@value{tramp} は通常、 ログイン後にこのリモート・パスを保持しません。 ただし、 @code{tramp-own-remote-path}
はパス値を保持し、 @code{tramp-remote-path} を更新するために使用できます。

@lisp
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
@end lisp

@strong{注意} これは、 リモートの @command{/bin/sh} シェルがログイン引数 @samp{-l}
をサポートしている場合にのみ機能することに注意してください。
@end defopt

@ifinfo
@code{tramp-remote-path} は、 接続ローカル変数(connection-local
variables)を介してホストごとに設定することもできます。 @xref{Connection Variables, , , emacs}
@end ifinfo
@ifnotinfo
@code{tramp-remote-path} は、 接続ローカル変数(connection-local
variables)を介してホストごとに設定することもできます。
@end ifnotinfo
あなたは以下のようにあなた独自の検索ディレクトリを定義できます:

@lisp
@group
(connection-local-set-profile-variables 'remote-path-with-bin
   '((tramp-remote-path . ("~/bin" tramp-default-remote-path))))
@end group

@group
(connection-local-set-profile-variables 'remote-path-with-apply-pub-bin
   '((tramp-remote-path . ("/appli/pub/bin" tramp-default-remote-path))))
@end group

@group
(connection-local-set-profiles
   '(:application tramp :machine "randomhost") 'remote-path-with-bin)
@end group

@group
(connection-local-set-profiles
   '(:application tramp :user "anotheruser" :machine "anotherhost")
     'remote-path-with-apply-pub-bin)
@end group
@end lisp

リモート検索パスが変更された場合、 ローカルの @value{tramp} キャッシュを再計算する必要があります。 @value{tramp}
に再計算を強制するには、 @kbd{M-x Tramp-cleanup-this-connection @key{RET}} とするか、
何処かにつなげ直します。 (@pxref{Cleanup remote connections}) 


@node Remote shell setup
@section Remote shell setup hints


@subsection Changing the default remote or local shell
@cindex zsh setup

デフォルトでは、 @value{tramp} はコマンド @command{/bin/sh} を使用して、 リモート・ホストでシェルを起動します。
これは、 接続プロパティ @t{"remote-shell"} を設定することで変更できます。 @ref{Predefined connection
information} を参照してください。 たとえば、 リモート・ホストで @command{/usr/bin/zsh}
を使用したい場合は以下のようにします

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{sshx,user@@host,}")
                   "remote-shell" "/usr/bin/zsh"))
@end group
@end lisp

これは、 @option{sshx} や @option{plink} などの、
リモート・ログイン・シェルをオーバーライドできる接続方式でのみ機能します。 これをサポートする接続方式については、 @ref{Inline
methods} と @ref{External methods} を参照してください。

@vindex tramp-sh-extra-args
このアプローチには、 @code{tramp-sh-extra-args} の設定が適用されるという利点もあります。 @command{zsh} では、
zle オプションの設定によるシェル・プロンプトのトラブルが回避されます。 @command{bash} の場合、 @file{~/.editrc}
または @file{~/.inputrc} の読み込みが抑制されます。

プロセスを作成するために @value{tramp} が使用するローカル・シェルでも同様の問題が発生する可能性があります。 デフォルトでは、
これにはコマンド @command{/bin/sh} を使用しますが、 これは別のシェルへのリンクでもあります。 これを上書きするために、
あなたは以下を適用するかもしれません

@vindex tramp-encoding-shell
@lisp
(customize-set-variable 'tramp-encoding-shell "/usr/bin/zsh")
@end lisp

これは @code{tramp-sh-extra-args} の設定も使用します。

@vindex RemoteCommand@r{, ssh option}
@strong{注意}: 接続に @option{ssh} ベースの方法を使用する場合は、 @command{ssh} 構成で
@option{RemoteCommand} オプション、たとえば @command{screen} などを「設定しないでください」。 一方、
@option{sshx} や @option{scpx} などの @option{ssh} ベースのメソッドは、 構成ファイルの
@option{RemoteCommand} オプションを黙って上書きします。


@subsection Other remote shell setup hints
@cindex remote shell setup
@cindex @file{.profile} file
@cindex @file{.login} file
@cindex shell init files

@value{tramp} は、 通常の場所で標準プログラムが利用可能かどうかをチェックします。 一般的な戦術には、 @command{test -e}
と @command{/usr/bin/test -e} と  @command{/bin/test -e} を連続して試すことが含まれます。
@command{ls -d} は、 もう一つのアプローチです。 しかし、 これらのアプローチは、 以下の新しいログイン ・パターンには役に立ちません。

@value{tramp} が 2 要素ログイン(two-factor logins)または追加のチャレンジ質問(additional
challenge questions)(生年月日、 セキュリティ・コード、 パスフレーズの入力など)に遭遇した場合、 @value{tramp}
はそれらに対応するためにさらにいくつかの構成手順が必要です。

パスワード・プロンプトとパスフレーズ・プロンプトの違いは、 パスワードはログインを完了するためのもので、
パスフレーズはssh鍵などのローカル認証情報へのアクセスを許可するためのものであることです。

ログイン・セキュリティのすべてのバリエーションに対応する単一の構成はありません。 特に特殊なものはそうです。 ただし、 @value{tramp} は、
最も一般的なものに対処するためにいくつかの調整(tweaks)を提供します。

@table @asis
@item @code{tramp-shell-prompt-pattern}
@vindex tramp-shell-prompt-pattern

@code{tramp-shell-prompt-pattern} はリモート・ログイン・シェル・プロンプト用であり、
ローカル・ログイン・シェル・プロンプト @code{shell-prompt-pattern} とは異なる場合があります。
ほとんどのホストは同じプロンプトを使用するため、 @value{tramp} は両方のプロンプトに同様のデフォルト値を設定します。

@item @code{tramp-password-prompt-regexp}
@item @code{tramp-wrong-passwd-regexp}
@vindex tramp-password-prompt-regexp
@vindex tramp-wrong-passwd-regexp

@value{tramp} は @code{tramp-password-prompt-regexp} を使用して、
パスワードのプロンプトとパスフレーズのプロンプトを区別します。 デフォルトでは、 @code{tramp-password-prompt-regexp}
は英語環境(English language environments)での検出を処理します。 以下のローカライズの例を参照してください:

@lisp
@group
(customize-set-variable
 'tramp-password-prompt-regexp
  (concat
   "^.*"
   (regexp-opt
    '("passphrase" "Passphrase"
      ;; English
      "password" "Password"
      ;; Deutsch
      "passwort" "Passwort"
      ;; Français
      "mot de passe" "Mot de passe")
    t)
   ".*:\0? *"))
@end group
@end lisp

@vindex password-word-equivalents
このユーザーオプションは、 デフォルトで、 @value{tramp} がロードされるときに
@code{password-word-equivalents} から初期化されます。 通常、 このユーザーオプションを変更する代わりに、
そのユーザーオプションに新しいパスフレーズを追加する方が便利です。

@value{tramp} が @code{tramp-wrong-passwd-regexp} を使用する間違ったパスワード・プロンプト(wrong
password prompts)を処理するには、 同様のローカライズが必要になる場合があります。

@item @code{tramp-terminal-type}
@vindex tramp-terminal-type
@vindex TERM@r{, environment variable}

@value{tramp} は、 ユーザー・オプション @code{tramp-terminal-type} を使用して、
実行するシェルのリモート環境変数 @env{TERM} を設定します。 デフォルトでは @t{"dumb"} ですが、これは変更できます。
ダム(dumb)端末は、 @value{tramp} のバックグラウンド・セッションを実行するのに最適です。 ただし、
インタラクティブなリモート・シェルを実行するには、 別の設定が必要になる場合があります。 これは、 @code{process-environment}
の @env{TERM} 環境変数を調整(tweak)することで実現できます。

@lisp
@group
(let ((process-environment
       (cons "TERM=xterm-256color" process-environment)))
  (shell))
@end group
@end lisp

@item Determining a @value{tramp} session
@vindex TERM@r{, environment variable}
@vindex INSIDE_EMACS@r{, environment variable}

しばしばシェルが @value{tramp} 制御下で実行されているかどうかを識別する必要があります。 環境変数 @env{TERM}
の設定が役立ちます:

@example
@group
if test "$TERM" = "dumb"; then
   ...
fi
@end group
@end example

@ifinfo
別の手としては、 環境変数 @env{INSIDE_EMACS} を確認することです。 Emacs のすべてのサブプロセスと同様に、 これは親
Emacs プロセスのバージョンに設定されます(@xref{Interactive Shell, , , emacs})。
@end ifinfo
@ifnotinfo
別の手としては、 環境変数 @env{INSIDE_EMACS} を確認することです。 Emacs のすべてのサブプロセスと同様に、 これは親
Emacs プロセスのバージョンに設定されます。
@end ifnotinfo
@value{tramp} は、 自身のパッケージ・バージョンをこの文字列に追加します。 これは、 下位シェルでのさらなるテストに使用できます。
その環境変数の文字列は常に以下のようになります

@example
@group
echo $INSIDE_EMACS
@result{} 27.2,tramp:2.4.5
@end group
@end example

@item @command{tset} and other questions
@cindex unix command @command{tset}
@cindex @command{tset} unix command

端末タイプでの不適切なプロンプトを抑制するために、 @value{tramp} は、 リモート・ログイン・プロセスがユーザー・オプション
@code{tramp-terminal-type} (上記を参照)を介して開始される前に @env{TERM} 環境変数を設定します。 これは一般的な
@command{tset} 関連のプロンプトを無しにします。

(通常はリモート・ホスト上のログイン・スクリプトからトリガーされる、)このようなプロンプトを処理するための、 @value{tramp}の戦略は、
シェルの初期化処理がロンプトによって中断(interrupt)されないように環境変数を設定することです。

@vindex tramp-actions-before-shell
別のアプローチとしては、 @code{tramp-actions-before-shell} を使用して、そのような質問を識別できる文字列で
@value{tramp} を構成することです。 たとえば:

@lisp
@group
(defconst my-tramp-prompt-regexp
  "Enter the birth date of your mother:\\s-*"
  "Regular expression matching my login prompt question.")
@end group

@group
(defun my-tramp-action (proc vec)
  "Enter \"19000101\" in order to give a correct answer."
  (save-window-excursion
    (with-current-buffer (tramp-get-connection-buffer vec)
      (tramp-message vec 6 "\n%s" (buffer-string))
      (tramp-send-string vec "19000101"))))
@end group

@group
(add-to-list 'tramp-actions-before-shell
             '(my-tramp-prompt-regexp my-tramp-action))
@end group
@end lisp

@code{tramp-actions-before-shell} で使用される正規表現は、 接続バッファの末尾とマッチする必要があります。
パフォーマンス上の理由により、 この検索はバッファの最後から開始され、 後方 256 文字に制限されています。

@item Conflicting names for users and variables in @file{.profile}

ユーザー名が @file{.profile} などのローカル・ファイル内の変数名と同じである場合、 @value{tramp}
は環境変数に対して誤った値を送信する可能性があります。 誤った値を避けるために、 ローカル変数名をユーザー名とは異なる名前に変更してください。
たとえば、 ユーザー名が @env{FRUMPLE} の場合、 変数名を @env{FRUMPLE_DIR} に変更します。

@item Non-Bourne commands in @file{.profile}

リモート・ホストの @file{.profile} が Bourne シェル以外のシェルにも使用されている場合、 @file{.profile}
内のコマンドの互換性のない構文によって、 ホスト上の Bourne シェルでエラーが発生し、 クライアントの @value{tramp}
接続が完了しない場合があります。

@file{.profile} の Bourne シェル非互換構文の一例: @command{FOO=bar; export FOO} の代わりに
@command{export FOO=bar} を使用。 Bourne シェルは @file{.profile} に入力された、
このエクスポート・コマンドを認識しないため、 リモート・ログイン後、 @value{tramp} はリモート・ホストで
@command{/bin/sh} の実行中にエラーをトリガーします。

同様に、 Bourne シェルは (@code{~}) 文字展開を行わないため、 パスに (@code{~}) 文字があるとエラーが発生します。

これらの非互換性を回避する方法の一つは、 @file{~/.shrc} や @file{~/.profile} Bourne
シェル内のすべてのコマンドを互換性のあるものにして、 @value{tramp} がそのリモートへの接続を完了できるようにすることです。
そのリモートで非 Bourne シェルの使用に対応するには、 他のシェル固有の構成ファイルを使用します。 たとえば、 bash は
@file{~/.bash_profile} を使用し、 @file{.profile} を無視できます。

@item Interactive shell prompt

@vindex INSIDE_EMACS@r{, environment variable}
@vindex SHELLNAME@r{, environment variable}
@vindex ESHELL@r{, environment variable}
@value{tramp} は、 堅牢なパースのために内部的にリモート・シェル・プロンプトを再定義します。 この再定義は、 @kbd{M-x shell
@key{RET}} などのコマンドを介した対話型リモート・シェルのプロンプトの外観に影響します。 ただし、 このようなプロンプトは、
これらの環境変数を使用して、 より読みやすく認識しやすいものにリセットできます。

@value{tramp} は、 起動スクリプト・ファイル @file{~/.emacs_SHELLNAME} に @env{INSIDE_EMACS}
環境変数を設定します。

@env{SHELLNAME} は @code{bash} または同等のシェル名です。 @file{.emacs} の環境変数 @env{ESHELL}
を以下のように設定することにより変更します:

@lisp
(setenv "ESHELL" "bash")
@end lisp

それから、 @file{~/.emacs_SHELLNAME} のプロンプト文字列を以下のように再設定します:

@example
@group
# Reset the prompt for remote @value{tramp} shells.
if [ "$@{INSIDE_EMACS/*tramp*/tramp@}" == "tramp" ] ; then
   PS1="[\u@@\h \w]$ "
fi
@end group
@end example

@ifinfo
@xref{Interactive Shell, , , emacs}.
@end ifinfo

@item @command{busybox} / @command{nc}
@cindex unix command @command{nc}
@cindex @command{nc} unix command

@value{tramp} の @option{nc} 方式(method)は、 @command{nc}
コマンドを使用して、以下のようにリスナー(listener)をインストールおよび実行します (@code{tramp-methods} 参照)。

@example
$ nc -l -p 42
@end example

上記のコマンドライン構文は、 @command{busybox} バージョンで変更されました。  @command{nc} が @samp{-p}
パラメータを拒否する場合は、 以下のように上書きします:

@lisp
@group
(add-to-list 'tramp-connection-properties
             `(,(regexp-quote "192.168.0.1")
               "remote-copy-args" (("-l") ("%r"))))
@end group
@end lisp

@noindent
ここで、 @samp{192.168.0.1} はリモート・ホストの IP アドレスです(@pxref{Predefined connection
information})。

@end table


@node Ssh setup
@section Ssh setup hints

最も一般的な @value{tramp} 接続ファミリは、 OpenSSH の @command{ssh} や @command{scp}、 または
MS Windows 上の PuTTY の @command{plink} や @command{pscp} に基づいています。
以下に、いくつかの構成に関する推奨事項を示します。


@subsection Using ssh config include for host name completion

@vindex Include@r{, ssh option}
@findex tramp-set-completion-function
@findex tramp-get-completion-function
OpenSSH 構成ファイルは、 追加の構成ファイルに @option{Include} オプションを使用できます。 デフォルトの
@value{tramp} ホスト名補完は、 このオプションを無視します。 ただし、これは自分で構成できます。

@file{~/.ssh/config} ファイルに以下のオプションが含まれているとします:

@example
Include ~/.ssh/conf.d/*
@end example

@file{.emacs} 内の以下のコード片は、 そのディレクトリ内のすべてのファイルを使用してホスト名を補完します:

@lisp
@group
(tramp-set-completion-function
 "ssh" (append (tramp-get-completion-function "ssh")
               (mapcar (lambda (file) `(tramp-parse-sconfig ,file))
                       (directory-files
                        "~/.ssh/conf.d/"
                        'full directory-files-no-dot-files-regexp))))
@end group
@end lisp

このコード片は、 @option{ssh} 方式(method)に対するものです。 @t{"ssh"} を @t{"scp"}
に置き換えると、その方式(またはあなたの好きなその他の方式)に対しても同じことが行われます。


@subsection Detection of session hangouts

@vindex ServerAliveInterval@r{, ssh option}
@vindex ServerAliveCountMax@r{, ssh option}
ネットワークがダウンすると、 ローカル・ホスト上の @command{ssh} セッションがハングアップ(hang)します。 @value{tramp}
は、 そのようなハングアップを安全に検出できません。 OpenSSH は、 @file{~/.ssh/config} で以下の設定を使用して、
このようなハングアップを強制終了するように構成できます:

@example
@group
Host *
     ServerAliveInterval 5
     ServerAliveCountMax 2
@end group
@end example

これに対応する PuTTY 設定は、 @option{Connection} エントリの @option{Seconds between
keepalives} オプションにあります。 これを 5 に設定します。 カウントは設定できません(訳注:
ServerAliveCountMax相当はありません)。


@subsection Using ssh connection sharing

@vindex ControlPath@r{, ssh option}
@vindex ControlPersist@r{, ssh option}
@value{tramp} は、 可能であれば、 デフォルトで @option{ControlMaster=auto} OpenSSH
オプションを使用します。 ただし、 @command{ssh} セッションを開始するときに @option{ControlPath}
設定を上書きします。 @value{tramp} は、 Emacs セッションの外で開かれたマスターセッション(master
session)が開かれなくなった場合に、 ストール(stall)を回避するためにこれを行います。 そのため、 @command{ssh}
がすでに開いている場合でも、 @value{tramp} は再度パスワードを要求します。

@vindex tramp-ssh-controlmaster-options
一部の OpenSSH バージョンは @option{ControlPersist} オプションをサポートしており、 変数
@code{tramp-ssh-controlmaster-options}
が以下のようにカスタマイズされている場合、@option{ControlPath} を設定できます:

@lisp
@group
(customize-set-variable
 'tramp-ssh-controlmaster-options
 (concat
   "-o ControlPath=/tmp/ssh-ControlPath-%%r@@%%h:%%p "
   "-o ControlMaster=auto -o ControlPersist=yes"))
@end group
@end lisp

注意: @samp{%r} と @samp{%h} と @samp{%p} は、 @samp{%%r} や @samp{%%h} や
@samp{%%p} としてエンコードする必要があることに注意してください。

@vindex tramp-use-ssh-controlmaster-options
@file{~/.ssh/config} ファイルが上記の動作に対して適切に設定されている場合、 @command{ssh} への変更は、 以下の
@code{nil} 設定で抑制できます:

@lisp
(customize-set-variable 'tramp-use-ssh-controlmaster-options nil)
@end lisp

@vindex ProxyCommand@r{, ssh option}
@vindex ProxyJump@r{, ssh option}
あなたの @command{ssh} 設定で @option{ProxyCommand} または @option{ProxyJump}
オプションを使用する場合、 これらも @code{nil} に設定する必要があります。

@option{ControlMaster} オプションを使用するには、 @value{tramp} は @command{ssh}
クライアントがこのオプションをサポートしているかどうかを確認する必要があります。 これは、 最初のホップのローカル・ホストでのみ可能です。 したがって、
@value{tramp} はプロキシ・ホストではこのオプションを使用しません。

このオプションを他のホップにも使用する場合は、 プロキシ・ホストで @file{~/.ssh/config} を構成する必要があります:

@example
@group
Host *
     ControlMaster      auto
     ControlPath        tramp.%C
     ControlPersist     no
@end group
@end example

これらのオプションがプロキシ・ホストでサポートされているかどうかは、 man ページ の @samp{ssh_config(5)} を確認してください。

MS Windows では、 @code{tramp-use-ssh-controlmaster-options} はデフォルトで @code{nil}
に設定されています。 これは、 @command{OpenSSH} の MS Windows および MSYS2
実装がこのオプションを適切にサポートしていないためです。

PuTTY では、 @option{Connection/SSH} エントリで接続共有(connection sharing)を実現し、
@option{Share SSH connections if possible} オプションを有効にできます。


@subsection Configure direct copying between two remote servers

@vindex tramp-use-scp-direct-remote-copying
@value{tramp} は、 外部方式(external methods)を介して異なるリモート・ホスト間で 2 つのファイルをコピーするときに、
一時的なローカル・コピーを使用します。 この動作は、 @value{tramp} が十分に処理できない認証の問題によるものです。 ただし、
@option{scp} 接続の場合、 これは変更できます。 ファイルが 2 つの異なるリモート・ホスト @samp{source} と
@samp{target} の間でコピーされ、かつ、

@itemize @minus
@item
変数 @code{tramp-use-scp-direct-remote-copying} が 非 @code{nil} で、かつ、

@item
リモートホスト @samp{source} が、 @file{~/.ssh/config} で @option{RemoteCommand}
オプションを使用せず、かつ、

@item
リモート・ホスト @samp{target} は、 ローカル・ホストとホスト @samp{source} から見たとき同一のホスト・キーを表示し、
かつ、

@item
ホスト @samp{source} で実行されている @command{scp} は、パスワードを必要とせずにホスト @samp{target}
に対して認証できる場合、
@end itemize

@noindent
@value{tramp} は、 以下のように、 ホスト @samp{source} と @samp{target}
の間で直接リモート・コピー(direct remote copying)を適用します

@example
scp -p -T -R -q -r source:/path/to/file target:/path/to/another/file
@end example

これにより、 大きなファイルをコピーするときに、 ローカルの一時ディレクトリもオーバーランから保護されます。

これらの条件が当てはまらず、 @code{tramp-use-scp-direct-remote-copying} が 非 @code{nil}
の場合、 @samp{-R} の代わりにオプション @samp{-3} が使用されます。 .

@c FIXME
@value{tramp} が直接リモート・コピー(direct remote copying)を使用する場合、
パスワード・キャッシュは考慮されません(not consulted)。


@subsection Issues with Cygwin ssh
@cindex cygwin, issues

このセクションはまだ不完全です。 良い解決方法をお待ちしています。

@cindex method @option{sshx} with cygwin
@cindex @option{sshx} method with cygwin

Cygwin の @command{ssh} は、Emacs の Cygwin バージョンでのみ機能します。 互換性を確認するには、 @kbd{M-x
eshell @key{RET}} と入力し、 @kbd{ssh test.host @key{RET}} を開始します。 非互換性により、
以下のメッセージがトリガーされます:

@example
Pseudo-terminal will not be allocated because stdin is not a terminal.
@end example

Cygwin の @command{ssh} の一部の古いバージョンは、 @option{sshx} アクセス方式で動作します。 詳細については、
@uref{https://cygwin.com/faq/} で Cygwin の FAQ を参照してください。

@cindex cygwin and @command{fakecygpty}
@cindex @command{fakecygpty} and cygwin

@uref{https://www.emacswiki.org/emacs/SshWithNTEmacs, the Emacs Wiki} では、
ヘルパー・プログラム @command{fakecygpty} を使用してこの問題を修正する方法が説明されています。

@cindex method @option{scpx} with cygwin
@cindex @option{scpx} method with cygwin

@option{scpx} アクセス方式を使用する場合、 Emacs は、 @file{c:/foo} などの MS Windows ファイル名で
@command{scp} を呼び出すことができます。 しかし、 Cygwin とともにインストールされた @command{scp} のバージョンは、
MS Windows のファイル命名法を認識しないため、 @samp{c} という名前のホストを誤って検索します。

回避策(workaround): @option{scp} のラッパー・スクリプトを記述して、 Windows ファイル名を Cygwin
ファイル名に変換します。

@cindex cygwin and @command{ssh-agent}
@cindex @env{SSH_AUTH_SOCK} and emacs on ms windows
@vindex SSH_AUTH_SOCK@r{, environment variable}

MS Windows でパスワードなしの対話に @command{ssh-agent} を使用する場合、 @option{ssh} 方式は環境変数
@env{SSH_AUTH_SOCK} に依存します。 ただし、 Emacs がデスクトップ・ショートカットから起動され、 かつ、 認証が失敗した場合、
この変数は設定されません。

回避策の１つは、 @command{Pageant} などの MS Windows ベースの SSH エージェントを使用することです。 これは
PuTTY スイートの一部です。

最後の手段は、 シェルから Emacs を起動することです。


@node FUSE setup
@section @acronym{FUSE} setup hints

@acronym{FUSE} ファイル・システムは、 デフォルトで @file{/tmp/tramp.method.user@@host#port}
にマウントされます。 ユーザー名とポート番号はオプションです。 ファイル・システムがすでにマウントされている場合は、 そのまま使用されます。
マウント・ポイントがまだ存在しない場合、 @value{tramp} はこのディレクトリを作成します。

マウント・ポイントは、 接続プロパティ @t{"mount-point"} によって上書きできます(@ref{Predefined connection
information})。 例:

@lisp
@group
(add-to-list 'tramp-connection-properties
             `(,(regexp-quote "@trampfn{sshfs,user@@host,}")
               "mount-point"
               ,(expand-file-name "sshfs.user@@host" user-emacs-directory)))
@end group
@end lisp

@vindex tramp-fuse-unmount-on-cleanup
ユーザー・オプション @code{tramp-fuse-unmount-on-cleanup} が 非 @code{nil} 設定されている場合、
接続のクリーンアップ時または Emacs の終了時にマウント・ポイントがアンマウントされるかどうかを制御します。


@anchor{Setup of rclone method}
@subsection @option{rclone} setup
@cindex rclone setup

@command{rclone} の @command{mount} 操作や @command{coopyto} 操作や
@command{moveto} 操作や @command{about} 操作のデフォルト引数は、方式(method)固有のパラメータとして変数
@code{tramp-methods} で宣言されます。 通常、上書きする必要はありません。

必要に応じて、 これらのパラメーターは、 接続プロパティ @t{"mount-args"} や @t{"copyto-args"} や
@t{"moveto-args"} や @t{"about-args"} として上書きできます(@xref{Predefined connection
information})。 これらはすべて文字列のリストです。

@t{"--dir-cache-time"} の変更には注意してください。 これにより、ファイルの表示が遅くなる可能性があります。


@anchor{Setup of sshfs method}
@subsection @option{sshfs} setup
@cindex sshfs setup

@option{sshfs} 方式は、 @command{sshfs} コマンドに渡される変数 @code{tramp-methods}
でマウント引数を宣言します。 これは文字列のリストのリストであり、 接続プロパティ @t{"mount-args"}
によって上書きできます(@xref{Predefined connection information})。

さらに、 @command{ssh} コマンドを使用して、 リモート・プロセスを実行するための引数も宣言します。 これらは変更する必要はありません。


@node Android shell setup
@section Android shell setup hints
@cindex android shell setup for ssh

@value{tramp} は @option{adb} 方式(method)を使用して Android デバイスにアクセスします。 Android
デバイスは、 USB 接続を介して制限付きシェル・アクセスを提供します。 ローカル・ホストには @command{adb}
プログラムがインストールされている必要があります。 通常、 ファイル @file{@trampfn{adb,,/}} を開くだけで十分です。 その後、
@code{dired} を介してファイル・システムをナビゲートできます。

あるいは、 Android デバイスで @command{sshd} プロセスを実行する @code{Termux} や @code{SSHDroid}
などのアプリケーションは、 これらの設定が調整されていれば、 @option{ssh} ベースの方式(method)を受け入れることができます:

@itemize
@item
Android デバイスは @command{/bin/sh} を提供しないため、 リモート・シェルには @command{sh}
を指定する必要があります。 @command{sh} は、 以下の設定でデバイスにインストールされているシェルを呼び出します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "192.168.0.26") "remote-shell" "sh"))
@end group
@end lisp

@noindent
ここで、 @samp{192.168.0.26} は Android デバイスの IP アドレスです。 (@pxref{Predefined
connection information})。

@item
Android デバイスでは、 ディレクトリ名の前にアプリケーション固有のプレフィックスが付きます。 これは、 @code{Termux} の場合、
@file{/usr/bin} ではなく、 @file{/data/data/com.termux/files/usr/bin} です。
@code{tramp-remote-path} でファイル名を調整する必要があります。 @code{tramp-remote-path}
のファイル名を、 たとえば以下のように connection-local 設定を介して調整する必要があります
@ifinfo
(@pxref{Connection Variables, , , emacs})
@end ifinfo
@ifnotinfo
:
@end ifnotinfo

@lisp
@group
(connection-local-set-profile-variables
 'tramp-connection-local-termux-profile
 `((tramp-remote-path
    . ,(mapcar
	(lambda (x)
	  (if (stringp x) (concat "/data/data/com.termux/files" x) x))
	(copy-tree tramp-remote-path)))))

(connection-local-set-profiles
 '(:application tramp :machine "192.168.0.26")
 'tramp-connection-local-termux-profile)
@end group
@end lisp

@item
Android デバイスがルート化(@samp{rooted})されてない場合は、 一時ファイル用に書き込み可能なディレクトリを指定します:

@lisp
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "192.168.0.26")
		   "tmpdir" "/data/data/com.termux/files/home/tmp"))
@end lisp

@item
コマンド @kbd{C-x C-f @trampfn{ssh,192.168.0.26#2222,} @key{RET}} でリモート接続を開きます。
ここで、 @command{sshd} はポート @samp{2222} でリッスンしています。

(推奨)対応するエントリを @file{~/.ssh/config} ファイルに追加するには、 以下を使用します:

@example
@group
Host android
     HostName 192.168.0.26
     User root
     Port 2222
@end group
@end example

@noindent
上記例で示した IP アドレスの代わりにホスト名 @samp{android} を使用するには、 接続プロパティを以下のように修正します:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "android") "remote-shell" "sh"))
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "android")
		   "tmpdir" "/data/data/com.termux/files/home/tmp"))
(connection-local-set-profiles
 '(:application tramp :machine "android")
 'tramp-connection-local-termux-profile)
@end group
@end lisp

@noindent
これにより、 より簡潔なコマンド @kbd{C-x C-f @trampfn{ssh,android,} @key{RET}}
でリモート接続を開けます。
@end itemize


@node Auto-save File Lock and Backup
@section Auto-save, File Lock and Backup configuration
@cindex auto-save
@cindex file-lock
@cindex backup

@vindex backup-directory-alist
@value{tramp} が、 @samp{root}
が所有するバックアップ・ファイルを他のユーザーがアクセスできる場所に保存することを回避するには、
@code{backup-directory-alist} のデフォルトのバックアップ設定を変更する必要があります。

ファイルが誤って公開される可能性があるシナリオを以下に示します。 デフォルトでは、 @file{~/.emacs.d/backups/}
などの別の場所に変更されない限り、 Emacs は元のファイルと同じディレクトリにバックアップ・ファイルを書き込みます。 このようなディレクトリは、
たとえば、制限付きファイル @file{@trampfn{su,root@@localhost,/etc/secretfile}} を使用する場合、
@value{tramp} によってデフォルトで使用されます。 secretfile のバックアップ・ファイルは、 @samp{root} ではなく、
@value{tramp} からログインしたユーザーが所有するようになりました。

@code{backup-directory-alist} が @code{nil} (デフォルト) の場合、 このような問題は発生しません。

リモート・ファイルのバックアップ機能を「オフ」にして、 @value{tramp} によるバックアップ・ディレクトリへの保存を停止するには、
以下のようにします:

@lisp
@group
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp nil))
@end group
@end lisp

@noindent
例えば、 バックアップの無効化は、 @option{su} と @option{sudo} 方式のみを対象にすることが可能です:

@lisp
@group
(setq backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
             (not
              (let ((method (file-remote-p name 'method)))
                (when (stringp method)
                  (member method '("su" "sudo"))))))))
@end group
@end lisp

@vindex tramp-backup-directory-alist
もう 1 つのオプションは、 ファイル名の前にユーザー名とホスト名を付けて、 より適切なバックアップ・ファイル名を命名することです。 たとえば、
@file{/etc/secretfile} を
@file{~/.emacs.d/backups/!su:root@@localhost:!etc!secretfile} に変換し、
既存のユーザー・オプション @code{backup-directory-alist} より、 @value{tramp} ユーザー・オプション
@code{tramp-backup-directory-alist} を設定します。

次に、 @value{tramp} は、 DIRECTORY 名で構成されるプレフィックスで変換されたファイル名にバックアップします。
このファイル名のプレフィックスは、 DIRECTORY が絶対ローカル・ファイル名である場合にのみ発生します。

@noindent
例:

@lisp
@group
(add-to-list 'backup-directory-alist
             (cons "." "~/.emacs.d/backups/"))
(customize-set-variable
 'tramp-backup-directory-alist backup-directory-alist)
@end group
@end lisp

@noindent
@file{@trampfn{su,root@@localhost,/etc/secretfile}} のバックアップ・ファイル名は以下のようになります
@ifset unified
@file{@trampfn{su,root@@localhost,~/.emacs.d/backups/!su:root@@localhost:!etc!secretfile~}}.
@end ifset
@ifset separate
@file{@trampfn{su,root@@localhost,~/.emacs.d/backups/![su!root@@localhost]!etc!secretfile~}}.
@end ifset

@vindex auto-save-file-name-transforms
バックアップ・ファイルと同様に、 ファイルの命名に関する同様の問題がリモート・ファイルの自動保存に影響します。 自動保存されたファイルは、
ユーザー・オプション @code{auto-save-file-name-transforms} で指定されたディレクトリに保存されます。
デフォルトでは、 これはローカルの一時ディレクトリに設定されています。 しかし、 Debian GNU/Linux の一部のバージョンでは、 これは
Emacs がコンパイルされたソース・ディレクトリを指します。 そのような値を有効なディレクトリにリセットします。

@code{auto-save-file-name-transforms} を @code{nil} に設定して、
自動保存されたファイルを元のファイルと同じディレクトリに保存します。

@vindex tramp-auto-save-directory
あるいは、 ユーザー・オプション @code{tramp-auto-save-directory} を設定して、 すべての自動保存をその場所に向けます。

@c Since Emacs 29.
@vindex remote-file-name-inhibit-auto-save-visited
@code{auto-save-mode} の代替は @code{auto-save-visited-mode} です。 このモードでは、
自動保存は明示的保存と同じです。 リモート・ファイルに対してこの動作を無効にしたい場合は、 ユーザーオプション
@code{remote-file-name-inhibit-auto-save-visited} を 非 @code{nil} に設定してください。

@vindex lock-file-name-transforms
そして、さらに多くの問題を処理する必要があります。 @w{Emacs 28} 以降、 ファイル・ロックは
@code{lock-file-name-transforms} と呼ばれる自動保存ファイルと同様のユーザー・オプションを使用します。 デフォルトでは、
このユーザー・オプションは @code{nil} で、 ファイル・ロックを元のファイルと同じディレクトリに保持することを意味します。

もし、 @code{lock-file-name-transforms}を変更して、
リモート・ファイルのファイル・ロックを別の場所に保持するようにすると、
異なるEmacsセッションや異なるリモート接続から並行してファイルを変更した場合に警告するEmacsの機能が失われます。
このような設定には注意を払ってください。

@vindex remote-file-name-inhibit-locks
@code{remote-file-name-inhibit-locks} を 非 @code{nil} に設定すると、
リモート・ロック・ファイルの作成が完全に抑止されます。

@vindex tramp-allow-unsafe-temporary-files
デフォルトでは、 @value{tramp} は、 @samp{root} 所有のリモート・バックアップまたは、 自動保存または、
ロック・ファイルをローカルの一時ディレクトリに書き込む必要があるかどうかを確認します。 この確認の質問を抑制したい場合は、ユーザー・オプション
@code{tramp-allow-unsafe-temporary-files} を @code{t} に設定してください。


@node Keeping files encrypted
@section Protect remote files by encryption
@cindex Encrypt remote directories

@strong{注意}: @value{tramp} でのファイル暗号化(encryption)は実験的なものです。
本番システムでは使用しないでください！

しばしば、クラウド・ストレージなどのリモート・ディレクトリにあるファイルを保護することが望ましい場合があります。 これを行うには、
@value{tramp} に、 特定のリモート・ディレクトリにコピーされたすべてのファイルを暗号化し、
アクセス時にそのようなファイルを復号化するように指示することができます。 これには、ファイルの内容とファイル名の両方が含まれます。

@value{tramp} はこれを透過的に行います。 ファイルとファイル名はどちらもリモート側で暗号化されていますが、 Emacs
内ではそのような変換が為されていないためアクセスできます。

@cindex @command{encfs}
@cindex @command{encfsctl}
内部的に、 @value{tramp} は @command{encfs} パッケージを使用します。 したがって、 この機能は、
このパッケージがローカル・ホストにインストールされている場合にのみ使用できます。 @value{tramp} は @samp{encfs
mountpoint} を永続的に保持しません。 代わりに、@command{encfsctl} を使用して、 ファイルとファイル名をオンザフライで
暗号化/復号化 します。

@deffn Command tramp-crypt-add-directory name
このコマンドは、 既存のリモート・ディレクトリ @var{name} に暗号化のマークを付けます。
そのディレクトリとすべてのサブディレクトリ内のファイルは、 コピーする前に暗号化され、 そのディレクトリからコピーした後に復号化されます。
ファイル名とディレクトリ名も暗号化されます。
@end deffn

@defopt tramp-crypt-encfs-option
リモート・ディレクトリが暗号化用にマークされている場合、 このディレクトリ内のファイルが最初にアクセスされたときに @command{encfs}
によって初期化されます。 このユーザー・オプションは、 どのデフォルトの @command{encfs} 構成オプションが選択されるかを制御します。
それは @t{"--standard"} または @t{"--paranoia"} です。  詳細については、 @samp{encfs(1)} の
manページを参照してください。

ただし、 @value{tramp} はこれらの構成セットを適合(adapt)させる必要があります。 @code{chainedNameIV}
構成オプションを無効にする必要があります。 そうしないと @value{tramp} はファイル名の暗号化を透過的に処理できませんでした。
@end defopt

暗号化されたリモート・ディレクトリに初めてアクセスすると、 パスワードで保護された @option{encfs} 構成ファイルが作成されます。 これは、
URLエンコードされたディレクトリ名がベース名の一部として、 @file{encfs6.xml} を接尾辞として
@code{user-emacs-directory} に保持します。 たとえば、 リモート・ディレクトリ
@file{@trampfn{nextcloud,user@@host,/path/to/dir}} を暗号化用にマークすると、 構成ファイルは
@code{user-emacs-directory} 内に
@file{tramp-%2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F.encfs6.xml}
として保存されます。 このファイルと対応するパスワードを紛失しないでください。 紛失すると、暗号化されたファイルを復号化する方法はありません。

@defopt tramp-crypt-save-encfs-config-remote
このユーザー・オプションが 非 @code{nil} (デフォルト) の場合、 @option{encfs} 構成ファイル
@file{.encfs6.xml} も暗号化されたリモート・ディレクトリに保持されます。
このファイルのパスワード保護が十分であると考えるかどうかは、 あなた次第です。 利点は、 ユーザー間で構成ファイルを事前に共有することなく、 異なる
Emacs セッション、 異なるユーザーがそのようなリモート・ディレクトリにアクセスできることです。
@end defopt

コマンド @command{encfsctl} は、 暗号化/復号化 の主力であり、 呼び出しごとに構成ファイルのパスワードが必要です。 したがって、
このパスワードを Emacs にキャッシュすることをお勧めします。 これは @code{auth-sources}
を使用して行うことができます(@ref{Using an authentication file})。 エントリには、 url
でエンコードされたディレクトリ名を machineの引数とし、そして、 ローカル・ユーザー名を loginの引数とし、そして、
パスワードをpasswordの引数とすることが必要です。 ポート(port)はオプションで、 ポートを指定する場合は、 portの引数を文字列
@t{"crypt"} にする必要があります。 上記の例では、 認証ファイルに以下のエントリが必要です (@t{"yourname"} は
@code{(user-login-name)} の結果です):

@example
machine %2Fnextcloud%3Auser%40host%3A%2Fpath%2Fto%2Fdir%2F \
        login yourname port crypt password geheim
@end example

ローカル名の部分がクォートされたリモート・ファイル名を使用する場合、 このローカル名と対応するファイルは 暗号化/復号化 されません。
暗号化されたリモート ディレクトリ @file{@trampfn{nextcloud,user@@host,/path/to/dir}} がある場合、
以下のコマンド

@example
@kbd{C-x d @trampfn{nextcloud,user@@host,/path/to/dir}}
@end example

@noindent
プレーン・ファイル名とコマンドを含むディレクトリ・リストを表示し、以下のコマンド

@example
@kbd{C-x d @trampfn{nextcloud,user@@host,/:/path/to/dir}}
@end example

@noindent
は、暗号化されたファイル名を含むディレクトリ・リストが表示され、 ファイルにアクセスすると暗号化された内容が表示されます。 ただし、
暗号化されたファイルと暗号化されていないファイルを同じディレクトリに混在させることはお勧めしません。

@deffn Command tramp-crypt-remove-directory name
このコマンドは、 @code{name} 内のファイルを暗号化しないことを示すために使用する必要があります。
既存の暗号化されたファイルとサブディレクトリは暗号化されたままになります。
@end deffn


@node Usage
@chapter Using @value{tramp}
@cindex using @value{tramp}

@value{tramp} は透過的に動作し、 あたかもローカル・ファイルであるかのようにリモート・ファイルにアクセスします。 ただし、
@value{tramp} は、 形式化されたリモート・ファイル命名構文を使用して、 その機能を透過的に実行します。 この構文は、
アクセス方式(method)や認証やホスト名やファイル名を指定する多くの部品で構成されています。 Ange FTP は同様の構文を使用します。

@cindex type-ahead

瞬時に Emacs でローカル・ファイルを開くのとは異なり、 @value{tramp} でリモート・ファイルを開くと、 最初は時間がかかります。
パスワードまたは認証のプロンプトがミニバッファーに表示されるまでに、 顕著な遅延が生じることがあります。 この遅延の間(gap)に
@kbd{@key{RET}} または他のキーを押すと、 Emacs によって処理されます。 この先行入力機能は Emacs の機能で、
@value{tramp} を使用するとプロンプトが表示されないことがあります。

@menu
* File name syntax::         @value{tramp} file name conventions.
@ifset unified
* Change file name syntax:: Alternative file name syntax.
@end ifset
* File name completion::     File name completion.
* Ad-hoc multi-hops::        Declaring multiple hops in the file name.
* Home directories::         Expanding @file{~} to home directory.
* Remote processes::         Integration with other Emacs packages.
* Cleanup remote connections::  Cleanup remote connections.
* Renaming remote files::    Renaming remote files.
* Archive file names::       Access to files in file archives.
@end menu


@node File name syntax
@section @value{tramp} file name conventions
@cindex file name syntax
@cindex file name examples

@file{@trampfn{method,host,/path/to/file}} は、 方式 @var{method} を使用して、
リモート・ホスト @var{host} 上のファイル @var{/path/to/file} を開きます。

@c We cannot use @trampfn{} in @item.
@table @file
@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}.emacs
ホーム・ディレクトリにあるファイル @file{.emacs} の場合、 ホスト @code{melancholia} で、 方式 @code{ssh}
を使用します。

@item @value{prefix}ssh@value{postfixhop}melancholia.danann.net@value{postfix}.emacs
ホストの完全修飾ドメイン名を使用してファイル @file{.emacs} を指定した場合。

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}~/.emacs
指定のファイル @file{.emacs} に対して、 @file{~} が展開されます。

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}~daniel/.emacs
ホスト @code{melancholia} 上の、 ユーザー @code{daniel} のホーム・ディレクトリにあるファイル
@file{.emacs} の場合。 @file{~<user>} 構文(construct)は、
リモート・ホスト上のそのユーザーのホーム・ディレクトリに展開されます。

@item @value{prefix}ssh@value{postfixhop}melancholia@value{postfix}/etc/squid.conf
ホスト @code{melancholia} 上のファイル @file{/etc/squid.conf} の場合。

@end table

@var{host} は、 @file{@trampfn{ssh,127.0.0.1,.emacs}} または
@file{@trampfn{ssh,@value{ipv6prefix}::1@value{ipv6postfix},.emacs}} のように、
IPv4 または IPv6 アドレスを取ることができます。
@ifset unified
構文上の理由から、 IPv6 アドレスは角括弧(@file{@value{ipv6prefix}} と
@file{@value{ipv6postfix}})で囲む必要があります。
@end ifset

デフォルトでは、 @value{tramp} は現在のローカル・ユーザー名をリモート・ホストへのログイン用のリモート・ユーザー名として使用します。
適切な構文を使用して別の名前を指定すると、 このデフォルトの動作が上書きされます:
@file{@trampfn{method,user@@host,path/to/file}}

@file{@trampfn{ssh,daniel@@melancholia,.emacs}} は、 ホスト @code{melancholia} 上の
ユーザー @code{daniel} のホーム・ディレクトリにあるファイル @file{.emacs} を @code{ssh}
方式経由でアクセスします。

ポート番号の指定は、 ホスト名に @file{#<port>} を付加してください(例:
@file{@trampfn{ssh,daniel@@melancholia#42,.emacs}})。

すべての方式(method)と、ユーザー名と、ホスト名と、 ポート番号と、 ローカル名の部分はオプションです(@xref{Default
Method}, @xref{Default User}, @xref{Default Host})。
@ifset unified
構文上の理由から、 デフォルトの方式は疑似方式(pseudo method) @file{-} で指定する必要があります。
@end ifset


@ifset unified
@node Change file name syntax
@section Alternative file name syntax
@cindex change file name syntax
@cindex alternative file name syntax

@ref{File name syntax} で説明されているのはデフォルトの構文(@code{default} syntax)であり、 Emacs
の起動後にアクティブになります。 ただし、これは変更できます。

@deffn Command tramp-change-syntax syntax
このコマンドは、 @value{tramp} がリモート・ファイル名に使用する構文を変更します。 値 @code{default} のほかに、
@var{syntax} には以下の値を指定できます

@itemize
@item @code{simplified}
@cindex simplified syntax

このリモート・ファイル名の構文は、 Ange FTP@ で使用される構文に似ています。 リモート・ファイル名の形式は、
@code{@value{prefix}user@@host@value{postfix}path/to/file} です。 @code{user@@}
部分はオプションで、 方式(method)は @ref{Default Method} によって決定されます。

@item @code{separate}
@cindex separate syntax

@clear unified
@set separate
@include trampver.texi
このリモート・ファイル名の構文は、 XEmacs テキスト・エディターに由来します。 リモートファイル名の形式は
@code{@trampfn{method,user@@host,path/to/file}} です。 @code{method} および
@code{user@@} 部分はオプションです。
@clear separate
@set unified
@include trampver.texi
@end itemize
@end deffn

@defvar tramp-file-name-regexp
この変数は、 選択したリモート・ファイル名の構文にマッチする正規表現を保持します。 @code{tramp-change-syntax}
を呼び出すたびに値が変わります。 ただし、 この変数を外部パッケージで使用することはお勧めしません。 @code{file-remote-p}
の呼び出しの方がより適切です。
@ifinfo
@pxref{Magic File Names, , , elisp}.
@end ifinfo
@end defvar
@end ifset


@node File name completion
@section File name completion
@cindex file name completion

@value{tramp} は、 @value{tramp} ファイル名コンポーネントを補完することができます。 対象は、方式名(method
name)と、ユーザー名と、ホスト名と、リモート・ホストにあるファイル名です。 ユーザー名とホスト名の補完は、 ファイル名の補完が
@code{basic} または @code{emacs21} または @code{emacs22}
のスタイルのいずれかである場合にのみ有効になります。
@ifinfo
@xref{Completion Styles, , , emacs}.
@end ifinfo

たとえば、 @kbd{C-x C-f @value{prefixwithspace} s @key{TAB}} と打ち込むと、
@value{tramp} 補完の選択肢が以下のように表示されます

@example
@group
@multitable @columnfractions .2 .2 .2 .2 .2
@item @c
  sbin/ @tab @c
  @value{prefixhop}scp@value{postfix} @tab @c
  @value{prefixhop}scpx@value{postfix} @tab @c
  @value{prefixhop}sftp@value{postfix} @tab @c
  @value{prefixhop}sg@value{postfix}
@item @c
  @value{prefixhop}smb@value{postfix} @tab @c
  srv/ @tab @c
  @value{prefixhop}ssh@value{postfix} @tab @c
  @value{prefixhop}sshx@value{postfix} @tab @c
  @value{prefixhop}su@value{postfix}
@item @c
  @value{prefixhop}sudo@value{postfix} @tab @c
  sys/
@end multitable
@end group
@end example

@samp{@value{prefixhop}ssh@value{postfixhop}} は、 それぞれの方式(method)の可能な補完であり、
@samp{sbin/} は、 ローカル・ホスト上のディレクトリ @file{/sbin} を表します。

@c bug#50387
@samp{@value{prefix}ssh@value{postfixhop}} へのミニバッファ補完のために @kbd{s h
@value{postfixhop}} と打ち込んでください。 @kbd{@key{TAB}} を打ち込むと、 @value{tramp} が
@file{~/.ssh/config} ファイルから抽出したホスト名達を表示します。
たとえば以下のようになります@footnote{@code{substring} や @code{flex} などの一部の補完スタイルでは、 末尾の
@samp{@value{postfixhop}} の後に少なくとも 1 文字を入力する必要があります。}。

@example
@group
@multitable @columnfractions .5 .5
@item @c
  @value{prefixhop}ssh@value{postfixhop}127.0.0.1@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}192.168.0.1@value{postfix}
@item @c
  @value{prefixhop}ssh@value{postfixhop}@value{ipv6prefix}::1@value{ipv6postfix}@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}localhost@value{postfix}
@item @c
  @value{prefixhop}ssh@value{postfixhop}melancholia.danann.net@value{postfix} @tab @c
  @value{prefixhop}ssh@value{postfixhop}melancholia@value{postfix}
@end multitable
@end group
@end example

上記のリストからホストを選択し、 そのホスト上のファイル名の補完へと進めます。

構成(@pxref{Customizing Completion})にユーザー名が含まれている場合、 補完リストはユーザー名も考慮します。

@vindex tramp-completion-use-auth-sources
@code{auth-sources} 検索(@pxref{Using an authentication file})の結果が補完候補に追加されます。
この検索は、 たとえば @file{~/.authinfo.gpg} 認証ファイルのパスフレーズ要求が原因で煩わしい場合があります。
ユーザー・オプション @code{tramp-completion-use-auth-sources} は、
補完時にそのような検索を実行するかどうかを制御します。

以前にアクセスしたリモート・ホストまたは、 接続が永続的に保持されているホスト(@pxref{Connection caching})は、
補完リストに含まれます。

リモート・ホスト名の補完後、 リモート・ホスト上のファイル名を補完します。  二重スラッシュ @file{//} による抑制(kill)が
@value{tramp} ファイル名構文のファイル名部分のみを抑制(kill)することを除いて、
ローカル・ホスト・ファイル補完と同じように機能します。 トリプル・スラッシュは、 デフォルトの動作を表します。
@ifinfo
@xref{Minibuffer File, , , emacs}.
@end ifinfo

@noindent
例:

@example
@group
@kbd{C-x C-f @trampfn{ssh,melancholia,/usr/local/bin//etc} @key{TAB}}
     @print{} @trampfn{ssh,melancholia,/etc}

@kbd{C-x C-f @trampfn{ssh,melancholia,//etc} @key{TAB}}
     @print{} @trampfn{ssh,melancholia,/etc}

@kbd{C-x C-f @trampfn{ssh,melancholia,/usr/local/bin///etc} @key{TAB}}
     @print{} /etc
@end group
@end example


@node Ad-hoc multi-hops
@section Declaring multiple hops in the file name
@cindex multi-hop, ad-hoc
@cindex proxy hosts, ad-hoc

@value{tramp} ファイル名構文は、 @code{tramp-default-proxies-alist} 構成セットアップを使用せずに、
複数のプロキシによるその場限りの(ad-hoc)指定に対応できます(@pxref{Multi-hops})。

各プロキシは、 リモート・ホストの指定からファイル名の部分を除いたものと同じ構文を使用して指定されます。 各ホップは @samp{|}
で区切られています。 プロキシを開始ホストから宛先のリモート・ホスト名とファイル名へと連鎖(chain)させます。 たとえば、 単一のプロキシ
@samp{bird@@bastion} を @samp{you@@remotehost} 上のリモート・ファイルにホップするには以下のようにします:

@example
@c @kbd{C-x C-f @trampfn{ssh@value{postfixhop}bird@@bastion|ssh,you@@remotehost,/path} @key{RET}}
@kbd{C-x C-f @value{prefix}ssh@value{postfixhop}bird@@bastion|@c
ssh@value{postfixhop}you@@remotehost@value{postfix}/path @key{RET}}
@end example

関連する各方式(method)は、 インライン方式(inline method)である必要があります(@pxref{Inline methods})。

@value{tramp} はその場限りの定義(ad-hoc definitions on the fly)を
@code{tramp-default-proxies-alist} に追加し、 その Emacs セッション中に再利用できるようにします。 以後、
@value{tramp} での同一のリモート・ホストへの後続は、 ショートカット形式
@samp{@trampfn{ssh,you@@remotehost,/path}} を使用できます。 その場限りの定義は、 コマンド
@kbd{M-xtramp-cleanup-all-connections @key{RET}}  によって
@code{tramp-default-proxies-alist} から削除されます(@pxref{Cleanup remote
connections})。

@defopt tramp-save-ad-hoc-proxies
今後の Emacs セッションのためにその場限りの定義(ad-hoc definitions)を
@code{tramp-default-proxies-alist} に自動的に保存するには、
@code{tramp-save-ad-hoc-proxies} を 非 @code{nil} に設定します。

@lisp
(customize-set-variable 'tramp-save-ad-hoc-proxies t)
@end lisp
@end defopt

その場限りのプロキシ(ad-hoc proxies)は @code{tramp-default-proxies-alist} のように
@code{%h} または @code{%u} のパターンを取ることができます。 ファイル名は
@samp{@trampfn{ssh@value{postfixhop}%h|su,remotehost,}} は、 ホスト
@samp{remotehost} 上の @option{ssh} セッションから始まる、 ホスト @samp{remotehost} 上のユーザー
@samp{root} に展開されます。

一方、 後続のホップでホスト名が指定されていない場合は、それより前のホップのホスト名が再利用されます。 したがって、
@samp{@trampfn{ssh@value{postfixhop}remotehost|su,,}} は先程の例と同じです。


@node Home directories
@section Expanding @file{~} to home directory

リモート・ホストのホーム・ディレクトリは、 チルダ @file{~} として入力できます。 可能であれば、
リモート・ホスト上のリモート・ユーザーのホーム・ディレクトリに展開されます。 例:

@example
@group
@trampfn{ssh,user@@host,~}
@result{} @trampfn{ssh,user@@host,/home/user}
@end group
@end example

これは一般に、 @option{ssh} のような方式(methods)と @option{sudoedit} で機能します。 これらの方式では、
以下のように別のユーザーのホーム・ディレクトリを展開することもできます

@example
@group
@trampfn{sudoedit,,~otheruser}
@result{} @trampfn{sudoedit,root@@localhost,/home/otheruser}
@end group
@end example

その他の方式(method)では、 サポートされている場合にのみホーム・ディレクトリを展開できます。 これは、 たとえば @option{sftp}
方式で発生します。 リモート・ファイル名に共有ディレクトリ(share directory)を必要とする方式(@option{afp},
@option{smb})は、 この共有ディレクトリの値をホーム・ディレクトリとして使用します:

@example
@group
@trampfn{smb,user@@host,~}
@result{} @trampfn{smb,user@@host,/share}
@end group
@end example

@value{tramp} は、 どの共有ディレクトリを使用する予定かを事前に知ることはできないため、
この展開は共有ディレクトリが既に使用されている場合にのみ適用できます。

@option{adb} 方式と @option{rclone} 方式と @option{sshfs} 方式は、
ホーム・ディレクトリの展開をまったくサポートしていません。  ただし、 @value{tramp} はホーム・ディレクトリをキャッシュに保持します。
したがって、 これらの方式は、 接続プロパティ(connection
property)を介してホーム・ディレクトリを展開するように構成できます(@xref{Predefined connection
information})。 例:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{sshfs,user@@randomhost.your.domain,}")
                   "~user" "/home/user"))
@end group
@end lisp

リモート・ファイル名に @samp{user} 部分が含まれていない場合は、 代わりに接続プロパティ @t{"~"} を使用する必要があります。


@node Remote processes
@section Integration with other Emacs packages
@cindex @code{compile}
@cindex @code{recompile}

@value{tramp} は、リモート・ファイル名を見つけるために、 リモート・ホスト上での新しい実行プロセスの開始をサポートします。
リモート・ホストの Emacs パッケージでは @value{tramp} を使用するために特に何か変更する必要はありません。

このタイプの統合は @option{ftp} 方式(method)では機能せず、 また、 @code{start-file-process}
で指定されている pty 関連付けもサポートしていません。

@code{process-file} と @code{start-file-process} は、変数
@code{default-directory} が下記のようにリモートの場合、 リモート・ホストで動作します:

@lisp
@group
(let ((default-directory "/ssh:remote.host:"))
  (start-file-process "grep" (get-buffer-create "*grep*")
                      "/bin/sh" "-c" "grep -e tramp *"))
@end group
@end lisp

@vindex process-file-return-signal-string
ローカル・プロセスの場合、 @code{process-file} は、 プロセスが中断されたときに、
プロセスの終了コード、またはシグナルを説明する文字列を返します。 リモート・プロセスが中断されたかどうかを確実に判断することはできないため、
@code{process-file} は常にその終了コードを返します。 ユーザー・オプション
@code{process-file-return-signal-string} が非 @code{nil} の場合、
@code{process-file} は 128 より大きいすべての終了コードをプロセスが中断されたことを示すものとして扱い、
対応する文字列を返します。

リモート・ファイルシステムはローカル・ホストにマウントされており、 @value{tramp} は @code{default-directory}
を変更してそれにアクセスするため、 このリモート・プロセス処理は @acronym{GVFS} (@pxref{GVFS-based methods})
には適用されません。

@value{tramp} は、 コマンドがリモート・ファイルまたはディレクトリ・バッファで実行されると、 リモート・プロセスを開始します。 現在、
パッケージ @file{shell.el} と @file{eshell.el} と @file{compile.el} (@code{compile}
や @code{grep} のようなコマンド) と @file{gud.el} (@code{gdb} または @code{perldb}) は
@value{tramp} で動作するように統合(integrate)されています。

@vindex INSIDE_EMACS@r{, environment variable}
@value{tramp} は、 常にリモート・プロセスの @env{INSIDE_EMACS} 環境変数を変更します。 デフォルトでは、
この環境変数は Emacs のバージョンを示します。 @value{tramp} は独自のバージョン文字列を追加するため、
@samp{27.2,tramp:2.4.5.1} のようになります。 ただし、 @samp{27.2,comint,tramp:2.4.5.1}
のように、 他のパッケージもこの環境変数に名前を追加する場合があります。

@value{tramp} がリモートでコマンドを見つける(find)には、 最初の接続時に @value{tramp}
によって設定されたデフォルトの検索パス(search path)を介してアクセスできる必要があります。 または、 絶対パスを使用するか、
@code{tramp-remote-path} (@pxref{Remote programs}) を拡張します:

@lisp
@group
(add-to-list 'tramp-remote-path "~/bin")
(add-to-list 'tramp-remote-path "/appli/pub/bin")
@end group
@end lisp

@vindex tramp-remote-process-environment
リモート・ホストのリモート・プログラムの環境に合わせて、 ユーザー・オプション
@code{tramp-remote-process-environment} をカスタマイズします。
@code{tramp-remote-process-environment} は @code{process-environment}
と同様に構造化された文字列のリストで、 各要素は @samp{ENVVARNAME=VALUE} の形式の文字列です。

@file{~/.profile} などのローカル構成ファイルを介して設定されたローカル・ホストの環境変数との競合を回避するには、
@samp{ENVVARNAME=} を使用してリモート環境の設定を解除(unset)します。

@noindent
エントリを追加するには、@code{add-to-list} を使用します:

@lisp
(add-to-list 'tramp-remote-process-environment "JAVA_HOME=/opt/java")
@end lisp

@vindex HISTORY@r{, environment variable}
@code{tramp-remote-process-environment} リストの既存の値を変更または削除することは、
制限されたリモート・ホストでは実行できない場合があります。 たとえば、 一部のシステム管理者は @env{HISTORY}
環境変数の変更を許可していません。 @value{tramp} を使用するときにこのような制限に対応するには、ローカルの @file{.emacs}
ファイルで以下のコードを使用して @code{tramp-remote-process-environment} を修正します:

@lisp
@group
(let ((process-environment tramp-remote-process-environment))
  (setenv "HISTORY" nil)
  (setq tramp-remote-process-environment process-environment))
@end group
@end lisp

@vindex ENV@r{, environment variable}
@env{ENV} 環境変数を設定すると、 一部のシェルでは初期化ファイルの読み込みを命じます。 デフォルトでは @value{tramp}
はこれを無効にします。 あなたが以下のLisp式をevalすることで、 この動作をオーバーライドできます

@lisp
@group
(let ((process-environment tramp-remote-process-environment))
  (setenv "ENV" "$HOME/.profile")
  (setq tramp-remote-process-environment process-environment))
@end group
@end lisp

@code{tramp-remote-process-environment} に加えて、 あなたは
@code{process-environment} を let バインドすることで、 個々のリモート・プロセス呼び出しの環境変数を設定できます。
@value{tramp} は @code{process-environment}
のグローバル・デフォルト値に存在しないすべてのエントリを適用します(競合する場合は
@code{tramp-remote-process-environment} 設定をオーバーライドします)。 例:

@lisp
@group
(let ((process-environment (cons "HGPLAIN=1" process-environment)))
  (process-file @dots{}))
@end group
@end lisp

@vindex HGPLAIN@r{, environment variable}
この方法での let バインディングは、 呼び出されるプロセスがローカルであるかリモートであるかに関係なく機能します。 これは、
@value{tramp} が @env{HGPLAIN} 設定のみを追加し、 ローカル・プロセスが
@code{process-environment} の値全体を @env{HGPLAIN} の新しい値と共に取得するためです。

@value{tramp} がリモートで実行できるように他の Emacs パッケージを統合するには、 バグレポートを提出してください(@xref{Bug
Reports})。


@subsection Running remote programs that create local X11 windows

@vindex DISPLAY@r{, environment variable}
リモート・プログラムがローカル・ホストで X11 ウィンドウを作成できるようにするには、 リモート・ホストの @env{DISPLAY}
環境変数をローカルの @file{.emacs} ファイルで以下のように設定します:

@lisp
@group
(add-to-list 'tramp-remote-process-environment
             (format "DISPLAY=%s" (getenv "DISPLAY")))
@end group
@end lisp

@noindent
@code{(getenv "DISPLAY")} は、リモート・ホストが X11
ウィンドウのインタラクションをリダイレクトできるローカル・ホストの認識可能な名前を返す必要があります。
何らかの理由で認識可能な名前を照会できない場合は、 @code{(getenv "DISPLAY")} をハードコードされた固定名に置き換えます。
注意: ここで X11 表示名に @code{:0} を使用すると、期待どおりに動作しないことに注意してください。

@vindex ForwardX11@r{, ssh option}
@vindex ForwardX11Trusted@r{, ssh option}
別の方法として、 ローカル・ホストの @file{~/.ssh/config} で @option{ForwardX11 yes} または
@option{ForwardX11Trusted yes} を指定します。


@subsection Running @code{shell} on a remote host
@cindex @code{shell}

@samp{windows-nt} と @samp{gnu/linux} など、 オペレーティング・システムが異なる 2 つのホスト間で
@value{tramp} を使用する場合は、 @code{explicit-shell-file-name} を適切なシェル名に設定します。
このオプションにより、 リモート・シェル・プログラムの正しい名前(correct name)が保証されます。

@code{explicit-shell-file-name} が @code{nil} と等しい場合、 @code{shell}
を対話的に呼び出すと、 シェル名の入力を促されます。

接続ローカル変数(connection-local variables)を使用して、 異なるリモート・ホストに対して
@code{explicit-shell-file-name} の異なる値を設定できます。
@ifinfo
@xref{Connection Variables, , , emacs}.
@end ifinfo

@lisp
@group
(connection-local-set-profile-variables
  'remote-bash
  '((explicit-shell-file-name . "/bin/bash")
    (explicit-bash-args . ("-i"))))
@end group

@group
(connection-local-set-profile-variables
  'remote-ksh
  '((explicit-shell-file-name . "/bin/ksh")
    (explicit-ksh-args . ("-i"))))
@end group

@group
(connection-local-set-profiles
  '(:application tramp :protocol "ssh" :machine "localhost")
  'remote-bash)
@end group

@group
(connection-local-set-profiles
  `(:application tramp :protocol "sudo"
    :user "root" :machine ,(system-name))
  'remote-ksh)
@end group
@end lisp


@subsection Running @code{shell-command} on a remote host
@cindex @code{shell-command}

@code{shell-command} は、 リモート・ホストでコマンドを同期的または非同期的に実行し、
出力をローカル・ホストのバッファーに表示します。 例:

@example
@group
@kbd{C-x C-f @trampfn{sudo,,} @key{RET}}
@kbd{M-& tail -f /var/log/syslog.log @key{RET}}
@end group
@end example

@command{tail} コマンドは、 バッファ名が変数 @code{shell-command-buffer-name-async}
の値であるローカル・バッファに、継続的に出力します。

@kbd{M-x auto-revert-tail-mode @key{RET}} も同様に実行され、 継続的な出力が示されます。

@vindex shell-file-name
@vindex shell-command-switch
@code{shell-command} は、 実行するシェルを決定するために、 ユーザー・オプション @code{shell-file-name}
と変数 @code{shell-command-switch} を使用します。 リモート・ホストの場合、 デフォルト値はそれぞれ
@file{/bin/sh} と @option{-c} です(@file{/system/bin/sh} を使用する @option{adb}
メソッドを除く)。 前のセクションの変数と同様に、 これらの変数は接続ローカル変数(connection-local
variables)を介して変更できます。

@vindex async-shell-command-width
@vindex COLUMNS@r{, environment variable}
Emacs がユーザー・オプション @code{async-shell-command-width} をサポートしている場合 (@w{Emacs 27}
以降)、 @value{tramp} は非同期シェルコマンドのこのユーザー・オプションの値を考慮します。 それはコマンド出力の表示列数を指定します。
同期シェル・コマンドの場合、 環境変数 @env{COLUMNS} を @code{tramp-remote-process-environment}
に追加することで、 同様の効果を得ることができます。


@subsection Running @code{eshell} on a remote host
@cindex @code{eshell}

@value{tramp} は @file{eshell.el} に統合されていて、 これはコマンド・プロンプトにで、リモート・ホスト上の対話型の
eshell セッションを有効にします。 あなたはモジュール @code{eshell-tramp} を
@code{eshell-modules-list} に追加する必要があります。 以下は、 リモートホストで @kbd{M-x eshell
@key{RET}} を開いた後のやり取りの例です:

@example
@group
@b{~ $} cd @trampfn{sudo,,/etc} @key{RET}
@b{@trampfn{sudo,root@@host,/etc} $} hostname @key{RET}
host
@b{@trampfn{sudo,root@@host,/etc} $} id @key{RET}
uid=0(root) gid=0(root) groups=0(root)
@b{@trampfn{sudo,root@@host,/etc} $} find-file shadow @key{RET}
#<buffer shadow>
@b{@trampfn{sudo,root@@host,/etc} $}
@end group
@end example

@code{eshell} には、 @file{*eshell*} バッファのデフォルト・ディレクトリを正しく設定するカスタム @code{su}
および @code{sudo} コマンドが追加されました。 @value{tramp} は、 このディレクトリのエントリで
@code{tramp-default-proxies-alist} を黙って更新します(@pxref{Multi-hops}):

@example
@group
@b{~ $} cd @trampfn{ssh,user@@remotehost,/etc} @key{RET}
@b{@trampfn{ssh,user@@remotehost,/etc} $} find-file shadow @key{RET}
File is not readable: @trampfn{ssh,user@@remotehost,/etc/shadow}
@b{@trampfn{ssh,user@@remotehost,/etc} $} sudo find-file shadow @key{RET}
#<buffer shadow>
@end group

@group
@b{@trampfn{ssh,user@@remotehost,/etc} $} su - @key{RET}
@b{@trampfn{su,root@@remotehost,/root} $} id @key{RET}
uid=0(root) gid=0(root) groups=0(root)
@b{@trampfn{su,root@@remotehost,/root} $}
@end group
@end example


@anchor{Running a debugger on a remote host}
@subsection Running a debugger on a remote host
@cindex @file{gud.el}
@cindex @code{gdb}
@cindex @code{perldb}

@file{gud.el} は、シンボリック・デバッガーへの統一されたインターフェイスを提供します
@ifinfo
(@pxref{Debuggers, , , emacs})。
@end ifinfo
@ifnotinfo
。
@end ifnotinfo
@value{tramp} は、 リモート・ファイル名を伴って @code{gdb} を呼び出すことにより、 リモート・ホストでデバッグを実行できます:

@example
@group
@kbd{M-x gdb @key{RET}}
@b{Run gdb (like this):} gdb -i=mi @trampfn{ssh,host,~/myprog} @key{RET}
@end group
@end example

リモートの @code{gdb} プロセスと @code{gdb-inferior}
プロセスはリモート・ホスト上の同一プロセス・グループに属していないため、 警告が表示されますが、 無視して続行できます:

@example
&"warning: GDB: Failed to set controlling terminal: Operation not permitted\n"
@end example

@noindent
但し、そのために、 デバッグ対象プロセスの I/O に制限があります。

相対ファイル名は、 リモートのデフォルト・ディレクトリに基づいています。  @file{myprog.pl} が
@file{@trampfn{ssh,host,/home/user}} に存在する場合、 有効な呼び出し方法は以下のとおりです:

@example
@group
@kbd{M-x perldb @key{RET}}
@b{Run perldb (like this):} perl -d myprog.pl @key{RET}
@end group
@end example

@command{perl -d /home/user/myprog.pl} のように、
リモート・ファイル名のローカル部分だけを指定することはできません。

デバッグするプログラムの引数はリテラルである必要があり、 相対パスまたは絶対パスを使用できますが、リモート・パスは使用できません。


@subsection Running remote processes on MS Windows hosts
@cindex @command{winexe}
@cindex @command{powershell}

@command{winexe} はリモートの MS Windows ホストでプロセスを実行し、 @value{tramp} は
@code{process-file} と @code{start-file-process} にそれを使用できます。

@code{tramp-smb-winexe-program} は、 ローカルの @command{winexe} コマンドを指定します。
@value{tramp} からトリガーされたプロセスを実行するには、 リモート・ホスト上の Powershell V2.0 が必要です。

@code{explicit-shell-file-name} と @code{explicit-*-args} は、 @kbd{M-x shell
@key{RET}} によって MS Windows ホストで適切なリモート・シェルを開くことができるように、 適切に設定する必要があります。
@command{cmd} を開くには、 以下のように設定します:

@lisp
@group
(setq explicit-shell-file-name "cmd"
      explicit-cmd-args '("/q"))
@end group
@end lisp

@noindent
@command{powershell} をリモート シェルとして開くには、 以下を使います:

@lisp
@group
(setq explicit-shell-file-name "powershell"
      explicit-powershell-args '("-file" "-"))
@end group
@end lisp


@subsection Remote process connection type
@vindex process-connection-type
@cindex tramp-process-connection-type

非同期プロセスは、 疑似 tty (pseudo tty)を使用するかどうかで動作が異なります。 変数
@code{process-connection-type} によって制御され、 その値は @code{t} や @code{pty} (疑似 tty
使用) 、または @code{nil} や @code{pipe} (疑似 tty 使用しない) です。 @value{tramp}
はリモート・ホストでシェルを実行することを前提としており、疑似ttyが必要です。 したがって、 変数
@code{tramp-process-connection-type} を宣言し、 この情報をリモート・プロセスに伝達します。 デフォルト値は
@code{t} で、変更する必要はありません。 リモート疑似 tty の名前は、 関数 @code{process-tty-name}
によって返されます。

@code{start-file-process} によって開始されたリモートプロセスが疑似 tty を使用してはいけない場合、 これは
@code{process-connection-type} を @code{nil} または @code{pipe}
に設定することによって要求できます。 開始されたプロセスにはまだ疑似 tty がありますが、 キャリッジ・リターン文字列(carriage return
characters)の改行(newline)への変換を抑制するなど、 いくつかの端末プロパティが変更されています。

関数 @code{make-process} を使用すると、 @code{:connection-type}
キーワードを使用して明示的にこれを制御できます。 このキーワードを使用しない場合、 代わりに
@code{process-connection-type} の値が適用されます。


@subsection Process properties of asynchronous remote processes
@cindex Asynchronous remote processes

利用可能な場合、 @value{tramp} はプロセス・プロパティを非同期プロパティのプロセス・オブジェクトに追加します。 ただし、
これらすべてのプロパティが設定されているとは限りません。

@itemize
@item @code{remote-tty}

これは @var{process} がリモート・ホストで使用する端末の名前です。 つまり、読み書きOKです。

@item @code{remote-pid}

リモート・ホストで実行されたコマンドのプロセス ID。 これはシグナルをリモートで送信するときに使用されます。

@item @code{remote-command}

@code{make-process} または @code{start-file-process}
によって呼び出されたリモート・コマンドで文字列のリストです(プログラムとその引数)。 これには、 @value{tramp}
がコマンドの周りで行う追加のシェルへの糖衣(shell sugar)は含まれていません。 これを確認するには、@value{tramp}
@ref{Traces and Profiles, traces} を調べる必要があります。
@end itemize

@findex list-system-processes
@findex process-attributes
関数 @code{list-system-processes} および @code{process-attributes} は、
それぞれのリモート・ホストのシステム・プロセスに関する情報を返します。 この情報を取得するために、 以下の定数によって駆動されるコマンド
@command{ps} を使用します:

@defvr Constant tramp-process-attributes-ps-args
これは、 @command{ps} が呼び出される時の引数(文字列)のリストです。 デフォルト値は、 GNU/Linux
リモート・ホストに適しています。
@end defvr

@defvr Constant tramp-process-attributes-ps-format
これは @command{ps} の出力を解釈(interpret)するためのコンスセル @code{(@var{key} . @var{type})}
のリストです。 @var{key} は @code{process-attributes} の出力で使われるキーに @code{pid}
キーを加えたもので、 @var{type} は @command{ps} が返すそれぞれの値です。 @var{type} は以下のいずれかです


@multitable {@bullet{} @code{numberp}} {--- a string of @var{number} width, could contain spaces}
@item @bullet{} @code{numberp} @tab --- 数値
@item @bullet{} @code{stringp} @tab --- 空白(spaces)無しの文字列
@item @bullet{} @var{number}
@tab --- @var{number} 幅の文字列。 空白(spaces)を含むことができます
@item @bullet{} @code{nil} @tab --- 行末(end of line)までの文字列
@end multitable

デフォルト値は、 GNU/Linux リモート・ホストに適しています。
@end defvr

もし、 たとえば、 @code{tramp-process-attributes-ps-args} が @code{("-eww" "-o"
"pid,euid,euser,egid,egroup,comm:40,state")} として宣言されている場合、 @command{ps}
コマンドの出力は以下のようになります

@smallexample
@group
    PID  EUID EUSER     EGID EGROUP   COMMAND                                  S
      1     0 root         0 root     systemd                                  S
   1610     0 root         0 root     NFSv4 callback                           S
   @dots{}
@end group
@end smallexample

対応する @code{tramp-process-attributes-ps-format} の値は以下のようになります

@smallexample
@group
@code{((pid . numberp) (euid . numberp) (user . stringp)
 (egid . numberp) (group . stringp) (comm . 40) (state . stringp))}
@end group
@end smallexample

@vindex tramp-adb-connection-local-default-ps-profile
@vindex tramp-adb-connection-local-default-ps-variables
@vindex tramp-connection-local-bsd-ps-profile
@vindex tramp-connection-local-bsd-ps-variables
@vindex tramp-connection-local-busybox-ps-profile
@vindex tramp-connection-local-busybox-ps-variables
@vindex tramp-connection-local-darwin-ps-profile
@vindex tramp-connection-local-darwin-ps-variables
@code{tramp-process-attributes-ps-args} と
@code{tramp-process-attributes-ps-format} のデフォルト値は、
接続ローカル変数(connection-local variables)で上書きできます。
@ifinfo
@xref{Connection Variables, , , emacs}.
@end ifinfo
これは、 @value{tramp} の @option{adb} 方式(method)ではすでに行われています。
@code{tramp-adb-connection-local-default-ps-profile} および
@code{tramp-adb-connection-local-default-ps-variables} を参照してください。

リモート BSD システム用と、リモート macOS システム用と、@command{busybox} で実装されたリモート @command{ps}
コマンド用に、 さらに 3 つの事前定義された接続ローカル変数(connection-local variables)のセットがあります。 これらは
@code{tramp-connection-local-*-ps-profile} および
@code{tramp-connection-local-*-ps-variables} と呼ばれます。 これらは以下のように使用します

@lisp
@group
(connection-local-set-profiles
 '(:application tramp :machine "mybsdhost")
 'tramp-connection-local-bsd-ps-profile)
@end group
@end lisp

@cindex proced
@vindex proced-show-remote-processes
@code{proced} を呼び出すときにリモート・システム・プロセスのリストを表示したい場合は、 ユーザー・オプション
@code{proced-show-remote-processes} を 非 @code{nil} に設定するか、 バッファにリモート
@code{default-directory} がある場合は、 @kbd{C-u - M-x proced @key{RET}}
のような負の引数(negative argument)を指定してそのコマンドを呼び出します。


@anchor{Improving performance of asynchronous remote processes}
@subsection Improving performance of asynchronous remote processes
@cindex Asynchronous remote processes
@findex make-process
@findex start-file-process

@value{tramp} による @code{make-process} および @code{start-file-process} の実装は、
初期化と、 プロセス呼び出し毎に、 深刻なオーバーヘッドがあります。 これは、 これは、
リモート・ホストに接続するときの対話型ダイアログ(パスワードの提供など)の処理と、 初期環境セットアップに必要です。

場合によっては、 これは必要ありません。 リモート・シェルの起動後にコマンドを実行する代わりに、 コマンドを直接実行するだけで十分です。
@value{tramp} は、 @code{make-process} と @code{start-file-process}
の代替実装によってこれをサポートします。 これは、 @code{nil} 以外の値に設定する必要がある接続プロパティ
@t{"direct-async-process"} によってトリガーされます(@xref{Predefined connection
information})。 例:

@lisp
@group
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "@trampfn{ssh,user@@host,}")
                   "direct-async-process" t))
@end group
@end lisp

リモート・ホストが複数のホップ経由で接続されている場合(@pxref{Multi-hops})、 @value{tramp}
で直接非同期プロセスを使用することはできません。 この場合、 @value{tramp} は従来の実装にフォールバックします。

さらに、 このアプローチには以下の制限があります:

@itemize
@item
@file{tramp-adb.el} と @file{tramp-sh.el} と @file{tramp-sshfs.el}
で定義された接続方式(connection methods)に対してのみ機能します。

@item
対話的なユーザー認証はサポートしていません。 @option{ssh} ベースの方法では、 @command{ssh-agent}
のようなパスワード・エージェントを使用するか、 または公開鍵認証を使用するか、 または @option{ControlMaster}
オプションを使用することで、 これを回避できます。

@item
@option{RemoteCommand} オプションを使用する @option{ssh} ベースの方式(methods)には適用できません。

@item
@code{interrupt-process} で強制終了(kill)することはできません。

@item
@code{process-tty-name} 経由でリモート端末名を報告しません。

@item
プロセス・プロパティ @code{remote-pid} を設定しません。

@item
@code{tramp-remote-path} を使用しません。
@end itemize

パフォーマンスをさらに向上させるために、@code{make-process} または @code{start-file-process}
を実行するときに @code{tramp-verbose} を 0 にバインドすることをお勧めします。 さらに、 @value{tramp} による
@option{ControlMaster} オプションの処理をバイパスするために、
@code{tramp-use-ssh-controlmaster-options} を @code{nil} に設定し、
@file{~/.ssh/config} 内であなた独自の設定を使用することができます。


@node Cleanup remote connections
@section Cleanup remote connections
@cindex cleanup

@value{tramp} は、 リモート接続をフラッシュするいくつかの方法を提供します。

@deffn Command tramp-cleanup-connection vec &optional keep-debug keep-password
このコマンドは、 すべての接続関連オブジェクトをフラッシュします。  @var{vec} は、リモート接続の内部表現です。
このコマンドを対話的に呼び出すと、 アクティブなリモート接続がミニバッファーに一覧表示されます。 各接続の形式は
@file{@trampfn{method,user@@host,}} です。

リモート接続をフラッシュすると、 パスワード・キャッシュ(@pxref{Password
handling})とファイル・キャッシュと接続キャッシュ(@pxref{Connection caching})と recentf
キャッシュも消去されます
@ifinfo
(@pxref{File Conveniences, , , emacs}).
@end ifinfo
@ifnotinfo
。
@end ifnotinfo
また、 セッション・タイマー(@pxref{Predefined connection information})と接続バッファー(connection
buffers)も削除します。

@var{keep-debug} が 非 @code{nil} の場合、 デバッグバッファ(debug buffer)は保持(keep)されます。
@var{keep-password} が 非 @code{nil} の場合、 パスワード・キャッシュを保存(preserve)します。
@end deffn

@deffn Command tramp-cleanup-this-connection
@code{tramp-cleanup-connection} と同じく、 現在のバッファのリモート接続オブジェクトをフラッシュします。
@end deffn

@deffn Command tramp-cleanup-all-connections
@code{tramp-cleanup-connection} と同じく、 すべてのアクティブなリモート接続オブジェクトをフラッシュします。
このコマンドは、 アドホック・プロキシー(ad-hoc proxy)定義(@pxref{Ad-hoc multi-hops})も削除します。

@end deffn

@deffn Command tramp-cleanup-all-buffers
@code{tramp-cleanup-all-connections} と全く同様に、
リモート接続に関連するすべてのバッファを強制終了(kill)するだけでなく、 すべてのリモート接続とアドホック・プロキシー(ad-hoc
proxy)定義がクリーンアップされます。
@end deffn


@node Renaming remote files
@section Renaming remote files
@cindex save remote files

しばしば特定のリモート・ホストを訪問しているバッファのファイル内容を保存することが望ましい場合があります。 これは、 たとえば、
ローカル・ホストがネットワーク統合を変更し、 リモート・ホストに到達できなくなった場合に発生する事があります。

@deffn Command tramp-rename-files source target
すべてのバッファで、 訪問ファイル名(visiting file name)を @var{source} から @var{target}
に置き換えます。 @var{source} はリモート・ディレクトリ名であり、 ローカル名の部分も含めることができます。 @var{target} は
@var{source} を置き換えるディレクトリ名です。 多くの場合、 @var{target} は別のホストのリモート・ディレクトリ名ですが、
ローカル・ディレクトリ名の場合もあります。 @var{target} にローカル部分がない場合、@var{source} のローカル部分が使用されます。

@var{target} が @code{nil} の場合、 @code{tramp-default-rename-alist}
の最初の一致に従って選択されます。 対話的に呼び出された場合、 この一致は選択の初期値として提供されます。

@var{source} に一致する @code{buffer-file-name} を持つすべてのバッファで、 この名前は @var{source}
を @var{target} に置き換えることによって変更されます。 これは、@code{set-visited-file-name}
を呼び出すことによって適用されます。 新しい @code{buffer-file-name} は、 ミニバッファーで変更するように促されます。
バッファーは変更済みとしてマークされ、 明示的に保存する必要があります。

ユーザー・オプション @code{tramp-confirm-rename-file-names} が @code{nil} の場合、
ファイル名の変更は確認なしで行われます。 これには、 @code{tramp-default-rename-alist}
に、一致するエントリが必要です。

@var{source} で識別されるリモート接続に関連して、 ファイルを訪問していない、 または @var{source}
に一致しないファイルを訪問しているリモート・バッファは、 変更されません。

@var{target} は対話的に @code{tramp-default-rename-alist} から選択され、 前置引数が 非
@code{nil} の場合は確認(confirm)を行いません。

@var{source} によって識別されるリモート接続は、 @code{tramp-cleanup-connection}
によってフラッシュされます。
@end deffn

@deffn Command tramp-rename-these-files target
訪問中のファイル名を @var{target} に置き換えます。 現在のバッファは、 リモート接続に関連付けられている必要があります。
同一ディレクトリ名で、ファイルを訪問しているすべてのバッファで、 バッファ・ファイル名が変更されます。

@var{target} は対話的に @code{tramp-default-rename-alist} から選択され、 前置引数が 非
@code{nil} の場合は確認(confirm)を行いません。
@end deffn

@defopt tramp-default-rename-alist
リモート・バッファ・ファイル名を変更するためのデフォルトのターゲット。 これはコンスセル @code{(source . target)} の
alist です。 最初に一致した項目は、 @code{tramp-rename-files}
を介してソースからバッファ・ファイル名をリネームするために適用されるターゲットを指定します。 @code{source}
は、リモート・ファイル名に一致する正規表現です。  @code{target} はディレクトリ名である必要があり、
リモートの場合もあります(@samp{@trampfn{method,user@@host,}} など、 デフォルトで @value{tramp}
が推測するリモート・ディレクトリを含む)。

@code{target} にはパターン @code{%m} または @code{%u} または @code{%h} を含めることができます。 これらは
@code{tramp-rename-files} を呼び出す時に @code{source}
の方式(method)名またはユーザー名またはホスト名に置き換えられます。 

@code{source} は、 評価される Lisp式 にすることもできます。 結果は、 常に一致する正規表現として解釈される文字列または
@code{nil} でなければなりません。

エントリ例:

@lisp
@group
("@trampfn{ssh,badhost,/path/to/dir/}"
 . "@trampfn{ssh,goodhost,/path/to/another/dir/}")
@end group
@end lisp

これは、 ディレクトリ名の変更を含め、 @samp{badhost} のバッファ・ファイル名を @samp{goodhost} に名前変更します。

@lisp
("@trampfn{ssh,.+\\\\.company\\\\.org,}" @c
. "@value{prefix}ssh@value{postfixhop}multi.hop|@c
ssh@value{postfixhop}%h@value{postfix}")
@end lisp

上記は、 @samp{@trampfn{ssh,multi.hop,}} 経由で @samp{company.org}
のホストにすべての接続をルーティングします。 これは、 会社のネットワークの外で Emacs を使用する場合に役立つ場合があります。

@lisp
(nil . "~/saved-files/%m:%u@@%h/")
@end lisp

これは、 リモート接続の方式(method)名とユーザー名とホスト名を含むディレクトリ名で、 すべてのリモート・ファイルをローカルに保存します。
@end defopt

@defopt tramp-confirm-rename-file-names
@code{tramp-rename-files} または @code{tramp-rename-these-files}
にて、バッファ・ファイル名の名前変更の確認を行う必要があるかどうかを設定します。
@end defopt


@node Archive file names
@section Archive file names
@cindex file archives
@cindex archive file names
@cindex method archive
@cindex archive method

@value{tramp} は、 ファイル・アーカイブ内のファイルへの透過的なアクセスも提供します。 これは、 @acronym{GVFS, the
GNOME Virtual File System} をインストールしたホストでのみ可能です(@ref{GVFS-based methods})。
内部的には、 ファイル・アーカイブは @acronym{GVFS} @option{archive} 方式(method)を介してマウントされます。

ファイル・アーカイブは、 @file{/path/to/dir/file.EXT} の種類の通常のファイルです。 拡張子 @samp{.EXT} は、
ファイル・アーカイブのタイプを識別します。 Dired でアーカイブの内容を調べるには、 ファイル名をディレクトリのように開きます (つまり、
@file{/path/to/dir/file.EXT/} を開きます)。 アーカイブ・ファイル名(archive file
name)と呼ばれるファイル・アーカイブ内のファイルの名前は、 @file{/path/to/dir/file.EXT/dir/file} です。

ほとんどの @ref{Magic File Names, , magic file name operations, elisp} は、
アーカイブ・ファイル名に対して実装されています。 例外は、 ファイル・アーカイブに書き込む操作と、プロセスに関する操作のすべてです。
したがって、以下のような関数

@lisp
(copy-file "/path/to/dir/file.tar/dir/file" "/somewhere/else")
@end lisp

@noindent
は、 すぐに使用できます。  これは、 ファイル名の補完や、 アーカイブ・ファイル名も受け入れる @code{dired} や、
@code{ediff} などのライブラリにも当てはまります。

@vindex tramp-archive-suffixes
ファイル・アーカイブは、 ファイル名拡張子 @samp{.EXT} で識別されます。  @acronym{GVFS} は内部でライブラリ
@code{libarchive(3)} を使用するため、 このライブラリで受け入れられるすべての接尾辞は、 アーカイブ・ファイル名にも機能します。
受け入れられる接尾辞は定数 @code{tramp-archive-suffixes} にリストされています。 以下にリストします

@itemize
@item @samp{.7z} ---
7-Zip archives
@cindex @file{7z} file archive suffix
@cindex file archive suffix @file{7z}

@item @samp{.apk} ---
Android package kits
@cindex @file{apk} file archive suffix
@cindex file archive suffix @file{apk}

@item @samp{.ar} ---
UNIX archiver formats
@cindex @file{ar} file archive suffix
@cindex file archive suffix @file{ar}

@item @samp{.cab}, @samp{.CAB} ---
Microsoft Windows cabinets
@cindex @file{cab} file archive suffix
@cindex @file{CAB} file archive suffix
@cindex file archive suffix @file{cab}
@cindex file archive suffix @file{CAB}

@item @samp{.cpio} ---
CPIO archives
@cindex @file{cpio} file archive suffix
@cindex file archive suffix @file{cpio}

@item @samp{.crate} ---
Cargo (Rust) packages
@cindex @file{crate} file archive suffix
@cindex file archive suffix @file{crate}

@item @samp{.deb} ---
Debian packages
@cindex @file{deb} file archive suffix
@cindex file archive suffix @file{deb}

@item @samp{.depot} ---
HP-UX SD depots
@cindex @file{depot} file archive suffix
@cindex file archive suffix @file{depot}

@item @samp{.epub} ---
Electronic publications
@cindex @file{epub} file archive suffix
@cindex file archive suffix @file{epub}

@item @samp{.exe} ---
Self extracting Microsoft Windows EXE files
@cindex @file{exe} file archive suffix
@cindex file archive suffix @file{exe}

@item @samp{.iso} ---
ISO 9660 images
@cindex @file{iso} file archive suffix
@cindex file archive suffix @file{iso}

@item @samp{.jar} ---
Java archives
@cindex @file{jar} file archive suffix
@cindex file archive suffix @file{jar}

@item @samp{.lzh}, @samp{.LZH} ---
Microsoft Windows compressed LHA archives
@cindex @file{lzh} file archive suffix
@cindex @file{LZH} file archive suffix
@cindex file archive suffix @file{lzh}
@cindex file archive suffix @file{LZH}

@item @samp{.msu}, @samp{.MSU} ---
Microsoft Windows Update packages
@cindex @file{msu} file archive suffix
@cindex @file{MSU} file archive suffix
@cindex file archive suffix @file{msu}
@cindex file archive suffix @file{MSU}

@item @samp{.mtree} ---
BSD mtree format
@cindex @file{mtree} file archive suffix
@cindex file archive suffix @file{mtree}

@item @samp{.odb}, @samp{.odf}, @samp{.odg}, @samp{.odp}, @samp{.ods},
@samp{.odt} --- OpenDocument formats
@cindex @file{odb} file archive suffix
@cindex @file{odf} file archive suffix
@cindex @file{odg} file archive suffix
@cindex @file{odp} file archive suffix
@cindex @file{ods} file archive suffix
@cindex @file{odt} file archive suffix
@cindex file archive suffix @file{odb}
@cindex file archive suffix @file{odf}
@cindex file archive suffix @file{odg}
@cindex file archive suffix @file{odp}
@cindex file archive suffix @file{ods}
@cindex file archive suffix @file{odt}

@item @samp{.pax} ---
Posix archives
@cindex @file{pax} file archive suffix
@cindex file archive suffix @file{pax}

@item @samp{.rar} ---
RAR archives
@cindex @file{rar} file archive suffix
@cindex file archive suffix @file{rar}

@item @samp{.rpm} ---
Red Hat packages
@cindex @file{rpm} file archive suffix
@cindex file archive suffix @file{rpm}

@item @samp{.shar} ---
Shell archives
@cindex @file{shar} file archive suffix
@cindex file archive suffix @file{shar}

@item @samp{.tar}, @samp{.tbz}, @samp{.tgz}, @samp{.tlz}, @samp{.txz},
@samp{.tzst} --- (Compressed) tape archives
@cindex @file{tar} file archive suffix
@cindex @file{tbz} file archive suffix
@cindex @file{tgz} file archive suffix
@cindex @file{tlz} file archive suffix
@cindex @file{txz} file archive suffix
@cindex @file{tzst} file archive suffix
@cindex file archive suffix @file{tar}
@cindex file archive suffix @file{tbz}
@cindex file archive suffix @file{tgz}
@cindex file archive suffix @file{tlz}
@cindex file archive suffix @file{txz}
@cindex file archive suffix @file{tzst}

@item @samp{.warc} ---
Web archives
@cindex @file{warc} file archive suffix
@cindex file archive suffix @file{warc}

@item @samp{.xar} ---
macOS XAR archives
@cindex @file{xar} file archive suffix
@cindex file archive suffix @file{xar}

@item @samp{.xpi} ---
XPInstall Mozilla addons
@cindex @file{xpi} file archive suffix
@cindex file archive suffix @file{xpi}

@item @samp{.xps} ---
Open XML Paper Specification (OpenXPS) documents
@cindex @file{xps} file archive suffix
@cindex file archive suffix @file{xps}

@item @samp{.zip}, @samp{.ZIP} ---
ZIP archives
@cindex @file{zip} file archive suffix
@cindex @file{ZIP} file archive suffix
@cindex file archive suffix @file{zip}
@cindex file archive suffix @file{ZIP}
@end itemize

@vindex tramp-archive-compression-suffixes
ファイル・アーカイブは、 追加の圧縮接尾辞によって識別される圧縮も可能です。 有効な圧縮接尾辞は、定数
@code{tramp-archive-compression-suffixes} にリストされていて、それらは @samp{.bz2},
@samp{.gz}, @samp{.lrz}, @samp{.lz}, @samp{.lz4}, @samp{.lzma}, @samp{.lzo},
@samp{.uu}, @samp{.xz}, @samp{.Z}, and @samp{.zst} です。
有効なアーカイブ・ファイル名(archive file name)は、 @file{/path/to/dir/file.tar.gz/dir/file}
です。  @file{/path/to/dir/file.tar.gz.uu/dir/file} のように、
複数の接尾辞を続けて使用することもできます。

@vindex tramp-archive-all-gvfs-methods
アーカイブ・ファイル名(archive file name)は、
@file{/ftp:anonymous@@ftp.gnu.org:/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL}
のように、 リモート・ファイル名にすることができます。  すべてのファイル操作は @acronym{GVFS} 操作に内部的にマップされることで、
ファイル・アーカイブのローカル・コピーを最初にダウンロードする必要がないため、 @code{tramp-gvfs}
によってサポートされるリモート・ファイル名のパフォーマンスが向上します。 たとえば、 @samp{/sftp:user@@host:...} は、
同様の @samp{/scp:user@@host:...} よりも優れたパフォーマンスを発揮します。 @code{tramp-gvfs}
がサポートする方式名(method names)の完全なリストについては、 定数
@code{tramp-archive-all-gvfs-methods} を参照してください。

@code{url-handler-mode} が有効になっている場合、
@file{https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/INSTALL} のような URL
を介してアーカイブにアクセスできます。 これにより、 以下のような複雑なファイル操作が可能になります

@lisp
@group
(progn
  (url-handler-mode 1)
  (ediff-directories
   "https://ftp.gnu.org/gnu/tramp/tramp-2.4.4.tar.gz/tramp-2.4.4"
   "https://ftp.gnu.org/gnu/tramp/tramp-2.4.5.tar.gz/tramp-2.4.5" ""))
@end group
@end lisp

以下のように、 ファイル・アーカイブ内のファイル・アーカイブにアクセスすることも可能です

@lisp
@group
(progn
  (url-handler-mode 1)
  (find-file
   "https://ftp.debian.org/debian/pool/main/c/coreutils/\
coreutils_8.28-1_amd64.deb/control.tar.gz/control"))
@end group
@end lisp

@vindex tramp-archive-enabled
ファイル・アーカイブを無効にするには、 以下のLisp式を init ファイルに追加します:

@lisp
(customize-set-variable 'tramp-archive-enabled nil)
@end lisp


@node Bug Reports
@chapter Reporting Bugs and Problems
@cindex bug reports

@value{tramp} の開発チームは、 バグや問題の解決に積極的に取り組んでおり、 機能のリクエストや提案をお待ちしています。

@value{tramp} のメーリング・リストは、@value{tramp} を使用した作業、 問題の解決、 議論、 @value{tramp}
に関する一般的な議論に関するアドバイスや情報を提供する場所です。

@value{tramp} のメーリング・リストはモデレートされていますが、 サブスクライバーでなくてもモデレーターの承認を得て投稿できます。
祝祭日を挟むと、 この承認手順に 48 時間かかる場合があります。

@email{@value{tramp-bug-report-address}} はメーリング・リストです。 このアドレスに送信されたメッセージは、
すべてのサブスクライバーに送信されます。 これは、 購読リクエストを送信するアドレスではありません。

メーリング・リストを購読するには、 @uref{https://lists.gnu.org/mailman/listinfo/tramp-devel/,
the @value{tramp} Mail Subscription Page} にアクセスしてください。

@ifset installchapter
バグ・レポートを送信する前に、 まず、 テスト・スイートを実行してください(@ref{Testing})。
@end ifset

@findex tramp-bug
バグまたは問題が @xref{Frequently Asked Questions} で、すでに対処されているかどうかを確認してください。

@kbd{M-x Tramp-bug @key{RET}} を実行して、 システムの詳細と @value{tramp}
インストールの詳細を含むバッファを生成します。 これらの詳細をバグ・レポートに含めてください。

バグ・レポートには、 問題を再現するために必要な手順をできるだけ詳細に説明する必要があります。 これらの詳細には、 リモート・ホストの設定と、
存在する特別または固有の条件を含める必要があります。

問題を再現する最小限のテスト・ケースを含めます。 これにより、 開発チームは最適な解決策を見つけ、 関係のない回り道を避けることができます。

キャッシュ関連の問題を除外するには、 テストを実行する前にすべてのキャッシュをフラッシュしてください(@ref{Cleanup remote
connections})。 あるいは、 @command{emacs -Q} で開始されたクリーンな Emacs
セッションで問題を再現することも、分析には良い場合があります。 その場合、 @value{tramp} は持続性ファイル(persistency
file)をロードせず(@pxref{Connection caching})、 また、 @file{auth-source.el}
からのパスワードを使用しません(@pxref{Password handling})。 後者は @option{sudoedit}
方式(method)では発生しませんが、 そうでなければ使い物になりません。

あなたが @value{tramp} の GNU ELPA バージョンを使用している場合、 @command{emacs -Q} はインストール済みの
ELPA パッケージを無視するため、 明示的にロードする必要があります。 以下のように(バージョン番号を付加して)呼び出します

@example
$ emacs -Q -l ~/.emacs.d/elpa/tramp-2.4.5.1/tramp-autoloads
@end example

バグ・レポートに @value{tramp} のメッセージを含める場合は、 @file{~/.emacs}
ファイルでおしゃべり(verbosity)レベルを 6 (@pxref{Traces and Profiles, Traces}) に上げてから、
バグへの手順を繰り返します。 @file{*tramp/foo*} および @file{*debug Tramp/foo*}
バッファの内容をバグ・レポートに含めます。 両方のバッファには、 分析に関連する @acronym{ASCII} 以外の文字が含まれる可能性があり、
バグ・レポートに添付ファイルとしてバッファを追加します。 これは、 メール転送中の改行を避けるためにも必要です。

あなたが Emacs からメッセージを送信すると、 これらのバッファをバグ・レポートに追加するか問われます。 外部メール・プログラムを使用する場合は、
これらのバッファをファイルに保存し、 そのメール・プログラムで追加する必要があります。

@strong{注意} この段階では、 おしゃべり(verbosity)レベルを 6 を超えて大きくする必要はありません。 また、 おしゃべりレベルが
6 以上の場合、 ファイルとディレクトリの内容がデバッグ・バッファに含まれることにも注意してください。 @value{tramp}
に入力されたパスワードがそこに含まれることは決してありません。


@node Frequently Asked Questions
@chapter Frequently Asked Questions
@cindex frequently asked questions
@cindex FAQ

@itemize @bullet
@item
正式名称は「Tramp」ですか、それとも「@value{tramp}」ですか？

正式名称は ``Tramp'' です。 これは、コメントや、 docstringや、 @value{tramp} に関するあらゆる場所で使用されます。

けれども、 歴史的な理由から、 この @value{tramp} マニュアルでは ``@@sc@{Tramp@}'' としてフォーマットされています。
@ifinfo
(@pxref{Smallcaps, , , texinfo})
@end ifinfo
だからその部分が違って見えるんです。


@item
最新版の @value{tramp} はどこにありますか？

@value{tramp} は以下で入手できます:

@noindent
@uref{https://ftp.gnu.org/gnu/tramp/}

@noindent
@value{tramp} の GNU プロジェクト・ページ はここです:

@noindent
@uref{https://savannah.gnu.org/projects/tramp/}


@item
どのシステムで動作しますか？

このパッケージは、 @w{Emacs 26} と @w{Emacs 27} と @w{Emacs 28} と @w{Emacs 29}
で正常に動作します。

Unix および Unix 系のシステムが主要なリモート・ターゲットですが、 @value{tramp} は、 MS Windows 7/8/10
などの他のプラットフォームへの接続にも同等の成功を収めています。


@item
@value{tramp} をスピードアップさせるにはどうすればいいですか？

@value{tramp} はバックグラウンドで多くのことを行いますが、
その一部はネットワーク速度や、リモート・ホストの応答速度や、認証の遅延に依存します。 これらの操作中は @value{tramp}
の応答性が低下します。 @value{tramp} の設定の範囲内で可能ないくつかの提案は以下のとおりです:

内部方式(internal methods)よりも、 高速な @option{scp} などの外部方式(external
method)を使用してください。

@value{tramp} は、 ホストとファイルに関するリモート情報をキャッシュする場所である、 ファイル
@code{tramp-persistency-file-name} を保持します。 キャッシングはデフォルトで有効になっています。
無効にしないでください。

@vindex remote-file-name-inhibit-cache
@value{tramp} の制御外でリモート・ファイルが個別に更新される事が無い場合、
@code{remote-file-name-inhibit-cache} (訳注:リモート・ファイル名のキャッシュ禁止)を @code{nil}
に設定します。 リモート・ディレクトリまたはファイルが @value{tramp} とは無関係に更新される場合、
そのキャッシュ(cache)のクリーンアップが必要になります。

遅延を避けるためにバージョン管理を無効にします:

@lisp
@group
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
@end group
@end lisp

バージョン管理をリモートで使用したいために、 バージョン管理の無効が極端すぎる場合は、 @code{vc-handled-backends}
を必要なものだけに削ってください。 たとえば、 以下のようにします:

@lisp
(setq vc-handled-backends '(SVN Git))
@end lisp

過剰なトレースを無効にします。 @code{tramp-verbose} を 3 以下に設定します。 デフォルトは 3 です。
バグを探すときに一時的にトレース・レベルを上げます。


@item
@value{tramp} がリモート・ホストに接続しません

@value{tramp} がリモート・ホストに接続しない主な理由は 3 つ:

@itemize @minus
@item
プロンプトの不明なキャラクターコード

@value{tramp} は、 正確なパースのために、 リモート・ホスト上で明確に認識できるプロンプトを必要とします。
色付けのためのエスケープ・シーケンスを含むシェル・プロンプトは、 パースの問題を引き起こします。
正規表現を使用してプロンプト検出をカスタマイズするためには @ref{Remote shell setup} を参照してください。

リモート・ホストのプロンプトが認識されているかどうかを確認するには、 @value{tramp} connection buffer
@file{*tramp/foo*} に切り替え、 カーソルをバッファーの先頭に置き、 以下の式を適用します:

@example
@kbd{M-: (re-search-forward (concat tramp-shell-prompt-pattern "$")) @key{RET}}
@end example

カーソルがバッファの一番下にあるプロンプトに移動していない場合、 @value{tramp} はプロンプトを認識できていません。

zsh は左側プロンプト(left-hand side prompt)と右側プロンプト(right-hand side
prompt)を並行して使用するため、 リモート・ホストで zsh を使用する場合は、 zsh ライン・エディタを無効にします。 以下の行を
@file{~/.zshrc} に追加します:

@example
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
@end example

これは、 @env{TERM} 環境変数の値として、@code{tramp-terminal-type} のデフォルト値、 @t{"dumb"}
(訳注:ダム端末)を使用します。 @env{TERM} に別の値を使用したい場合は、 @code{tramp-terminal-type} と、
この行を、 適宜変更してください。

代わりに、 リモート・ログイン・シェルを明示的に設定することもできます。 このテクニックの議論については、@ref{Remote shell
setup} を参照してください。

リモート・ホストで fish shell を使用する場合、 @file{~/.config/fish/config.fish}
に以下を追加して凝ったフォーマット(fancy formatting)を無効にします:

@example
@group
function fish_prompt
  if test $TERM = "dumb"
     echo "\$ "
  else
     @dots{}
  end
end
@end group
@end example

リモート・ホストで WinSSHD を使用している場合、 @value{tramp} は奇妙なプロンプト設定(strange prompt
settings)を認識しません。

同様の問題は、 シェルの起動時に独自のエスケープ・コードを送信する iTerm2 シェル統合にも存在します。 これは、 あなたの
@file{~/.profile} のそれぞれの統合コード断片(snippet)を以下のように変更することで抑制できます:

@example
@group
[ $TERM = "dumb" ] || \
test -e "$@{HOME@}/.iterm2_shell_integration.bash" && \
source "$@{HOME@}/.iterm2_shell_integration.bash"
@end group
@end example

そして最後に、 bash の readline はコマンドに対して @samp{C-j} のようなキー・バインディングを使用すべきではありません。
@file{~/.inputrc} でこれを無効にします:

@example
@group
$if term=dumb
# Don't bind Control-J or it messes up @value{tramp}.
$else
"\C-j": next-history
$endif
@end group
@end example

@item
ログイン後のキャラクター・エコー

@value{tramp} は、 @command{stty -echo} コマンドでリモート・ホストからのエコーを抑制します。 しかし、
有害な制御文字を含むリモート・ホストからのウェルカム・メッセージを抑制するのには遅すぎる場合があります。 @option{sshx} または
@option{scpx} 方式(method)を使用すると、 疑似 tty が割り当てられるため、この問題を回避できます(@xref{Inline
methods})。

@item
@value{tramp} が 500 文字を超える文字列の転送を中断する

@code{tramp-chunksize} を 500 に設定して、この問題を回避します。 これは、 HP-UX と FreeBSD と Tru64
Unix システムでの @code{process-send-string} の実装の誤りに関連しています。
@code{tramp-chunksize} のドキュメントを参照して、 これが必要な場合を確認してください。

@value{tramp} によってアクセスされるファイルの @code{file-precious-flag} を @code{t} に設定して、
最初に一時ファイルに保存することにより、 チェックサムを使用してファイルの内容をチェックします。
@ifinfo
@pxref{Saving Buffers, , , elisp}.
@end ifinfo

@lisp
@group
(add-hook
 'find-file-hook
 (lambda ()
   (when (file-remote-p default-directory)
     (set (make-local-variable 'file-precious-flag) t))))
@end group
@end lisp
@end itemize


@item
chroot 環境で @value{tramp} が失敗(fail)する

@vindex tramp-local-host-regexp
ローカル・ホストに接続するとき、 @value{tramp} はいくつかの内部最適化を使用するため、 chroot 環境で Emacs
を実行すると失敗します。 これらの最適化を無効にするには、 ユーザー・オプション @code{tramp-local-host-regexp} を
@code{nil} に設定します。


@item
@value{tramp} は @acronym{SSH} セキュリティ・キーをサポートしていますか？

はい。  @command{OpenSSH} は、 特殊なキー・タイプ @option{*-sk} を介して @acronym{FIDO}
ハードウェア・デバイスのサポートを追加しました。 @value{tramp} は、 それらに対する追加のハンドシェイク・メッセージをサポートします。
これには、少なくとも @command{OpenSSH} 8.2 と、 @acronym{FIDO} @acronym{U2F}
と互換性のあるセキュリティ・キー (yubikey または solokey または nitrokey など) が必要です。


@item
@value{tramp} が、 SMB1 接続プロトコルを実行している Samba または MS Windows ホストに接続しません

@vindex tramp-smb-options
@command{smbclient} の最近のバージョンは、 デフォルトで古い接続プロトコルをサポートしていません。 そのようなホストに接続するには、
それぞれのオプションを追加します:

@lisp
(add-to-list 'tramp-smb-options "client min protocol=NT1")
@end lisp

@strong{注意} 非推奨の接続プロトコルを使用するとセキュリティ上の問題が発生するため、 絶対に必要な場合にのみ使用するようにしてください。


@item
@value{tramp} でファイル名の補完が機能しません

リモート・シェルからの @acronym{ANSI} エスケープ・シーケンスは、@value{tramp}
によるリモート・バッファの解析でエラーを引き起こす可能性があります。

これが当てはまるかどうかをテストするには、 リモート・シェルを開き、 @command{ls} の出力がカラーかどうかを確認します。

リモート・ホストからの @acronym{ANSI} エスケープ・シーケンスを無効にするには、 リモート・ホストの @file{.bashrc} または
@file{.profile} で @samp{--color=yes} または @samp{--color=auto} を無効にします。
このエイリアスをオンまたはオフにして、 ファイル名の補完が機能するかどうかを確認します。


@item
ファイル名の補完が、 非常にたくさんのファイルがあるディレクトリでは機能しません

これは、 @samp{*.c} などのワイルド・カード指定を展開するシェルの機能を使用するグロブ(globbing)に関連している可能性があります。
多数のファイルを含むディレクトリの場合、 グロブした結果がシェルのコマンド・ラインの長さの制限を超えてハングする可能性があります。
@value{tramp} はグロブを使用します。

グロブがハングするかどうかをテストするには、 リモート・ホストでシェルを開き、 @command{ls -d * ..?* > /dev/null}
を実行します。

テストするリモート・シェルが、 そのホストに接続するときに @value{tramp} が使用するのと同一のシェル(@command{/bin/sh}
または @command{ksh} または @command{bash})であることを確認してください。


@item
@value{tramp} がファイル転送を完了した後に通知を受け取る方法は？

@file{~/.emacs} に以下のコードを記述して、 リモート・ホストから読み書きした後に Emacs のビープ音を鳴らします。

@lisp
@group
(defadvice tramp-handle-write-region
  (after tramp-write-beep-advice activate)
  "Make @value{tramp} beep after writing a file."
  (interactive)
  (beep))
@end group

@group
(defadvice tramp-handle-do-copy-or-rename-file
  (after tramp-copy-beep-advice activate)
  "Make @value{tramp} beep after copying a file."
  (interactive)
  (beep))
@end group

@group
(defadvice tramp-handle-insert-file-contents
  (after tramp-insert-beep-advice activate)
  "Make @value{tramp} beep after inserting a file."
  (interactive)
  (beep))
@end group
@end lisp


@item
@samp{root} 権限で作業しているときに視覚的な警告を表示するにはどうすればよいですか？ モードラインでホストを表示するには？

@cindex @value{tramp} theme
@vindex tramp-theme-face-remapping-alist
Emacs の パッケージ・マネージャー を介して GNU ELPA から @file{tramp-theme} をインストールします。
@kbd{M-x load-theme @key{RET} Tramp @key{RET}} で有効にします。  さらなるカスタマイズは、
ユーザー・オプション @code{tramp-theme-face-remapping-alist} で説明されています。


@item
リモート・ホストがディレクトリ・リストのデフォルト・オプションを認識しない

Emacsはローカル・ホストに基づいて @command{dired} オプションを計算しますが、 リモート・ホストが同じ @command{ls}
コマンドを理解できない場合は、 以下のようにフックで設定します:

@lisp
@group
(add-hook
 'dired-before-readin-hook
 (lambda ()
   (when (file-remote-p default-directory)
     (setq dired-actual-switches "-al"))))
@end group
@end lisp


@item
リモート・ホストの @file{~/.sh_history} が成長しまくるのはなぜですか？

@vindex tramp-histfile-override
@vindex HISTFILE@r{, environment variable}
@vindex HISTFILESIZE@r{, environment variable}
@vindex HISTSIZE@r{, environment variable}
リモート・シェルが @value{tramp} によってトリガーされたチルダ展開(tilde expansions)を保存しているため、
ヒストリー・ファイルはおそらく急速に成長しています。 @value{tramp} は、 ユーザー・オプション
@code{tramp-histfile-override} でこの動作を抑制することができます。 @code{t} に設定すると、 環境変数
@env{HISTFILE} が設定解除され、環境変数 @env{HISTFILESIZE} および @env{HISTSIZE} が 0
に設定されます。 これを @command{bash} 5.0.0 と一緒に使用しないでください。 この @command{bash} にはバグがあり、
@command{bash} を終了(die)させてしまいます。

代わりに @code{tramp-histfile-override} を文字列にすることもできます。 このとき、 環境変数
@env{HISTFILE} がそのファイル名に設定されます。 @file{/dev/null} に設定するときは注意してください。 これにより、
@command{bash} をリモート・シェルとして使用すると、 望ましくない結果が生じる可能性があります。

別のアプローチとして、 @code{tramp-histfile-override} を @code{nil} に設定して、 @value{tramp}
による @env{HISTFILE} の処理をまったく無効にすることです。 この場合、 以下のシェル・コードを @file{.bashrc} または
@file{.kshrc} に配置することで、 履歴の保存を無効にすることができます:

@example
@group
if [ -f $HOME/.sh_history ] ; then
   /bin/rm $HOME/.sh_history
fi
if [ "$@{HISTFILE-unset@}" != "unset" ] ; then
   unset HISTFILE
fi
if [ "$@{HISTSIZE-unset@}" != "unset" ] ; then
   unset HISTSIZE
fi
@end group
@end example

@option{ssh} ベースの方式(method)では、 以下の行を @file{~/.ssh/environment} に追加します:

@example
HISTFILE=/dev/null
@end example


@item
リモート・ファイルはどこに捨てられますか？

Emacsはファイルを削除する代わりにゴミ箱(trash)に入れる事ができます
@ifinfo
(@ref{Misc File Ops, Trashing , , emacs}).
@end ifinfo
@ifnotinfo
。
@end ifnotinfo
リモート・ファイルは常にローカルのごみ箱に移動されますが(trashed to the local trash)、
リモートの暗号化ファイル(@pxref{Keeping files encrypted})は例外であり、いずれにせよ削除されます。

Emacs がごみ箱ディレクトリ(trash directory)に XDG 規則を使用するように構成されている場合、
これらの規則ではリモート・パスが指定されていないため、 それぞれのツールを使用してリモート・ファイルを復元することはできません。 そのようなファイルは、
必要に応じて @file{$@{XDG_DATA_HOME@}/Trash/files/} から手動で移動して復元する必要があります。


@item
@value{tramp} によって生成された一時ファイルを識別する方法は？

@vindex tramp-temp-name-prefix
一時ファイルは @code{temporary-file-directory} ディレクトリに保持されます。 これは多くの場合 @file{/tmp/}
です。 デフォルトでは、 ファイル名の接頭辞は @t{"tramp."} です。 この接頭辞を変更したい場合、 たとえばパッケージ内で
@code{file-local-copy} によって生成された一時ファイルを識別したい場合、 以下のように、 変数
@code{tramp-temp-name-prefix} に一時的にバインドできます:

@example
@group
(let ((tramp-temp-name-prefix "my-prefix."))
  (file-local-copy "@trampfn{ssh,,.emacs}"))
@result{} "/tmp/my-prefix.HDfgDZ"
@end group
@end example


@item
@value{tramp} で、 長いファイル名を短いキー入力で済ませるにはどうすればよいですか？

以下のアプローチのいくつかを適用してタイピングを減らします。 ここで、 フルネームが
@file{@trampfn{ssh,news@@news.my.domain,/opt/news/etc}} であるとして:

@enumerate

@item
簡略化構文を使用:

デフォルトの方式(method)(@pxref{Default Method})を常に適用する場合は、 簡素化された @value{tramp} 構文
(@pxref{Change file name syntax}) を使用できます:

@lisp
@group
(customize-set-variable 'tramp-default-method "ssh")
(tramp-change-syntax 'simplified)
@end group
@end lisp

これで削減されたタイプ入力: @kbd{C-x C-f
@code{@value{prefix}news@@news.my.domain@value{postfix}/opt/news/etc}
@key{RET}}

@item
方式(method)名とユーザー名にデフォルト値を使用:

あなたは、ホスト達のためにデフォルトの方式(method)とユーザー名を定義できます(@pxref{Default Method},
@pxref{Default User}):

@lisp
@group
(custom-set-variables
 '(tramp-default-method "ssh")
 '(tramp-default-user "news"))
@end group
@end lisp

これで削減されたタイプ入力: @kbd{C-x C-f @trampfn{-,news.my.domain,/opt/news/etc}
@key{RET}}

@strong{注意} 便利なショートカットがすでにいくつかあることに注意してください。 @samp{root}
ユーザーとしてローカルホストにアクセスするには、 @kbd{C-x C-f @trampfn{su,,} @key{RET}} だけでOKです。

@item
アクセス方式(method)の構成(configuration)オプションを使用:

アクセス方式(method)に使用されるプログラムは、 すでに強力な構成を提供しています (@pxref{Customizing
Completion})。 @option{ssh} については、 ファイル @file{~/.ssh/config} を構成します:

@example
@group
Host xy
     HostName news.my.domain
     User news
@end group
@end example

これで削減されたタイプ入力: @kbd{C-x C-f @trampfn{ssh,xy,/opt/news/etc} @key{RET}}

ディレクトリ内のファイルの数に応じて、 ホスト名の補完により、キー・ストロークをさらに減らすことができます: @kbd{C-x C-f
@value{prefix}ssh@value{postfixhop}x @key{TAB}}

@item
環境変数を使用して長い文字列を展開:

長いファイル名の場合、 ミニ・バッファーで展開される環境変数をセットアップします。 環境変数は、Emacs の外部、 または Lisp を使用した
Emacs の内部で設定されます。

@lisp
(setenv "xy" "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}")
@end lisp

これで削減されたタイプ入力: @kbd{C-x C-f $xy @key{RET}}

@strong{注意} ミニ・バッファーの編集中には環境変数が展開されないため、 ここでファイル名を編集することはできません。

@item あなた独自のキー・バインドを定義:

Emacs の @kbd{C-x C-f} で別のキー・シーケンスを再定義します:

@lisp
@group
(global-set-key
 [(control x) (control y)]
 (lambda ()
   (interactive)
   (find-file
    (read-file-name
     "Find @value{tramp} file: "
     "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))))
@end group
@end lisp

これで、 @kbd{C-x C-y} と入力するだけで、 ミニ・バッファでファイル名を編集する準備が整います。

より包括的な例については、 @uref{https://www.emacswiki.org/emacs/TrampMode, the Emacs
Wiki} を参照してください。

@item
あなた独自の略語(abbreviation)を定義(その1):

略語リスト展開(abbreviation list expansion)を使用して、 長いファイル名の入力を減らすことができます:

@lisp
@group
(add-to-list 'directory-abbrev-alist
             '("^/xy" . "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))
@end group
@end lisp

これで削減されたタイプ入力: @kbd{C-x C-f /xy @key{RET}}

@strong{注意} ミニ・バッファーの編集中には略語が展開されないため、 ここでファイル名を編集することはできません。 さらに、@key{TAB}
補完では省略形は展開されません。

@item
あなた独自の略語を定義(その2):

@code{abbrev-mode} は、 ミニ・バッファーでの編集にさらなる柔軟性を与えます:

@lisp
@group
(define-abbrev-table 'my-tramp-abbrev-table
  '(("xy" "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}")))
@end group

@group
(add-hook
 'minibuffer-setup-hook
 (lambda ()
   (abbrev-mode 1)
   (setq local-abbrev-table my-tramp-abbrev-table)))
@end group

@group
(defadvice minibuffer-complete
  (before my-minibuffer-complete activate)
  (expand-abbrev))
@end group
@end lisp

これで削減されたタイプ入力: @kbd{C-x C-f xy @key{TAB}}

ここで、 ミニ・バッファーは、さらに編集できるように展開が行われます。

@item ブックマークの利用:

ブックマークを使用して @value{tramp} ファイル名を保存します。
@ifinfo
(@pxref{Bookmarks, , , emacs})
@end ifinfo

@value{tramp} で場所にアクセスしたら、 @kbd{@key{menu-bar} @key{edit} @key{bookmarks}
@key{set}} でブックマークとして保存します。

そのブックマークに再度アクセスするには: @kbd{@key{menu-bar} @key{edit} @key{bookmarks}
@key{jump}}

@item 「最近使用したファイル」(recent files)の利用:

@file{recentf} は訪れた場所を覚えています。
@ifinfo
(@pxref{File Conveniences, , , emacs})
@end ifinfo

リモート・アクセスによるアクセス可能性をチェックすることなく、 リモート・ファイル名を最近のリストに保持します:

@lisp
(recentf-mode 1)
@end lisp

最近開いたファイルへのアクセス: @kbd{@key{menu-bar} @key{file} @key{Open Recent}}

@item ファイルキャッシュ(filecache)の利用:

@file{filecache} は訪問した場所を記憶するため、 リモート・ディレクトリをキャッシュに追加します:

@lisp
@group
(with-eval-after-load 'filecache
  (file-cache-add-directory
    "@trampfn{ssh,news@@news.my.domain,/opt/news/etc/}"))
@end group
@end lisp

次に、 @kbd{C-x C-f C-@key{TAB}} を使用して、 ミニ・バッファーでディレクトリ補完を使用します。

@item bbdb の利用:

@file{bbdb} には、 Ange FTP ファイル用の組み込み機能があり、 @value{tramp} ファイル名でも機能します。
@ifinfo
(@pxref{bbdb-ftp, Storing FTP sites in the BBDB, , bbdb})
@end ifinfo

@file{bbdb} を Emacs にロードします:

@lisp
@group
(require 'bbdb)
(bbdb-initialize)
@end group
@end lisp

@kbd{M-x bbdb-create-ftp-site @key{RET}} で BBDB エントリを作成します。 次に、
必要に応じて方式(method)とユーザー名を指定します。 例:

@example
@group
@kbd{M-x bbdb-create-ftp-site @key{RET}}
@b{Ftp Site:} news.my.domain @key{RET}
@b{Ftp Directory:} /opt/news/etc/ @key{RET}
@b{Ftp Username:} ssh@value{postfixhop}news @key{RET}
@b{Company:} @key{RET}
@b{Additional Comments:} @key{RET}
@end group
@end example

BBDB バッファで、 キー @kbd{F} を押してエントリにアクセスします。

@end enumerate

これらのレシピに貢献してくれた @value{tramp} ユーザーに感謝します。


@item
保存されたマルチ・ホップ・ファイル名が新しい Emacs セッションで機能しないのはなぜですか？

その場限りのマルチ・ホップ @value{tramp} ファイル名達(ad-hoc multi-hop @value{tramp} file
names)(@pxref{Ad-hoc multi-hops}) を、 ブックマークを介して、または最近のファイルを介して、
またはfilecacheを介して、 またはbbdbを介して、 または別のパッケージを介して、 保存する場合は、
@file{@trampfn{ssh,bird@@bastion|ssh@value{postfixhop}news.my.domain,/opt/news/etc}}
のように、 全てのホップを含む完全なその場限りのファイル名(ad-hoc file name)を使用します。

代わりに、 短縮されたマルチ・ホップ・ファイル名
@file{@trampfn{ssh,news@@news.my.domain,/opt/news/etc}} を保存する場合、 ユーザー・オプション
@code{tramp-save-ad-hoc-proxies} は 非 @code{nil} に設定する必要があります。


@item
@value{tramp} を使用してリモート Emacs セッションに接続するには？

Emacs Client を構成します
@ifinfo
(@pxref{Emacs Server, , , emacs})。
@end ifinfo

それから、 リモート・ホスト上で Emacs Server を開始します:

@lisp
@group
(require 'server)
(setq server-host (system-name)
      server-use-tcp t)
(server-start)
@end group
@end lisp

リモート・ホストの @code{(system-name)} がローカル・ホストで解決できない場合は、 代わりに IP アドレスを使用します。

結果のファイル @file{~/.emacs.d/server/server} をリモート・ホストからローカル・ホストの同一の場所にコピーします。

次に、 コマンド・ラインから Emacs Client を起動します:

@example
$ emacsclient @trampfn{ssh,user@@host,/file/to/edit}
@end example

@code{user} と @code{host} は、 ローカル・ホストを参照します。

Emacs Client を他のプログラムのエディターにするには、 ラッパー・スクリプト @file{emacsclient.sh} を使用します:

@example
@group
#!/bin/sh
emacsclient @trampfn{ssh,$(whoami)@@$(hostname --fqdn),$1}
@end group
@end example

@vindex EDITOR@r{, environment variable}
次に、 環境変数 @env{EDITOR} を変更して、 ラッパー・スクリプトを指すようにします:

@example
$ export EDITOR=/path/to/emacsclient.sh
@end example


@item
バッファがリモートかどうかを判断する方法は？

バッファ・ローカル変数 @code{default-directory} がこれについて教えてくれます。  Lisp式
@code{(file-remote-p default-directory)} が 非 @code{nil} を返す場合、 バッファはリモートです。
リモート接続の詳細については、 @code{file-remote-p} のオプションの引数を参照してください。


@item
リモート・ホストに到達できなくなったときにファイルを保存する方法は？

Emacs が実行されているローカル・マシンがネットワーク統合(network integration)を変更すると、
リモート・ストに到達できなくなる可能性があります。  これは、例えば、 Emacs
を再起動せずにオフィスと自宅の間でローカル・マシンを移動した場合に発生します。

そのような場合、 コマンド @code{tramp-rename-files}
を使用して、リモート・バッファの方式(method)やホストやディレクトリ名を変更できます。
これにより、コンテンツを別のネットワーク・パス経由で同じ場所に保存することも、
(ローカルを含む)完全に別の場所に保存することもできます(@pxref{Renaming remote files})。


@item
@value{tramp} が @code{recentf-list} をクリアしないようにするにはどうすればよいですか？

@value{tramp} が接続を消去すると、 それぞれのリモート・ファイル名達(remote file name(s))が
@code{recentf-list} から削除されます。 これが必要なのは、 応答しないリモート・ホストに対して @code{recentf}
をトリガーして、 応答しないリモート・ホストに何度も何度も接続しようとする可能性があるためです。

あなたにとって @code{recentf-list} 内のファイル名達がとても大事(precious)なため、 クリーンアップが煩わしい場合は、
@code{tramp} パッケージと @code{recentf} パッケージのロード後、 以下の2つのLisp式を @file{~/.emacs}
に追加できます:

@lisp
@group
(remove-hook
 'tramp-cleanup-connection-hook
 #'tramp-recentf-cleanup)
@end group
@group
(remove-hook
 'tramp-cleanup-all-connections-hook
 #'tramp-recentf-cleanup-all)
@end group
@end lisp


@item
@samp{Tramp has been compiled with Emacs a.b, this is Emacs c.d}
という警告が表示されます
@item
エラー @samp{tramp-file-name-handler: Invalid function:tramp-compat-with-mutex}
が表示されます

@value{tramp} には、 異なる Emacs バージョンの互換性コードが付属しています。 このようなメッセージ
(テキストは異なる場合があります) が表示された場合は、 Emacs 組み込みバージョンの @value{tramp} を使用せず、
再コンパイルする必要があります。 GNU ELPA から @value{tramp} をインストールした場合、
@ifset installchapter
@xref{ELPA Installation} を参照し、 そうじゃない場合は  @xref{Recompilation} を参照してください。
@end ifset
@ifclear installchapter
@uref{@value{trampurl}#ELPA-Installation} を参照し、 そうじゃない場合は
@uref{@value{trampurl}#Recompilation} を参照してください。
@end ifclear


@item
エラー @samp{Remote file error: Forbidden reentrant call of
Tramp}(訳注:リエントラント呼び出しの禁止)が表示されます

@vindex remote-file-error
@vindex debug-ignored-errors
タイマー(timers)やプロセス・フィルター(process filters)やセンチネル(sentinels)やその他の、
イベント・ベースの関数は、 リモート・ファイル操作がまだ実行されているときにいつでも実行できます。 これにより、 @value{tramp}
がブロックされる可能性があります。 このような状況が検出されると、このエラーがトリガーされます。
それぞれの関数で修正を行う必要があります(エラー・レポートの送信が役立ちます)が、 当面は @file{~/.emacs}
内の以下のコードでこのエラーを抑制することができます:

@lisp
@group
(setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
@end group
@end lisp


@item
エラー @samp{Remote file error: Not a valid Tramp file name function
`tramp-FOO-file-name-p'} が表示されます

@value{tramp} が内部関数の識別子(signature)を変更しました。  独自の @value{tramp}
バックエンドを実装する外部パッケージは、 この変更に従う必要があります。 この問題をそのパッケージの作者に報告してください。

実行中のセッションでは、 @value{tramp} によって外部パッケージを無効にし、 作業を続行できます。 @value{tramp}
の有効化中にこのエラーを表示したくない場合は、 あなたの @file{~/.emacs} で上記と同一のコードを使用して抑制できます:

@lisp
@group
(setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
@end group
@end lisp


@item
他のパッケージから @value{tramp} を呼び出せないようにする方法は？

ユーザーがリモート・ファイル名を入力することなく @value{tramp} を呼び出すパッケージがあります。 リモート・ファイル構文を適用しなくても、
一部のパッケージは @value{tramp} を独自に有効にします。 ユーザーがそのような機能を無効にするにはどうすればよいでしょうか。

@itemize @minus
@item
@file{ido.el}

@value{tramp} ファイル名補完を無効にする:

@lisp
(customize-set-variable 'ido-enable-tramp-completion nil)
@end lisp

@c Obsolete since Emacs 29.1.
@item
@file{rlogin.el}

リモート・ディレクトリ追跡モード(remote directory tracking mode)を無効にする:

@lisp
(rlogin-directory-tracking-mode -1)
@end lisp
@end itemize


@item
@value{tramp} を無効にする方法は？

@itemize @minus
@item
Ange FTP をデフォルトのリモート・ファイル・アクセス・パッケージとして保持するには、 以下を @file{.emacs} に設定します:

@lisp
(customize-set-variable 'tramp-default-method "ftp")
@end lisp

Ange FTP の構文を有効にする場合は、 以下のLisp式を追加します:

@lisp
(tramp-change-syntax 'simplified)
@end lisp

@item
@vindex tramp-mode
@value{tramp} も無効にする(Ange FTP も無効にする)には、 @file{.emacs} で @code{tramp-mode} を
@code{nil} に設定します。 @strong{注意} @value{tramp} のロードを避けるために、
@code{customize-set-variable} は使用しないことに注意してください。

@lisp
(setq tramp-mode nil)
@end lisp

@item
@vindex tramp-ignored-file-name-regexp
類似したリモート・ファイル名に対して @value{tramp} を無効にするには、 @file{.emacs} で
@code{tramp-ignored-file-name-regexp} を適切な正規表現に設定します。 @strong{注意}
@value{tramp} のロードを避けるために、 @code{customize-set-variable} は使用しないことに注意してください。

@lisp
(setq tramp-ignored-file-name-regexp "\\`/ssh:example\\.com:")
@end lisp

これが必要なのは、 たとえばローカル・ホストのルート・ディレクトリに @file{/ssh:example.com:}
として仮想ファイル・システムをマウントする場合です。

@item
@value{tramp} をアンロードするには、 @kbd{M-x tramp-unload-tramp @key{RET}} と入力します。
@value{tramp} をアンロードすると、Ange FTP プラグインもリセットされます。
@end itemize


@item
Ange FTP と @value{tramp} の違いは何ですか？

その違いは、 Ange FTP は @command{ftp} を使用してローカル・ホストとリモート・ホストの間でファイルを転送するのに対し、
@value{tramp} は @command{ssh} と @command{scp} または他の同様のプログラムの組み合わせを使用することです。
@end itemize


@c For the developer.
@node Files directories and localnames
@chapter How file names, directories and localnames are mangled and managed

@menu
* Localname deconstruction::  Splitting a localname into its component 
                                parts.
* External packages::        Integrating with external Lisp packages.
@end menu


@node Localname deconstruction
@section Splitting a localname into its component parts

@value{tramp} パッケージは、 @value{tramp} が必要とする独自のファイル命名構文に対応するために、 Lisp 関数
@code{file-name-directory} と @code{file-name-nondirectory} を再定義します。

その置き換えたモノはファイル名を分解し、localname に対して元々のハンドラを使用し、 その結果を受け取って、
@value{tramp}ファイル名を再構築します。 localname のための元々のハンドラに依存することによって、
@value{tramp}は元々のハンドラに対するプラットフォーム特有のハックの恩恵を享受します。


@node External packages
@section Integrating with external Lisp packages

一般に、 このマニュアルで説明されていない @value{tramp} 関数と変数を使用することは推奨されません。 それらは、
何のアナウンスもなくシグネチャやセマンティクスを変更する可能性があります。


@subsection File name completion

@vindex non-essential
パスワードの入力などを含め、 リモート・ホストへの新しい接続を開くのが不便な場合があります。 たとえば、
ファイル名の補完を提供するパッケージにとってはこれは厄介です。 そのようなパッケージは、@value{tramp} に、
新しい接続を確立したくないというシグナルを送ることができます。 変数 @code{non-essential} を一時的に使用し、 非
@code{nil} にバインドします。

@lisp
@group
(let ((non-essential t))
  @dots{})
@end group
@end lisp


@subsection File attributes cache

@vindex process-file-side-effects
リモート・ファイルの属性(remote file attributes)のローカル・キャッシュをリモート・ホストと同期させておくのは、
時間のかかる操作です。 これらの属性をフラッシュして再クエリすると、 ビジー状態のリモート・ホストでは @value{tramp}
に負荷がかかり、停止(halt)する可能性があります。

@value{tramp} の応答性におけるこれらのタイプのスローダウンを回避するには、
@code{process-file-side-effects} を @code{nil} に設定して、 @value{tramp}
によるキャッシュのフラッシュを停止します。 これは、@code{process-file}
の呼び出し元がファイル属性の変更がないことを知っている状況で役立ちます。 これを実現する let バインド式 は以下です:

@lisp
@group
(let (process-file-side-effects)
  @dots{})
@end group
@end lisp

非同期プロセスの場合、 @value{tramp} はプロセス・センチネル(process
sentinel;プロセス番兵)を使用してファイルの属性のキャッシュをフラッシュします。 @code{start-file-process}
の呼び出し元でファイル属性の変更が予期されていないことを事前に知っている場合、 プロセス・センチネルをデフォルト状態に設定する必要があります。
呼び出し元が独自のプロセス・センチネルを定義する場合、 @value{tramp} のプロセス・センチネルは上書きされます。 呼び出し元は、
以下のコードを使用して、 プロセス・センチネルのファイル属性キャッシュを引き続きフラッシュできます:

@lisp
@group
(unless (memq (process-status proc) '(run open))
  (dired-uncache remote-directory))
@end group
@end lisp

@value{tramp} はルート・ディレクトリから始まるサブディレクトリをトラバースするため、 プロセス・バッファの
@code{default-directory} をルート・ディレクトリとして作成するだけで十分です。


@subsection Timers

@vindex remote-file-error
タイマーは、 Emacs がプロセスに文字列を送信するのを待っているとき、 またはプロセスの出力を待っているときはいつでも非同期で実行されます。
同じ接続が影響を受ける場合、 すでに実行中のリモート・ファイル操作と競合する任意のリモート・ファイル操作を実行できます。 @value{tramp}
はこの状況を検出し、 @code{remote-file-error} エラーを発生させます。 タイマー関数は、 この状況を回避する必要があります。
少なくとも、 タイマー関数本体を以下のようにラッピングすることで、 このエラーから自身を保護する必要があります:

@lisp
@group
(ignore-error 'remote-file-error
  @dots{})
@end group
@end lisp


@node Traces and Profiles
@chapter How to Customize Traces
@vindex tramp-verbose
@vindex tramp-debug-to-file

@value{tramp} メッセージは、 0 から 10 までのおしゃべりレベル(verbosity levels)で生成されます。
@value{tramp} は、 すべてのメッセージを表示するわけではなく、  @code{tramp-verbose}
以下のおしゃべりレベルのもののみを表示します。

おしゃべりレベルは以下の通りです

          @noindent @w{ 0} silent (no @value{tramp} messages at all)  @*@indent @w{ 1}
errors @*@indent @w{ 2} warnings @*@indent @w{ 3} connection to remote hosts
(default verbosity)  @*@indent @w{ 4} activities @*@indent @w{ 5} internal
@*@indent @w{ 6} sent and received strings @*@indent @w{ 7} connection
properties @*@indent @w{ 8} file caching @*@indent @w{ 9} test commands
@*@indent @w{10} traces (huge)  @*@indent @w{11} call traces (maintainer
only)

@code{tramp-verbose} が 4 以上の場合、 メッセージは @value{tramp} デバッグ・バッファにも書き込まれます。
このようなデバッグ・ バッファは、 バグや問題の分析に不可欠です。 @value{tramp} バグ・レポートの場合、
@code{tramp-verbose} レベルを 6 に設定します(@pxref{Bug Reports})。

デバッグ・バッファはアウトライン・モードです
@ifinfo
(@ref{Outline Mode, , , emacs})。
@end ifinfo
@ifnotinfo
。
@end ifnotinfo
このバッファでは、 メッセージをレベルでフィルタリングできます。 詳細レベル 5 までのメッセージを表示するには、 @kbd{C-u 6 C-c
C-q} と入力します。
@ifinfo
その他のナビゲーション・キーは @ref{Outline Visibility, , , emacs} をご覧下さい。
@end ifinfo

@value{tramp} はエラーを内部的に処理します。 したがって、 Lisp バックトレースを取得するには、 以下の設定が必要です:

@lisp
@group
(setq debug-on-error t
      debug-on-signal t)
@end group
@end lisp

@code{tramp-verbose} が 10 以上の場合、 エラーの場合には Lisp バックトレースも @value{tramp}
デバッグ・バッファに追加されます。

非常にまれなケースですが、 @value{tramp} が Emacs をブロックすることがあります。 Emacs を強制終了すると、
デバッグ・バッファを検査できなくなります。 その場合、 @value{tramp} にデバッグ・バッファをファイルにミラーリングするように指示できます。

@lisp
(customize-set-variable 'tramp-debug-to-file t)
@end lisp

デバッグ・バッファは、 @code{temporary-file-directory} にファイルとして書き込まれます。
これは通常、@file{/tmp/} です。 @value{tramp} アクションのパフォーマンスが低下する可能性があるため、
このオプションは注意して使用してください。

@code{tramp-verbose} が 11 以上の場合、 @value{tramp} 関数呼び出しのトレースがバッファー
@file{*trace-output*} に書き込まれます。


@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi


@node Function Index
@unnumbered Function Index
@printindex fn


@node Variable Index
@unnumbered Variable Index
@printindex vr


@node Concept Index
@unnumbered Concept Index
@printindex cp

@bye

@c TODO
@c
@c * Say something about the .login and .profile files of the remote
@c   shells.
@c
@c * Explain how tramp.el works in principle: open a shell on a remote
@c   host and then send commands to it.
@c
@c * Consistent small or capitalized words especially in menus.
